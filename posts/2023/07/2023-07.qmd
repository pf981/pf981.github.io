---
title: "2023 Day 7"
subtitle: "Camel Cards"
date: 2024-04-03
categories: [python, easy, mathematics]
draft: false
knitr:
  opts_chunk: 
    comment: "#>"
    collapse: true
problem_url: "https://adventofcode.com/2023/day/7"
description: "Easy puzzle evaluating simplified poker hands."
---

```{r}
#| echo: false
#| output: false
# www.fontsquirrel.com/fonts/latin-modern-roman -> Webfont Kit -> TTF -> Download
sysfonts::font_paths("../../../fonts")

sysfonts::font_add(
  "LM Roman 10",
  regular = "lmroman10-regular-webfont.ttf",
  bold = "lmroman10-bold-webfont.ttf",
  italic = "lmroman10-italic-webfont.ttf",
  bolditalic = "lmroman10-bolditalic-webfont.ttf"
)

showtext::showtext_auto()
```

::: {.hidden}
$$
\newcommand{\blue}[1]{\color{##1577A0}\textbf{#1}\color{##55595C}}
\newcommand{\orange}[1]{\color{##91672C}\textbf{#1}\color{##55595C}}
\newcommand{\red}[1]{\color{##BE4844}\textbf{#1}\color{##55595C}}
\newcommand{\green}[1]{\color{##2F7E4A}\textbf{#1}\color{##55595C}}
\newcommand{\grey}[1]{\color{##969696}{#1}\color{##55595C}}
\newcommand{\greyred}[1]{\color{##f27d79}{#1}\color{##55595C}}
\newcommand{\greygreen}[1]{\color{##7ec295}{#1}\color{##55595C}}
\newcommand{\greyblue}[1]{\color{##76acc2}{#1}\color{##55595C}}
\newcommand{\plus}{\smash{\lower{0.5pc}\grey{+}}}
$$
:::


Ho ho ho, fellow adventurers!

[Advent of Code day 7]({{< meta problem_url >}}) is an easy puzzle evaluating simplified poker hands.

First, we'll read the input.
```{python}
with open('input.txt', "r") as f:
    lines = f.readlines()
```

## Part 1 <small class="text-body-secondary">Hold to Gold</small>

::::: {.p-0 style="min-width: fit-content;"}

```{=html}
<div class="card border-secondary mb-3 mx-auto">
  <div class="card-body p-3 m-1 pb-0 mb-0">
    <h4 class="card-title mt-0">Task 1</h4>
```

You are given a list of 5 card hands and their corresponding <b class='fw-bold' style='color: #2F7E4A;'>bids</b>. <b class='fw-bold' style='color: #1577A0;'>Rank</b> each hand and calculate the winnings as the product of the <b class='fw-bold' style='color: #1577A0;'>rank</b> and <b class='fw-bold' style='color: #2F7E4A;'>bid</b>. Compute the <b class='fw-bold' style='color: #91672C;'>total winnings</b>.

Ranks... Todo...

You're given a list of races for toy boats. Each race contains a <b class='fw-bold' style='color: #2F7E4A;'>race duration (ms)</b> and a <b class='fw-bold' style='color: #BE4844;'>current distance record (mm)</b>.

The distance a toy boat travels in a race is determined by how long you hold the button at the start: each millisecond of holding increases the boat's speed by 1 mm/ms, but also reduces the remaining time for movement. After releasing the button, the boat travels at its accumulated speed for the rest of the race duration.

Find the <b class='fw-bold' style='color: #1577A0;'>number of ways to beat each race's record</b> and get the <b class='fw-bold' style='color: #91672C;'>product</b> of those numbers.

<h6 class="card-subtitle text-muted">Example</h6>
<!-- &{\text{Hand}} &&{\text{Bid}} &&{\text{\grey{Rank}}} &&{\text{\grey{Type}}}\phantom{\Huge{G}}&{\text{\grey{Winnings}}} &\\ -->

$$
\begin{aligned}
&{\text{Hand}} &&{\text{Bid}} &&{\text{\grey{Rank}}} &&{\text{\grey{Type}}}\phantom{\Huge{g}}&{\text{\grey{Winnings}}} &\\
&\text{32T3K}            &&\green{765}            &&\greyblue{1}                       &&\text{\grey{One pair}}         &\greygreen{765} \,\grey{\times}\, \greyblue{1}                &\plus\\
&\text{T55J5}            &&\green{684}            &&\greyblue{4}                       &&\text{\grey{Full house}}       &\greygreen{684} \,\grey{\times}\, \greyblue{4}                &\plus\\
&\text{KK677}            &&\green{28}             &&\greyblue{3}                       &&\text{\grey{Two pair}}\grey{^*}       & \greygreen{28} \,\grey{\times}\, \greyblue{3}                &\plus\\
&\text{KTJJT}            &&\green{220}            &&\greyblue{2}                       &&\text{\grey{Two pair}}         &\greygreen{220} \,\grey{\times}\, \greyblue{2}                &\plus\\
&\text{QQQJA}            &&\green{483}            &&\greyblue{5}                       &&\text{\grey{Three of a kind}}  &\greygreen{483} \,\grey{\times}\, \greyblue{5} \llap{\lower{0.4pc}\underline{\phantom{483 \times 5}}}               &\\
&                        &&                       &&                        &&                        &\orange{6440}                        &\\
\end{aligned}
$$

<!-- $$ -->
<!-- \begin{aligned} -->
<!-- &\underline{\text{Hand}} &&\underline{\text{Bid}} &&\underline{\text{\grey{Rank}}} &&\underline{\text{\grey{Type}}} &\underline{\text{\grey{Winnings}}} &\\ -->
<!-- &\text{32T3K}            &&\green{765}            &&1                       &&\text{One pair}         &765 \times 1                &\\ -->
<!-- &\text{T55J5}            &&\green{684}            &&4                       &&\text{Full house}       &684 \times 4                &\\ -->
<!-- &\text{KK677}            &&\green{28}             &&3                       &&\text{Two pair}^*       & 28 \times 3                &\\ -->
<!-- &\text{KTJJT}            &&\green{220}            &&2                       &&\text{Two pair}         &220 \times 2                &\\ -->
<!-- &\text{QQQJA}            &&\green{483}            &&5                       &&\text{Three of a kind}  &483 \times 5                &\\ -->
<!-- &                        &&                       &&                        &&                        &6440                        &\\ -->
<!-- \end{aligned} -->
<!-- $$ -->

$\grey{\scriptsize{^{*}\text{Stronger second card than other two pair}}}$


```{=html}
  </div>
</div>
```

:::::

<div style="clear: both;"></div> 


Then simply plug in the numbers for each race and get the <b class='fw-bold' style='color: #91672C;'>product</b> of the resulting values.

```{python}
import collections


def primary_order(hand):
    counts = [count for card, count in collections.Counter(hand).most_common()]

    possible_counts = [
        [1, 1, 1, 1, 1],  # High card
        [2, 1, 1, 1],  # One pair
        [2, 2, 1],  # Two pair
        [3, 1, 1],  # Three of a kind
        [3, 2],  # Full house
        [4, 1],  # Four of a kind
        [5],  # Five of a kind
    ]

    return possible_counts.index(counts)


def secondary_order(hand):
    return tuple("23456789TJQKA".index(card) for card in hand)


def hand_bid_order(hand_bid):
    hand, bid = hand_bid
    return primary_order(hand), secondary_order(hand)


hands_bids = [line.split(" ") for line in lines]
hands_bids.sort(key=hand_bid_order)
answer1 = sum(i * int(bid) for i, (_, bid) in enumerate(hands_bids, 1))
print(answer1)
```

```{=html}
<div class="card border-info mb-3 mx-auto">
  <div class="card-header text-white bg-info">Key Points</div>
  <div class="card-body p-1">
    <p class="card-text">
```

* Find the upper and lower button hold times which beat the record
* This can be expressed as the intersection between $f(x) = D$ and $f(x) = w \cdot (T - w)$
* Compute the product of the differences between the upper and lower bounds

```{=html}
    </p>
  </div>
</div>
```


## Part 2 <small class="text-body-secondary">Magnitude Multiplied</small>

::::: {.p-0 style="min-width: fit-content;"}

:::: {.pe-4}
```{=html}
<div class="card border-secondary mb-3 mx-auto">
  <div class="card-body p-3 m-1 pb-0 mb-0">
    <h4 class="card-title mt-0">Task 2</h4>
```

Rather than multiple races, the <b class='fw-bold' style='color: #2F7E4A;'>race durations</b> and <b class='fw-bold' style='color: #BE4844;'>distance records</b> are each concatenated to form one giant race.

Find the <b class='fw-bold' style='color: #1577A0;'>number of ways to beat this race's record</b>.

<h6 class="card-subtitle text-muted">Example</h6>
```
Time:      71530
Distance:  940200
```

```{r dev="svg"}
#| dpi: 216
#| code-fold: true
#| code-summary: "Figure Source"
#| warning: false
#| fig-cap: "Tails zoomed 1000x for readability"

```

```{=html}
  </div>
</div>
```
::::
:::::


<div style="clear: both;"></div> 

Just plug the new numbers into the same formula.

```{python}
def hand_bid_order_wild(hand_bid):
    hand, bid = hand_bid
    return (
        max(primary_order(hand.replace("J", c)) for c in "23456789TJQKA"),
        secondary_order(hand),
    )


hands_bids.sort(key=hand_bid_order_wild)
answer2 = sum(i * int(bid) for i, (_, bid) in enumerate(hands_bids, 1))
print(answer2)
```


```{=html}
<div class="card border-info mb-3 mx-auto">
  <div class="card-header text-white bg-info">Key Points</div>
  <div class="card-body p-1">
    <p class="card-text">
```

* Concatenate the <b class='fw-bold' style='color: #2F7E4A;'>race durations</b> and <b class='fw-bold' style='color: #BE4844;'>distance records</b>
* Compute the <b class='fw-bold' style='color: #1577A0;'>number of ways to beat this race's record</b> using the same formula as part 1
```{=html}
    </p>
  </div>
</div>
```


{{< include ../../_button_footer.qmd >}}
