---
title: "2023 Day 4"
subtitle: "Scratchcards"
date: 2024-01-06
categories: [python, medium, dynamic programming]
draft: true
knitr:
  opts_chunk: 
    comment: "#>"
    collapse: true
problem_url: "https://adventofcode.com/2023/day/4"
description: "Medium difficulty dynamic programming puzzle."
mermaid:
  theme: neutral
---

```{r}
#| echo: false
#| output: false
# www.fontsquirrel.com/fonts/latin-modern-roman -> Webfont Kit -> TTF -> Download
sysfonts::font_paths("../../../fonts")

sysfonts::font_add(
  "LM Roman 10",
  regular = "lmroman10-regular-webfont.ttf",
  bold = "lmroman10-bold-webfont.ttf",
  italic = "lmroman10-italic-webfont.ttf",
  bolditalic = "lmroman10-bolditalic-webfont.ttf"
)

showtext::showtext_auto()
```

Ho ho ho, fellow adventurers!

[Advent of Code day 4]({{< meta problem_url >}}) [Intro here]

First, we'll read the input.
```{python}
with open('input.txt', "r") as f:
    lines = f.read().splitlines()
```

## Part 1 <small class="text-body-secondary">[Subtitle]</small>

::: {.hidden}
$$
\newcommand{\grey}[1]{\normalsize\color{##969696}#1\normalsize}
$$

$$
\newcommand{\score}[1]{\phantom{xxxxxxxx}\llap{\grey{#1}}}
$$

$$
\newcommand{\plus}{\smash{\lower{0.5pc}\color{#969696}{+}}}
$$

$$
\newcommand{\card}[1]{\text{Card #1: }}
$$

$$
\newcommand{\num}[1]{\large\phantom{\textbf{\;1\;\;}}\llap{\text{\;#1}}}
$$

$$
\newcommand{\match}[1]{\color{##2F7E4A}\large\phantom{\textbf{\;1\;\;}}\llap{\;\textbf{#1}}\color{##55595C}\normalsize}
$$

$$
\newcommand{\wins}[1]{\phantom{xxx}\llap{\grey{\text{#1}}}}
$$
:::

::::: {.p-0 style="min-width: fit-content;"}

```{=html}
<div class="card border-secondary mb-3 mx-auto">
  <div class="card-body p-3 m-1 pb-0 mb-0">
    <h4 class="card-title mt-0">Task 1</h4>
```

Calculate the <b class='fw-bold' style='color: #91672C;'>sum</b> of scores of each card as one for the first <b class='fw-bold' style='color: #2F7E4A;'>match</b> and double for each subsequent <b class='fw-bold' style='color: #2F7E4A;'>match</b>.

<h6 class="card-subtitle text-muted">Example</h6>

$$
\begin{aligned}
&\card{1}\num{41}\match{48}\match{83}\match{86}\match{17}\;|\match{83}\match{86}\num{ 6}\num{31}\match{17}\num{ 9}\match{48}\num{53}&\wins{4 wins}&&\score{1 \times 2 \times 2 \times 2}\plus\\
&\card{2}\num{13}\match{32}\num{20}\num{16}\match{61}\;|\match{61}\num{30}\num{68}\num{82}\num{17}\match{32}\num{24}\num{19}&\wins{2 wins}&&\score{1 \times 2}\plus\\
&\card{3}\match{ 1}\match{21}\num{53}\num{59}\num{44}\;|\num{69}\num{82}\num{63}\num{72}\num{16}\match{21}\num{14}\match{ 1}&\wins{2 wins}&&\score{1 \times 2}\plus\\
&\card{4}\num{41}\num{92}\num{73}\match{84}\num{69}\;|\num{59}\match{84}\num{76}\num{51}\num{58}\num{ 5}\num{54}\num{83}&\wins{1 wins}&&\score{1}\plus\\
&\card{5}\num{87}\num{83}\num{26}\num{28}\num{32}\;|\num{88}\num{30}\num{70}\num{12}\num{93}\num{22}\num{82}\num{36}&\wins{0 wins}&&\score{0}\plus\\
&\card{6}\num{31}\num{18}\num{13}\num{56}\num{72}\;|\num{74}\num{77}\num{10}\num{23}\num{35}\num{67}\num{36}\num{11}&\wins{0 wins}&&\score{0}\llap{\lower{0.4pc}\underline{\phantom{\large{\textbf{13}}}}}\phantom{\plus}\\
& & && \color{#91672C}\large{\textbf{13}}\normalsize\phantom{\plus}
\end{aligned}
$$

```{=html}
  </div>
</div>
```

:::::

<div style="clear: both;"></div> 

[Part 1 here]

```{python}
import re


cards = [[set(re.findall(r'\d+', side)) for side in line.split(':')[1].split('|')] for line in lines]
n_wins = [len(have.intersection(want)) for have, want in cards]
answer1 = sum(2**(n - 1) for n in n_wins if n > 0)
print(answer1)
```

```{=html}
<div class="card border-info mb-3 mx-auto">
  <div class="card-header text-white bg-info">Key Points</div>
  <div class="card-body p-1">
    <p class="card-text">
```

* [Part 1 key points]

```{=html}
    </p>
  </div>
</div>
```

## Part 2 <small class="text-body-secondary">[Subtitle here]</small>

::::: {.p-0 style="min-width: fit-content;"}

:::: {.pe-4}
```{=html}
<div class="card border-secondary mb-3 mx-auto">
  <div class="card-body p-3 m-1 pb-0 mb-0">
    <h4 class="card-title mt-0">Task 2</h4>
```

[Task 2 description]

<h6 class="card-subtitle text-muted">Example</h6>

In this example, there are <mark class='fw-bold' style='background-color: #FFF3BF'>6 starting cards</mark> and <mark class='fw-bold' style='background-color: #EDECFF;'>24 won cards</mark> for a total of <b class='fw-bold' style='color: #91672C;'>30</b> cards.

$$
\begin{aligned}
&\card{1}\num{41}\match{48}\match{83}\match{86}\match{17}\;|\match{83}\match{86}\num{ 6}\num{31}\match{17}\num{ 9}\match{48}\num{53}&&\grey{\text{Wins cards 2, 3, 4, \& 5}}\\
&\card{2}\num{13}\match{32}\num{20}\num{16}\match{61}\;|\match{61}\num{30}\num{68}\num{82}\num{17}\match{32}\num{24}\num{19}&&\grey{\text{Wins cards 3 \& 4}}\\
&\card{3}\match{ 1}\match{21}\num{53}\num{59}\num{44}\;|\num{69}\num{82}\num{63}\num{72}\num{16}\match{21}\num{14}\match{ 1}&&\grey{\text{Wins cards 4 \& 5}}\\
&\card{4}\num{41}\num{92}\num{73}\match{84}\num{69}\;|\num{59}\match{84}\num{76}\num{51}\num{58}\num{ 5}\num{54}\num{83}&&\grey{\text{Wins card 5}}\\
&\card{5}\num{87}\num{83}\num{26}\num{28}\num{32}\;|\num{88}\num{30}\num{70}\num{12}\num{93}\num{22}\num{82}\num{36}&&\\
&\card{6}\num{31}\num{18}\num{13}\num{56}\num{72}\;|\num{74}\num{77}\num{10}\num{23}\num{35}\num{67}\num{36}\num{11}&&\\
\end{aligned}
$$

:::{.d-flex .justify-content-center}
```{mermaid}
%%{
  init: {
    'theme': 'base',
    'themeVariables': {
      'primaryColor': '#55595c',
      'primaryTextColor': '#55595c',
      'primaryBorderColor': '#C2C2C2',
      'lineColor': '#C2C2C2',
      'secondaryColor': '#C2C2C2',
      'tertiaryColor': '#fff',
      'background': '#FFFFFF',
      'mainBkg': '#FFFFFF',
      'clusterBkg': '#ededed',
      'fontFamily': 'Nunito Sans'
    },
    'flowchart': {
      'nodeSpacing': 15,
      'rankSpacing': 50
    }
  }
}%%
flowchart LR
  A[Card 1]:::starting --> A1[Card 2]
  A[Card 1] --> A2[Card 3]
  A[Card 1] --> A3[Card 4]
  A[Card 1] --> A4[Card 5]
  A1 --> A11[Card 3]
  A1 --> A12[Card 4]
  A2 --> A21[Card 4]
  A2 --> A22[Card 5]
  A3[Card 4] --> A31[Card 5]
  A11 --> A111[Card 4]
  A11 --> A112[Card 5]
  A12[Card 4] --> A121[Card 5]
  A21[Card 4] --> A211[Card 5]
  A111[Card 4] --> A1111[Card 5]

  B[Card 2]:::starting --> B1[Card 3]
  B[Card 2] --> B2[Card 4]
  B1 --> B11[Card 4]
  B1 --> B12[Card 5]
  B11[Card 4] --> B111[Card 5]
  B2 --> B21[Card 5]
  
  C[Card 3]:::starting --> C1[Card 4]
  C[Card 3] --> C2[Card 5]
  C1[Card 4] --> C11[Card 5]
  
  D[Card 4]:::starting --> D1[Card 5]
  E[Card 5]:::starting
  F[Card 6]:::starting
  classDef default fill:#EDECFF
  classDef starting fill:#FFF3BF
```
:::

```{=html}
  </div>
</div>
```
::::

[Part 2 here]
With our input, we are going to end up with millions of scratch cards so we probably don't want to be counting each of them individually.
What if we just prepend len(n_wins) to n_wins. Then the answer is just count_scratchcards(0) - 1

:::::

<div style="clear: both;"></div> 

```{python}
import functools


@functools.cache
def count_scratchcards(i):
  if i > len(n_wins):
    return 0
  return 1 + sum(count_scratchcards(i + j + 1) for j in range(n_wins[i]))


answer2 = sum(count_scratchcards(i) for i in range(len(n_wins)))
print(answer2)
```

```{=html}
<div class="card border-info mb-3 mx-auto">
  <div class="card-header text-white bg-info">Key Points</div>
  <div class="card-body p-1">
    <p class="card-text">
```

* [Part 2 key points here]

```{=html}
    </p>
  </div>
</div>
```

## Stocking Stuffers <small class="text-body-secondary">[Subtitle here]</small>
[Extras here]
[Put stuff about top-down vs bottom-up dynamic programming. Use fibonacci as an example. Overlapping subproblems. Recursion with memoisation is by far the easiest]

{{< include ../../_button_footer.qmd >}}
