---
title: "2023 Day 4"
subtitle: "Scratchcards"
date: 2024-01-06
categories: [python, medium, dynamic programming]
draft: true
knitr:
  opts_chunk: 
    comment: "#>"
    collapse: true
problem_url: "https://adventofcode.com/2023/day/4"
description: "Medium difficulty dynamic programming puzzle."
mermaid:
  theme: neutral
---

Ho ho ho, fellow adventurers!

In [Advent of Code day 4]({{< meta problem_url >}}) we must convince an elf to lend us his boat by helping him decipher his scratchcards.

This puzzle propels us into the exciting world of **dynamic programming**, a technique for efficiently solving problems with **overlapping subproblems**. It's secret weapon against repetitive calculations!

Even if you're new to this, fear not! I'll share an easy intuitive approach that will work with almost any **dynamic programming** challenge.

First, we'll read the input.
```{python}
with open('input.txt', "r") as f:
    lines = f.read().splitlines()
```

## Part 1 <small class="text-body-secondary">Multiplicative Match Mayhem</small>

::: {.hidden}
$$
\newcommand{\grey}[1]{\normalsize\color{##969696}#1\normalsize}
$$

$$
\newcommand{\score}[1]{\phantom{xxxxxxxx}\llap{\grey{#1}}}
$$

$$
\newcommand{\plus}{\smash{\lower{0.5pc}\color{#969696}{+}}}
$$

$$
\newcommand{\card}[1]{\text{Card #1: }}
$$

$$
\newcommand{\num}[1]{\large\phantom{\textbf{\;1\;\;}}\llap{\text{\;#1}}}
$$

$$
\newcommand{\match}[1]{\color{##2F7E4A}\large\phantom{\textbf{\;1\;\;}}\llap{\;\textbf{#1}}\color{##55595C}\normalsize}
$$

$$
\newcommand{\wins}[1]{\phantom{xxx}\llap{\grey{\text{#1}}}}
$$
:::

::::: {.p-0 style="min-width: fit-content;"}

```{=html}
<div class="card border-secondary mb-3 mx-auto">
  <div class="card-body p-3 m-1 pb-0 mb-0">
    <h4 class="card-title mt-0">Task 1</h4>
```

Calculate the <b class='fw-bold' style='color: #91672C;'>sum</b> of scores of each card as one for the first <b class='fw-bold' style='color: #2F7E4A;'>match</b> and double for each subsequent <b class='fw-bold' style='color: #2F7E4A;'>match</b>.

<h6 class="card-subtitle text-muted">Example</h6>

$$
\begin{aligned}
&\card{1}\num{41}\match{48}\match{83}\match{86}\match{17}\;|\match{83}\match{86}\num{ 6}\num{31}\match{17}\num{ 9}\match{48}\num{53}&\wins{4 wins}&&\score{1 \times 2 \times 2 \times 2}\plus\\
&\card{2}\num{13}\match{32}\num{20}\num{16}\match{61}\;|\match{61}\num{30}\num{68}\num{82}\num{17}\match{32}\num{24}\num{19}&\wins{2 wins}&&\score{1 \times 2}\plus\\
&\card{3}\match{ 1}\match{21}\num{53}\num{59}\num{44}\;|\num{69}\num{82}\num{63}\num{72}\num{16}\match{21}\num{14}\match{ 1}&\wins{2 wins}&&\score{1 \times 2}\plus\\
&\card{4}\num{41}\num{92}\num{73}\match{84}\num{69}\;|\num{59}\match{84}\num{76}\num{51}\num{58}\num{ 5}\num{54}\num{83}&\wins{1 wins}&&\score{1}\plus\\
&\card{5}\num{87}\num{83}\num{26}\num{28}\num{32}\;|\num{88}\num{30}\num{70}\num{12}\num{93}\num{22}\num{82}\num{36}&\wins{0 wins}&&\score{0}\plus\\
&\card{6}\num{31}\num{18}\num{13}\num{56}\num{72}\;|\num{74}\num{77}\num{10}\num{23}\num{35}\num{67}\num{36}\num{11}&\wins{0 wins}&&\score{0}\llap{\lower{0.4pc}\underline{\phantom{\large{\textbf{13}}}}}\phantom{\plus}\\
& & && \color{#91672C}\large{\textbf{13}}\normalsize\phantom{\plus}
\end{aligned}
$$

```{=html}
  </div>
</div>
```

:::::

<div style="clear: both;"></div> 

Part 1 is straightforward. We need to find the overlap of two sets and do some basic scoring.

We can parse out the left and right numbers into `set`s. Then the number of wins is just the length of the intersection of those sets.

```{python}
#| eval: false
import re


cards = [[set(re.findall(r'\d+', side)) for side in line.split(':')[1].split('|')] for line in lines]
n_wins = [len(have.intersection(want)) for have, want in cards]
```

The score can be calculated as
$$
\begin{equation}
\text{score}(\text{wins})=
    \begin{cases}
        2^{\text{wins} - 1} & \text{if wins} \gt 0\\
        0 & \text{otherwise}
    \end{cases}
\end{equation}
$$

```{python}
#| eval: false
answer1 = sum(2**(n - 1) for n in n_wins if n > 0)
```

Putting it all together
```{python}
import re


cards = [[set(re.findall(r'\d+', side)) for side in line.split(':')[1].split('|')] for line in lines]
n_wins = [len(have.intersection(want)) for have, want in cards]
answer1 = sum(2**(n - 1) for n in n_wins if n > 0)
print(answer1)
```

```{=html}
<div class="card border-info mb-3 mx-auto">
  <div class="card-header text-white bg-info">Key Points</div>
  <div class="card-body p-1">
    <p class="card-text">
```

* Parse the left and right numbers into `set`s
* Calculate the number of wins as the length of the intersection of those `set`s
* Calculate the score based off the number of wins

```{=html}
    </p>
  </div>
</div>
```

## Part 2 <small class="text-body-secondary">Cutting Corners Caching Card Clones</small>

::::: {.p-0 style="min-width: fit-content;"}

:::: {.pe-4}
```{=html}
<div class="card border-secondary mb-3 mx-auto">
  <div class="card-body p-3 m-1 pb-0 mb-0">
    <h4 class="card-title mt-0">Task 2</h4>
```

Each <b class='fw-bold' style='color: #2F7E4A;'>match</b> wins copies of subsequent cards. Count all <mark class='fw-bold' style='background-color: #FFF3BF'>original cards</mark> and <mark class='fw-bold' style='background-color: #EDECFF;'>won copies</mark> to find the number of <b class='fw-bold' style='color: #91672C;'>total cards</b>.


<h6 class="card-subtitle text-muted">Example</h6>

In this example, there are <mark class='fw-bold' style='background-color: #FFF3BF'>6 original cards</mark> and <mark class='fw-bold' style='background-color: #EDECFF;'>24 won copies</mark> for a total of <b class='fw-bold' style='color: #91672C;'>30</b> cards.

$$
\begin{aligned}
&\card{1}\num{41}\match{48}\match{83}\match{86}\match{17}\;|\match{83}\match{86}\num{ 6}\num{31}\match{17}\num{ 9}\match{48}\num{53}&&\grey{\text{Wins cards 2, 3, 4, \& 5}}\\
&\card{2}\num{13}\match{32}\num{20}\num{16}\match{61}\;|\match{61}\num{30}\num{68}\num{82}\num{17}\match{32}\num{24}\num{19}&&\grey{\text{Wins cards 3 \& 4}}\\
&\card{3}\match{ 1}\match{21}\num{53}\num{59}\num{44}\;|\num{69}\num{82}\num{63}\num{72}\num{16}\match{21}\num{14}\match{ 1}&&\grey{\text{Wins cards 4 \& 5}}\\
&\card{4}\num{41}\num{92}\num{73}\match{84}\num{69}\;|\num{59}\match{84}\num{76}\num{51}\num{58}\num{ 5}\num{54}\num{83}&&\grey{\text{Wins card 5}}\\
&\card{5}\num{87}\num{83}\num{26}\num{28}\num{32}\;|\num{88}\num{30}\num{70}\num{12}\num{93}\num{22}\num{82}\num{36}&&\\
&\card{6}\num{31}\num{18}\num{13}\num{56}\num{72}\;|\num{74}\num{77}\num{10}\num{23}\num{35}\num{67}\num{36}\num{11}&&\\
\end{aligned}
$$

:::{.d-flex .justify-content-center}
```{mermaid}
%%{
  init: {
    'theme': 'base',
    'themeVariables': {
      'primaryColor': '#55595c',
      'primaryTextColor': '#55595c',
      'primaryBorderColor': '#C2C2C2',
      'lineColor': '#C2C2C2',
      'secondaryColor': '#C2C2C2',
      'tertiaryColor': '#fff',
      'background': '#FFFFFF',
      'mainBkg': '#FFFFFF',
      'clusterBkg': '#ededed',
      'fontFamily': 'Nunito Sans'
    },
    'flowchart': {
      'nodeSpacing': 15,
      'rankSpacing': 50
    }
  }
}%%
flowchart LR
  A[Card 1]:::starting --> A1[Card 2]
  A[Card 1] --> A2[Card 3]
  A[Card 1] --> A3[Card 4]
  A[Card 1] --> A4[Card 5]
  A1 --> A11[Card 3]
  A1 --> A12[Card 4]
  A2 --> A21[Card 4]
  A2 --> A22[Card 5]
  A3[Card 4] --> A31[Card 5]
  A11 --> A111[Card 4]
  A11 --> A112[Card 5]
  A12[Card 4] --> A121[Card 5]
  A21[Card 4] --> A211[Card 5]
  A111[Card 4] --> A1111[Card 5]

  B[Card 2]:::starting --> B1[Card 3]
  B[Card 2] --> B2[Card 4]
  B1 --> B11[Card 4]
  B1 --> B12[Card 5]
  B11[Card 4] --> B111[Card 5]
  B2 --> B21[Card 5]
  
  C[Card 3]:::starting --> C1[Card 4]
  C[Card 3] --> C2[Card 5]
  C1[Card 4] --> C11[Card 5]
  
  D[Card 4]:::starting --> D1[Card 5]
  E[Card 5]:::starting
  F[Card 6]:::starting
  classDef default fill:#EDECFF
  classDef starting fill:#FFF3BF
```
:::

```{=html}
  </div>
</div>
```
::::

The example can be solved by constructing the graph and counting the number of nodes. However, our full input would have **millions** of nodes - that wouldn't be very efficient.

### Identify DP

To tackle this problem, we first need to identify that this is a **dynamic programming** problem. How do we know that?

Well, how many subproblems do we need to solve in the example? Each node is a subproblem so there are `30` **subproblems**.

Now, how many **distinct subproblems** are there? That is, how many distinct nodes are there? Only `6`!

This leads us to conclude that this is a dynamic programming problem as there are [**overlapping subproblems**]{.underline}.

### What is DP

Rather than solving all `30` **subproblems**, we can just solve the `6` **distinct subproblems** and reuse those results. This saves us from repeating work we've already done.

### Easy DP

So now we know we need to use **dynamic programming**, but how do we do that? The thing is, unlike specific algorithms with defined steps, dynamic programming is a broad paradigm. There are multiple different ways to implement it.

I'm going to share the *easiest* and *most intuitive* way to implement dynamic programming: [**recursion with memoisation**]{.underline}

#### Step 1: Recursion

Write the most naive and inefficient recursive solution you can come up with. Remember that a recursive has two components:

1. Base case
2. Recursive case

```{python}
#| eval: false
def count_scratchcards(i):
  # 1. Base case: If we win a card that doesn't exist
  if i > len(n_wins):
    return 0
  
  # 2. Recursive case: The number of cards is this card (1) plus the sum of the next n cards
  return 1 + sum(count_scratchcards(i + j + 1) for j in range(n_wins[i]))
```

#### Step 2: Memoisation

Or recursive function essentially counts every node in the graph. To make it only execute computations for **distinct nodes** we just **memoise** the function! Memoisation is caching the results of the function.

Luckily, this is just one line in python.

```{python}
#| eval: false
import functools


@functools.cache # Memoisation
def count_scratchcards(i):
  # 1. Base case: If we win a card that doesn't exist
  if i > len(n_wins):
    return 0
  
  # 2. Recursive case: The number of cards is this card (1) plus the sum of the next n cards
  return 1 + sum(count_scratchcards(i + j + 1) for j in range(n_wins[i]))
```


Here's what this looks like showing <mark class='fw-bold' style='background-color: #EDECFF'>calculated</mark> and <mark class='fw-bold' style='background-color: #FFADAD'>cached</mark> nodes.

:::{.d-flex .justify-content-center}
```{mermaid}
%%{
  init: {
    'theme': 'base',
    'themeVariables': {
      'primaryColor': '#55595c',
      'primaryTextColor': '#55595c',
      'primaryBorderColor': '#C2C2C2',
      'lineColor': '#C2C2C2',
      'secondaryColor': '#C2C2C2',
      'tertiaryColor': '#fff',
      'background': '#FFFFFF',
      'mainBkg': '#FFFFFF',
      'clusterBkg': '#ededed',
      'fontFamily': 'Nunito Sans'
    },
    'flowchart': {
      'nodeSpacing': 15,
      'rankSpacing': 50
    }
  }
}%%
flowchart LR
  A[Card 1] --> A1[Card 2]
  A[Card 1] --> A2[Card 3]:::cached
  A[Card 1] --> A3[Card 4]:::cached
  A[Card 1] --> A4[Card 5]:::cached
  A1 --> A11[Card 3]
  A1 --> A12[Card 4]:::cached
  A11 --> A111[Card 4]
  A11 --> A112[Card 5]:::cached
  A111[Card 4] --> A1111[Card 5]

  X:::space
  B[Card 2]:::cached
  C[Card 3]:::cached  
  D[Card 4]:::cached
  E[Card 5]:::cached
  F[Card 6]:::cached
  classDef default fill:#EDECFF
  classDef cached fill:#FFADAD
  classDef space fill:white,color:white,stroke:white
```
:::

<div style="clear: both;"></div> 

So our final answer sums up all of the original cards.

```{python}
import functools


@functools.cache
def count_scratchcards(i):
  if i > len(n_wins):
    return 0
  return 1 + sum(count_scratchcards(i + j + 1) for j in range(n_wins[i]))


answer2 = sum(count_scratchcards(i) for i in range(len(n_wins)))
print(answer2)
```

```{=html}
<div class="card border-info mb-3 mx-auto">
  <div class="card-header text-white bg-info">Key Points</div>
  <div class="card-body p-1">
    <p class="card-text">
```

* [Part 2 key points here]

```{=html}
    </p>
  </div>
</div>
```

## Stocking Stuffers <small class="text-body-secondary">[Subtitle here]</small>
[Extras here]
[Put stuff about top-down vs bottom-up dynamic programming. Use fibonacci as an example. Overlapping subproblems. Recursion with memoisation is by far the easiest]

{{< include ../../_button_footer.qmd >}}
