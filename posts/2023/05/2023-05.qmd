---
title: "2023 Day 5"
subtitle: "If You Give A Seed A Fertilizer"
date: 2024-01-20
categories: [python, medium, dynamic programming]
draft: false
knitr:
  opts_chunk: 
    comment: "#>"
    collapse: true
problem_url: "https://adventofcode.com/2023/day/5"
description: "Medium difficulty intervals puzzle."
---

Ho ho ho, fellow adventurers!

In [Advent of Code day 5]({{< meta problem_url >}}) [Intro]

First, we'll read the input.
```{python}
with open('input.txt', "r") as f:
    lines = f.read().splitlines()
```

## Part 1 <small class="text-body-secondary">[Part 1 Title]</small>

::::: {.p-0 style="min-width: fit-content;"}

```{=html}
<div class="card border-secondary mb-3 mx-auto">
  <div class="card-body p-3 m-1 pb-0 mb-0">
    <h4 class="card-title mt-0">Task 1</h4>
```

Calculate the <b class='fw-bold' style='color: #91672C;'>sum</b> of scores of each card as one for the first <b class='fw-bold' style='color: #2F7E4A;'>match</b> and double for each subsequent <b class='fw-bold' style='color: #2F7E4A;'>match</b>.

<h6 class="card-subtitle text-muted">Example</h6>

```{r dev="svg"}
#| fig-width: 5
#| fig-height: 4
#| dpi: 216
#| code-fold: true
#| code-summary: "Figure Source"
#| warning: false
library(tidyverse)

text <- "seeds: 79 14 55 13

seed-to-soil map:
50 98 2
52 50 48

soil-to-fertilizer map:
0 15 37
37 52 2
39 0 15

fertilizer-to-water map:
49 53 8
0 11 42
42 0 7
57 7 4

water-to-light map:
88 18 7
18 25 70

light-to-temperature map:
45 77 23
81 45 19
68 64 13

temperature-to-humidity map:
0 69 1
1 0 69

humidity-to-location map:
60 56 37
56 93 4"

lines <- str_split_1(text, "\n\n")

seeds <-
  lines[[1]] |>
  str_extract_all("\\d+", simplify = TRUE) |>
  as.numeric()

steps <-
  lines[-1] |>
  map(read_lines) |>
  map(\(.) {
    .[-1] |>
      str_extract_all("\\d+", simplify = TRUE) |>
      as_tibble() |>
      set_names(c("dest_start", "source_start", "range_len")) |>
      mutate(across(everything(), as.numeric))
  }) |>
  list_rbind(names_to = "step")

segment_df <-
  steps |>
  pivot_longer(
    cols = ends_with("start"),
    names_to = "side",
    values_to = "start"
  ) |>
  mutate(
    end = start + range_len,
    offset = 0.1 * ifelse(side == "source_start", -1, 1),
    step =
      factor(
        step + (side == "dest_start"),
        labels  = c("Seed", "Soil", "Fertilizer", "Water", "Light", "Temperature", "Humidity", "Location")
      ) |>
      fct_rev()
  )

arrow_df <-
  steps |>
  mutate(
    x = source_start + range_len / 2,
    xend = dest_start + range_len / 2,
    y = 9 - step - 0.15,
    yend = y - 1 + 0.3,
    .keep = "none"
  )

p <-
  ggplot(segment_df, aes(start, step, xend = end, yend = step)) +
  geom_segment(
    arrow = arrow(ends = "both", angle = 90, length = unit(0.01, "npc")),
    position = position_nudge(x = 0, y = segment_df$offset)
  ) +
  geom_segment(
    data = arrow_df,
    mapping = aes(x, y, xend = xend, yend = yend),
    arrow = arrow(length = unit(0.02, "npc"), type = "closed"),
    lineend = "round",
    size = 1,
    col = "grey70",
    alpha = 0.8
  ) +
  geom_segment(
    arrow = arrow(ends = "both", angle = 90, length = unit(0.01, "npc")),
    position = position_nudge(x = 0, y = segment_df$offset)
  ) +
  theme_void() +
  theme(
    axis.text.y = element_text(margin = margin(r = 0.8 * 11 / 2), hjust = 1)
  )


# 
# |>
#   str_split("") |>
#   map(enframe, name = "col") |>
#   list_rbind(names_to = "row") |>
#   mutate(
#     color = case_when(
#       value %in% c("*", "#", "+", "$") ~ "#BE4844",
#       row == 1 & col > 5 ~ "#969696",
#       row == 6 ~ "#969696",
#       !is.na(as.numeric(value)) ~ "#2F7E4A",
#       .default = "#969696"
#     ),
#     fontface = case_when(
#       color != "#969696" ~ "bold",
#       .default = "plain"
#     )
#   )
# 
# add <- function(row, label, plus = TRUE, is_result = FALSE) {
#   component <- annotate(
#     geom = "text",
#     x = 15,
#     y = row,
#     size = 7,
#     hjust = "right",
#     vjust = "middle",
#     color = ifelse(is_result, "#91672C", "#969696"),
#     fontface = ifelse(is_result, "bold", "plain"),
#     label = label,
#     family = "LM Roman 10"
#   )
#   if (plus) {
#     component <- list(
#       component, 
#       annotate(
#         geom = "text",
#         x = 15,
#         y = row + 0.5,
#         size = 6,
#         hjust = "left",
#         vjust = "middle",
#         color = "#969696",
#         label = "+",
#         family = "LM Roman 10"
#       )
#     )
#   }
#   component
# }
# 
# neighbors <- function(row, col, highlight = character()) {
#   draw_arrow <- function(direction) {
#     dr <- 0.55 * (str_detect(direction, "S") - str_detect(direction, "N"))
#     dc <- 0.55 * (str_detect(direction, "E") - str_detect(direction, "W"))
#     if (dr != 0 && dc != 0) {
#       dr <- dr * 0.8
#       dc <- dc * 0.8
#     }
#     annotate(
#       geom = "segment",
#       x = col + dc,
#       xend = col + (dc * 1.00001),
#       y = row + dr,
#       yend = row + (dr * 1.00001),
#       #size = 1,
#       color = ifelse(direction %in% highlight, "#1577A0", "#C2C2C2"),
#       arrow = arrow(length = unit(0.015, "npc"), type = "closed")
#     )
#   }
#   map(c("N", "NE", "E", "SE", "S", "SW", "W", "NW"), draw_arrow)
# }
# 
# df |>
#   ggplot(aes(col, row, label = value, fontface = fontface, col = I(color))) +
#   geom_text(size = 7, family = "LM Roman 10") +
#   scale_y_reverse(
#     limits = c(12, 0),
#     expand = c(0, 0)
#   ) +
#   add(1, "467") +
#   add(3, "35 + 633") +
#   add(5, "617") +
#   add(7, "592") +
#   add(8, "755") +
#   add(10, "664 + 598", plus = FALSE) +
#   add(11, "4361", plus = FALSE, is_result = TRUE) +
#   neighbors(2, 4, c("S", "SW", "NW")) +
#   neighbors(4, 7, c("N", "NE")) +
#   neighbors(5, 4, c("W")) +
#   neighbors(6, 6, c("SW")) +
#   neighbors(9, 4, c("S", "SW")) +
#   neighbors(9, 6, c("NE", "SE", "S")) +
#   annotate(
#     geom = "segment",
#     x = 11.5,
#     xend = 15,
#     y = 10.5,
#     yend = 10.5,
#     color = "#969696"
#   ) +
#   theme_void()
p
```

```{=html}
  </div>
</div>
```

:::::

<div style="clear: both;"></div> 

Part 1 is straightforward. We need to find the overlap of two sets and do some basic scoring.

We can parse out the left and right numbers into `set`s. Then the number of wins is just the length of the intersection of those sets.

```{python}
#| eval: false
import re


cards = [[set(re.findall(r'\d+', side)) for side in line.split(':')[1].split('|')] for line in lines]
n_wins = [len(have.intersection(want)) for have, want in cards]
```

The score can be calculated as
$$
\begin{equation}
\text{score}(\text{wins})=
    \begin{cases}
        2^{\text{wins} - 1} & \text{if wins} \gt 0\\
        0 & \text{otherwise}
    \end{cases}
\end{equation}
$$

```{python}
#| eval: false
answer1 = sum(2**(n - 1) for n in n_wins if n > 0)
```

Putting it all together
```{python}
#
```

```{=html}
<div class="card border-info mb-3 mx-auto">
  <div class="card-header text-white bg-info">Key Points</div>
  <div class="card-body p-1">
    <p class="card-text">
```

* Parse the left and right numbers into `set`s
* Calculate the number of wins as the length of the intersection of those `set`s
* Calculate the score based off the number of wins

```{=html}
    </p>
  </div>
</div>
```


## Part 2 <small class="text-body-secondary">Cutting Corners Caching Card Copies</small>

::::: {.p-0 style="min-width: fit-content;"}

:::: {.pe-4}
```{=html}
<div class="card border-secondary mb-3 mx-auto">
  <div class="card-body p-3 m-1 pb-0 mb-0">
    <h4 class="card-title mt-0">Task 2</h4>
```

Each <b class='fw-bold' style='color: #2F7E4A;'>match</b> wins copies of subsequent cards. Count all <mark class='fw-bold' style='background-color: #FFF3BF'>original cards</mark> and <mark class='fw-bold' style='background-color: #EDECFF;'>won copies</mark> to find the number of <b class='fw-bold' style='color: #91672C;'>total cards</b>.


<h6 class="card-subtitle text-muted">Example</h6>

In this example, there are <mark class='fw-bold' style='background-color: #FFF3BF'>6 original cards</mark> and <mark class='fw-bold' style='background-color: #EDECFF;'>24 won copies</mark> for a total of <b class='fw-bold' style='color: #91672C;'>30</b> cards.


```{r}
```

```{=html}
  </div>
</div>
```
::::
:::::

The example can be solved by constructing the graph and counting the number of nodes. However, our full input would have **millions** of nodes - that wouldn't be very efficient.

### Spotting Superfluous Subproblems Saves Seconds

To tackle this problem, we first need to identify that this is a **dynamic programming** problem. How do we know that?

Well, how many subproblems do we need to solve in the example? Each node is a subproblem so there are `30` **subproblems**.

Now, how many **distinct subproblems** are there? That is, how many distinct nodes are there? Only `6`!

This leads us to conclude that this is a dynamic programming problem as there are [**overlapping subproblems**]{.underline}.

### From Brute Force to Brilliance

So how can dynamic programming help us?

Rather than solving all `30` **subproblems**, we can just solve the `6` **distinct subproblems** and reuse those results. This saves us from repeating work we've already done.

### Effortless Efficiency

So now we know we need to use **dynamic programming**, but how do we do that? The thing is, unlike specific algorithms with defined steps, dynamic programming is a broad paradigm. There are multiple different ways to implement it.

I'm going to share the *easiest* and *most intuitive* way to implement dynamic programming: [**recursion with memoisation**]{.underline}

#### Step 1: Recursion

Write the most naive and inefficient recursive solution you can come up with. Remember that a recursive function has two components:

1. Base case
2. Recursive case

```{python}
#| eval: false
def count_scratchcards(i):
    # 1. Base case: If we win a card that doesn't exist
    if i > len(n_wins):
        return 0
  
    # 2. Recursive case: The number of cards is this card (1) plus the sum of the next n cards
    return 1 + sum(count_scratchcards(i + j + 1) for j in range(n_wins[i]))
```

#### Step 2: Memoisation

Our recursive function essentially counts every node in the graph. To make it only execute computations for **distinct nodes** we just **memoise** the function! Memoisation is caching the results of a pure function.

Luckily, this is just one line in python.

```{python}
#| eval: false
import functools


@functools.cache # Memoisation
def count_scratchcards(i):
    # 1. Base case: If we win a card that doesn't exist
    if i > len(n_wins):
        return 0
  
    # 2. Recursive case: The number of cards is this card (1) plus the sum of the next n cards
    return 1 + sum(count_scratchcards(i + j + 1) for j in range(n_wins[i]))
```


Here's what this looks like showing <mark class='fw-bold' style='background-color: #EDECFF'>calculated</mark> and <mark class='fw-bold' style='background-color: #FFADAD'>cached</mark> nodes.

<div style="clear: both;"></div> 

### Scratchy Solution Summarised

Our final answer sums up all of the original cards.

```{python}
#
```

```{=html}
<div class="card border-info mb-3 mx-auto">
  <div class="card-header text-white bg-info">Key Points</div>
  <div class="card-body p-1">
    <p class="card-text">
```

* Uses **dynamic programming** via [**recursion with memoisation**]{.underline}
* `count_scratchcards` naively recursively counts the `i`^th^ card
  * **Base case:** If `i` exceeds the number of cards then there are `0` cards
  * **Recursive case:** `1` (for the current card) plus the sum of subsequent cards
* `@functools.cache` **memoises** the function meaning it executes only a few hundred times instead of millions

```{=html}
    </p>
  </div>
</div>
```


{{< include ../../_button_footer.qmd >}}
