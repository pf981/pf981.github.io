---
title: "2023 Day 5"
subtitle: "If You Give A Seed A Fertilizer"
date: 2024-01-20
categories: [python, medium, dynamic programming]
draft: false
knitr:
  opts_chunk: 
    comment: "#>"
    collapse: true
problem_url: "https://adventofcode.com/2023/day/5"
description: "Medium difficulty intervals puzzle."
---

Ho ho ho, fellow adventurers!

In [Advent of Code day 5]({{< meta problem_url >}}) [Intro]

First, we'll read the input.
```{python}
with open('input.txt', "r") as f:
    text = f.read()
```

## Part 1 <small class="text-body-secondary">[Part 1 Title]</small>

::::: {.p-0 style="min-width: fit-content;"}

```{=html}
<div class="card border-secondary mb-3 mx-auto">
  <div class="card-body p-3 m-1 pb-0 mb-0">
    <h4 class="card-title mt-0">Task 1</h4>
```

Calculate the <b class='fw-bold' style='color: #91672C;'>sum</b> of scores of each card as one for the first <b class='fw-bold' style='color: #2F7E4A;'>match</b> and double for each subsequent <b class='fw-bold' style='color: #2F7E4A;'>match</b>.

<h6 class="card-subtitle text-muted">Example</h6>

```{r dev="svg"}
#| dpi: 216
#| code-fold: true
#| code-summary: "Figure Source"
#| warning: false
library(tidyverse)

#| fig-width: 5
#| fig-height: 4
text <- "seeds: 79 14 55 13

seed-to-soil map:
50 98 2
52 50 48

soil-to-fertilizer map:
0 15 37
37 52 2
39 0 15

fertilizer-to-water map:
49 53 8
0 11 42
42 0 7
57 7 4

water-to-light map:
88 18 7
18 25 70

light-to-temperature map:
45 77 23
81 45 19
68 64 13

temperature-to-humidity map:
0 69 1
1 0 69

humidity-to-location map:
60 56 37
56 93 4"

lines <- str_split_1(text, "\n\n")

seeds <-
  lines[[1]] |>
  str_extract_all("\\d+", simplify = TRUE) |>
  as.numeric()

steps <-
  lines[-1] |>
  map(read_lines) |>
  map(\(.) {
    .[-1] |>
      str_extract_all("\\d+", simplify = TRUE) |>
      as_tibble() |>
      set_names(c("dest_start", "source_start", "range_len")) |>
      mutate(across(everything(), as.numeric))
  })

get_path <- function(seed) {
  value <- seed
  step <- 1
  path <- list()
  
  while (step <= length(steps)) {
    dest <-
      steps[[step]] |>
      mutate(
        is_valid = value >= source_start & value < source_start + range_len,
        dest = dest_start + value - source_start
      ) |>
      filter(value >= source_start & value < source_start + range_len) |>
      pull(dest)
    
    new_value <- c(dest, value)[1]
    path <- bind_rows(
      path,
      tibble(
        x = value,
        xend = new_value,
        y = 9 - step,
        yend = y - 1
      )
    )
    value = new_value
    step <- step + 1
  }
  path
}

plot_seeds <- function(seeds) {
  paths <-
  seeds |>
  map(get_path) |>
  list_rbind()

  plot_df <-
    steps |>
    list_rbind(names_to = "step") |>
    mutate(
      y = 9 - step,
      yend = y - 1,
      x = map2(source_start, range_len, \(start, range) start + seq_len(range) - 1),
      xend = map2(dest_start, range_len, \(start, range) start + seq_len(range) - 1)
    ) |>
    unnest()
  
  points <-
    bind_rows(
      paths |> select(x, y),
      paths |> select(x = xend, y = yend)
    ) |>
    mutate(
      col = case_when(
        y == 8 ~ "#2F7E4A",
        y == 1 & x == min(ifelse(y == 1, x, NA), na.rm = TRUE) ~ "#91672C",
        TRUE ~ "#1577A0"
      ),
      size = ifelse(col == "#1577A0", 1.1, 3)
    )
  
  ggplot(plot_df, aes(x, y, xend = xend, yend = yend)) +
    geom_segment(alpha = 0.5, col = "#969696") +
    geom_segment(data = paths, col = "#1577A0") +
    geom_point(
      data = points,
      mapping = aes(x, y, col = I(col), size = I(size), xend = NULL, yend = NULL)
    ) +
    scale_y_continuous(
      breaks = seq_len(8),
      labels = rev(c("Seed", "Soil", "Fertilizer", "Water", "Light", "Temperature", "Humidity", "Location"))
    ) +
    theme_void() +
    theme(
      axis.text.y = element_text(margin = margin(r = 0.8 * 11 / 2), hjust = 1)
    )
}


plot_seeds(seeds)
```

```{=html}
  </div>
</div>
```

:::::

<div style="clear: both;"></div> 


```{python}
import re


seeds, *maps_list = text.split('\n\n')
seeds = [int(x) for x in re.findall(r'\d+', seeds)]
maps_list = [[[int(x) for x in re.findall(r'\d+', line)] for line in maps.splitlines()[1:]] for maps in maps_list]

locations = []
for seed in seeds:
    for maps in maps_list:
        for dest_start, source_start, range_len in maps:
            if source_start <= seed < source_start + range_len:
                seed = dest_start + (seed - source_start)
                break
    locations.append(seed)

answer1 = min(locations)
print(answer1)
```

```{=html}
<div class="card border-info mb-3 mx-auto">
  <div class="card-header text-white bg-info">Key Points</div>
  <div class="card-body p-1">
    <p class="card-text">
```

* Parse the left and right numbers into `set`s
* Calculate the number of wins as the length of the intersection of those `set`s
* Calculate the score based off the number of wins

```{=html}
    </p>
  </div>
</div>
```


## Part 2 <small class="text-body-secondary">Cutting Corners Caching Card Copies</small>

::::: {.p-0 style="min-width: fit-content;"}

:::: {.pe-4}
```{=html}
<div class="card border-secondary mb-3 mx-auto">
  <div class="card-body p-3 m-1 pb-0 mb-0">
    <h4 class="card-title mt-0">Task 2</h4>
```

Each <b class='fw-bold' style='color: #2F7E4A;'>match</b> wins copies of subsequent cards. Count all <mark class='fw-bold' style='background-color: #FFF3BF'>original cards</mark> and <mark class='fw-bold' style='background-color: #EDECFF;'>won copies</mark> to find the number of <b class='fw-bold' style='color: #91672C;'>total cards</b>.


<h6 class="card-subtitle text-muted">Example</h6>

In this example, there are <mark class='fw-bold' style='background-color: #FFF3BF'>6 original cards</mark> and <mark class='fw-bold' style='background-color: #EDECFF;'>24 won copies</mark> for a total of <b class='fw-bold' style='color: #91672C;'>30</b> cards.


```{r dev="svg"}
#| dpi: 216
#| code-fold: true
#| code-summary: "Figure Source"
#| warning: false
seeds |>
  split(ceiling(seq_along(seeds)/2)) |>
  map(\(l) seq(l[1], l[1] + l[2])) |>
  unlist() |>
  plot_seeds()
```

```{=html}
  </div>
</div>
```
::::
:::::




<div style="clear: both;"></div> 


```{python}
def insert_missing_ranges(maps):
    maps.sort(key=lambda e: e[1])
    first_val = maps[0][1]
    if first_val != 0:
        maps.insert(0, [0, 0, first_val])
    
    last_val = maps[-1][1] + maps[-1][2]
    maps.append([last_val, last_val, 10_000_000_000])

    for i in range(len(maps) - 1):
        end = maps[i][1] + maps[i][2]
        start = maps[i+1][1]
        if end != start:
            maps.append((end, end, start - end))

    maps.sort(key=lambda e: e[1])


def get_smallest_range(i, in_start, in_range_len):
    if i == len(maps_list):
        return in_start

    output_ranges = [] # (out_start, out_range_len) pairs
    for dest_start, source_start, range_len in maps_list[i]:
        # No overlap
        if source_start + range_len <= in_start or source_start >= in_start + in_range_len:
            continue
        
        # Assume overlap
        if source_start == in_start: # Source starts at input start
            overlap_start = in_start
            overlap_range_len = min(range_len, in_range_len)
        elif source_start < in_start: # Source starts to left
            overlap_start = in_start
            overlap_end = min(source_start + range_len, in_start + in_range_len)
            overlap_range_len = overlap_end - in_start
        else: # Source starts to right of input start
            overlap_start = source_start
            overlap_end = min(source_start + range_len, in_start + in_range_len)
            overlap_range_len = overlap_end - source_start

        overlap_start = overlap_start - source_start +  dest_start
        output_ranges.append((overlap_start, overlap_range_len))

    outputs = [get_smallest_range(i + 1, out_start, out_range_len) for out_start, out_range_len in output_ranges]
    return min(outputs) if outputs else float('inf')


for maps in maps_list:
    insert_missing_ranges(maps)

starting_ranges = [seeds[i:i+2] for i in range(0, len(seeds), 2)]
answer2 = min(get_smallest_range(0, in_start, in_range_len) for in_start, in_range_len in starting_ranges)
print(answer2)
```


```{=html}
<div class="card border-info mb-3 mx-auto">
  <div class="card-header text-white bg-info">Key Points</div>
  <div class="card-body p-1">
    <p class="card-text">
```

* Uses **dynamic programming** via [**recursion with memoisation**]{.underline}
* `count_scratchcards` naively recursively counts the `i`^th^ card
  * **Base case:** If `i` exceeds the number of cards then there are `0` cards
  * **Recursive case:** `1` (for the current card) plus the sum of subsequent cards
* `@functools.cache` **memoises** the function meaning it executes only a few hundred times instead of millions

```{=html}
    </p>
  </div>
</div>
```


{{< include ../../_button_footer.qmd >}}
