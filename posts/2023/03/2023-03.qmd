---
title: "2023 Day 3"
subtitle: "Gear Ratios"
date: 2024-01-04
categories: [python, medium]
draft: false
knitr:
  opts_chunk: 
    comment: "#>"
    collapse: true
problem_url: "https://adventofcode.com/2023/day/3"
description: "Medium difficulty grid puzzle involving parsing numbers, getting adjacencies, and handling duplicates."
---

```{r}
#| echo: false
#| output: false
# www.fontsquirrel.com/fonts/latin-modern-roman -> Webfont Kit -> TTF -> Download
sysfonts::font_paths("../../../fonts")

sysfonts::font_add(
  "LM Roman 10",
  regular = "lmroman10-regular-webfont.ttf",
  bold = "lmroman10-bold-webfont.ttf",
  italic = "lmroman10-italic-webfont.ttf",
  bolditalic = "lmroman10-bolditalic-webfont.ttf"
)

showtext::showtext_auto()
```


Ho ho ho, fellow adventurers!

Gear up for a grid-based challenge. In [Advent of Code day 3]({{< meta problem_url >}}), we are tasked with deciphering engine schematics to fix a gondola lift.

This puzzle is trickier than the previous ones, but still manageable. It's our first grid question and involves parsing numbers, getting adjacencies, and handling duplicates.

First, we'll read the input. Note that we use `f.read().splitlines()` instead of `f.readlines()` so our lines don't include `\n`.
```{python}
with open('input.txt', "r") as f:
    lines = f.read().splitlines()
```

## Part 1 <small class="text-body-secondary">Neighbourly Numbers</small>

::::: {.p-0 style="min-width: fit-content;"}

```{=html}
<div class="card border-secondary mb-3 mx-auto" style="max-width: 28rem;">
  <div class="card-body p-3 m-1 pb-0 mb-0">
    <h4 class="card-title mt-0">Task 1</h4>
```

Get the <b class='fw-bold' style='color: #91672C;'>sum</b> of <b class='fw-bold' style='color: #2F7E4A;'>numbers</b> <b class='fw-bold' style='color: #1577A0;'>neighbouring</b> a <b class='fw-bold' style='color: #BE4844;'>symbol</b>.

<h6 class="card-subtitle text-muted">Example</h6>

```{r dev="svg"}
#| fig-width: 5.5
#| fig-height: 4
#| dpi: 72
#| code-fold: true
#| code-summary: "Figure Source"
#| warning: false
library(tidyverse)

df <-
  read_lines("467..114..
...*......
..35..633.
......#...
617*......
.....+.58.
..592.....
......755.
...$.*....
.664.598.."
) |>
  str_split("") |>
  map(enframe, name = "col") |>
  list_rbind(names_to = "row") |>
  mutate(
    color = case_when(
      value %in% c("*", "#", "+", "$") ~ "#BE4844",
      row == 1 & col > 5 ~ "#969696",
      row == 6 ~ "#969696",
      !is.na(as.numeric(value)) ~ "#2F7E4A",
      .default = "#969696"
    ),
    fontface = case_when(
      color != "#969696" ~ "bold",
      .default = "plain"
    )
  )

add <- function(row, label, plus = TRUE, is_result = FALSE) {
  component <- annotate(
    geom = "text",
    x = 15,
    y = row,
    size = 7,
    hjust = "right",
    vjust = "middle",
    color = ifelse(is_result, "#91672C", "#969696"),
    fontface = ifelse(is_result, "bold", "plain"),
    label = label,
    family = "LM Roman 10"
  )
  if (plus) {
    component <- list(
      component, 
      annotate(
        geom = "text",
        x = 15,
        y = row + 0.5,
        size = 6,
        hjust = "left",
        vjust = "middle",
        color = "#969696",
        label = "+",
        family = "LM Roman 10"
      )
    )
  }
  component
}

neighbors <- function(row, col, highlight = character()) {
  draw_arrow <- function(direction) {
    dr <- 0.55 * (str_detect(direction, "S") - str_detect(direction, "N"))
    dc <- 0.55 * (str_detect(direction, "E") - str_detect(direction, "W"))
    if (dr != 0 && dc != 0) {
      dr <- dr * 0.8
      dc <- dc * 0.8
    }
    annotate(
      geom = "segment",
      x = col + dc,
      xend = col + (dc * 1.00001),
      y = row + dr,
      yend = row + (dr * 1.00001),
      #size = 1,
      color = ifelse(direction %in% highlight, "#1577A0", "#C2C2C2"),
      arrow = arrow(length = unit(0.015, "npc"), type = "closed")
    )
  }
  map(c("N", "NE", "E", "SE", "S", "SW", "W", "NW"), draw_arrow)
}

df |>
  ggplot(aes(col, row, label = value, fontface = fontface, col = I(color))) +
  geom_text(size = 7, family = "LM Roman 10") +
  scale_y_reverse(
    limits = c(12, 0),
    expand = c(0, 0)
  ) +
  add(1, "467") +
  add(3, "35 + 633") +
  add(5, "617") +
  add(7, "592") +
  add(8, "755") +
  add(10, "664 + 598", plus = FALSE) +
  add(11, "4361", plus = FALSE, is_result = TRUE) +
  neighbors(2, 4, c("S", "SW", "NW")) +
  neighbors(4, 7, c("N", "NE")) +
  neighbors(5, 4, c("W")) +
  neighbors(6, 6, c("SW")) +
  neighbors(9, 4, c("S", "SW")) +
  neighbors(9, 6, c("NE", "SE", "S")) +
  annotate(
    geom = "segment",
    x = 11.5,
    xend = 15,
    y = 10.5,
    yend = 10.5,
    color = "#969696"
  ) +
  theme_void()
```


```{=html}
  </div>
</div>
```



:::::

<div style="clear: both;"></div> 

In part 1 we need to locate all the symbols and neighbouring numbers. Our approach is essentially this.
```{python}
#| eval: false
for each symbol:
  get the 8 neighbouring numbers
  remove duplicates
  add the numbers to the answer
```

Removing duplicates is important. Consider the `#` symbol in the example. It is touching `633` to the north *and* touching it again to the north-east. We need to be mindful to not **double-count**.

Also, we want to be mindful to not accidentally **under-count**. Consider `..123*123..` where `*` has two *distinct* neighbours, `123` and `123`. We want to only discard true duplicates.

### Digital Fingerprints
We'll construct a dictionary, `numbers`, which maps every digit's coordinate to its representation.
```python
numbers = {
  (0, 0): <467>,
  (0, 1): <467>,
  (0, 2): <467>,
  (0, 5): <114>,
  (0, 6): <114>,
  (0, 7): <114>,
  ...
}
```

What should the values of this dictionary be? It can't just be the integer value as that wouldn't necessarily uniquely identify each number.

We're going to use `re.finditer` to get the start, end, and value of each number. We'll do something sneaky and just use the `re.Match` objects as the values of `numbers`!

In the code below, `match` is a `re.Match` object which contains the start, end, and value a number. It uniquely identifies that number as each `re.Match` object has its own object ID - even if the string is identical.

```{python}
#| eval: false
import re


numbers = {}
for row, line in enumerate(lines):
    for match in re.finditer(r'\d+', line):
        for col in range(match.start(), match.end()):
            numbers[(row, col)] = match
```

### Symbol Surroundings
We want another dictionary, `symbols`, which maps every symbol's coordinate to its character and neighbouring numbers.
```python
symbols = {
  (1, 3): ['*', [467, 35]],
  (3, 6): ['#', [633]],
  ...
}
```

Again, we can get the symbol locations using `re.finditer`.
```{python}
#| eval: false
symbols = {}
for row, line in enumerate(lines):
    for match in re.finditer(r'[^0-9.]', line):
        symbols[(row, match.start())] = [match.group()]
```

Then append the neighbours. Note that `neighbours` is constructed using `set` comprehension, so it is de-duplicated.
```{python}
#| eval: false
for (row, col), l in symbols.items():
    neighbours = {numbers[(row + dr, col + dc)] for dr in range(-1, 2) for dc in range(-1, 2) if (row + dr, col + dc) in numbers}
    l.append([int(match.group()) for match in neighbours])
```

### Assumption

Finally, the answer is just the sum of all the neighbours.

Note that this assumes that no number is neighbouring more than one symbol. If that were the case, it would be double-counted.
```{python}
#| eval: false
answer1 = sum(num for _, neighbours in symbols.values() for num in neighbours)
```

### Summing It Up
Now, let's put it all together.

```{python}
import re


numbers = {}
symbols = {}
for row, line in enumerate(lines):
    for match in re.finditer(r'\d+', line):
        for col in range(match.start(), match. end()):
            numbers[(row, col)] = match
    for match in re.finditer(r'[^0-9.]', line):
        symbols[(row, match.start())] = [match.group()]

for (row, col), l in symbols.items():
    neighbours = {numbers[(row + dr, col + dc)] for dr in range(-1, 2) for dc in range(-1, 2) if (row + dr, col + dc) in numbers}
    l.append([int(match.group()) for match in neighbours])

answer1 = sum(num for _, neighbours in symbols.values() for num in neighbours)
print(answer1)
```

```{=html}
<div class="card border-info mb-3 mx-auto">
  <div class="card-header text-white bg-info">Key Points</div>
  <div class="card-body p-1">
    <p class="card-text">
```

* `re.finditer` locates the symbols and numbers
* The `numbers` dictionary maps digit positions to their `re.Match` object
* The `symbols` dictionary maps symbol positions to their character and a list of neighbouring integers
* The answer is the sum of those integers
* This solution assumes that a number has at most one symbol neighbour

```{=html}
    </p>
  </div>
</div>
```

## Part 2 <small class="text-body-secondary">Asterisk Adjacencies</small>

::::: {.p-0 style="min-width: fit-content;"}

:::: {.pe-4 .float-md-start}
```{=html}
<div class="card border-secondary mb-3 mx-auto" style="width: 25rem;">
  <div class="card-body p-3 m-1 pb-0 mb-0">
    <h4 class="card-title mt-0">Task 2</h4>
```

* Identify <b class='fw-bold' style='color: #BE4844;'>*</b>s <b class='fw-bold' style='color: #1577A0;'>neighbouring exactly two</b> <b class='fw-bold' style='color: #2F7E4A;'>numbers</b>
* Multiply its two neighbours
* <b class='fw-bold' style='color: #91672C;'>Sum</b> these values.

<h6 class="card-subtitle text-muted">Example</h6>

```{r dev="svg"}
#| fig-width: 5.5
#| fig-height: 4
#| dpi: 72
#| code-fold: true
#| code-summary: "Figure Source"
#| warning: false
neighbors2 <- function(row, col, highlight = character(), color = "#1577A0") {
  draw_arrow <- function(direction) {
    dr <- 0.55 * (str_detect(direction, "S") - str_detect(direction, "N"))
    dc <- 0.55 * (str_detect(direction, "E") - str_detect(direction, "W"))
    if (dr != 0 && dc != 0) {
      dr <- dr * 0.8
      dc <- dc * 0.8
    }
    annotate(
      geom = "segment",
      x = col + dc,
      xend = col + (dc * 1.00001),
      y = row + dr,
      yend = row + (dr * 1.00001),
      color = color,
      arrow = arrow(length = unit(0.015, "npc"), type = "closed")
    )
  }
  map(highlight, draw_arrow)
}

df |>
  mutate(
    color = case_when(
      row == 4 & col == 7 ~ "#969696",
      row == 5 & col == 4 ~ "#969696",
      row == 6 & col == 6 ~ "#969696",
      row == 9 & col == 4 ~ "#969696",
      
      row == 3 & col > 4 ~ "#969696",
      row %in% c(5, 7) ~ "#969696",
      row == 10 & col <= 4 ~ "#969696",
      .default = color
    ),
    fontface = case_when(
      color != "#969696" ~ "bold",
      .default = "plain"
    )
  ) |>
  ggplot(aes(col, row, label = value, fontface = fontface, col = I(color))) +
  geom_text(size = 7, family = "LM Roman 10") +
  scale_y_reverse(
    limits = c(12, 0),
    expand = c(0, 0)
  ) +
  add(2, expression("467 " %*% " 35")) +
  add(9, expression("755 " %*% " 598"), plus = FALSE) +
  add(11, "467835", plus = FALSE, is_result = TRUE) +
  neighbors2(2, 4, c("S", "NW")) +
  neighbors2(4, 7, c("N"), "#C2C2C2") +
  neighbors2(5, 4, c("W"), "#C2C2C2") +
  neighbors2(6, 6, c("SW"), "#C2C2C2") +
  neighbors2(9, 4, c("S"), "#C2C2C2") +
  neighbors2(9, 6, c("NE", "S")) +
  annotate(
    geom = "segment",
    x = 11.3,
    xend = 15,
    y = 10.5,
    yend = 10.5,
    color = "#969696"
  ) +
  theme_void()
```

```{=html}
  </div>
</div>
```
::::

Part 2 tasks us with indentifying gears which are `*` symbols with exactly `2` neighbours.

This is straightforward as we have the `symbols` dictionary from part 1.

:::::

<div style="clear: both;"></div> 

```{python}
import math


answer2 = sum(math.prod(nums) for symbol, nums in symbols.values() if symbol == '*' and len(nums) == 2)
print(answer2)
```

```{=html}
<div class="card border-info mb-3 mx-auto">
  <div class="card-header text-white bg-info">Key Points</div>
  <div class="card-body p-1">
    <p class="card-text">
```

* Filter `symbols` where the symbol is `*` and the number of neighbours is `2`
* Get the product of neighbours, then the sum

```{=html}
    </p>
  </div>
</div>
```

## Stocking Stuffers <small class="text-body-secondary">Auspicious Assumptions</small>
Our solution assumes that no number is neighbouring more than one symbol. This is true of our input.

To make the solution more general and handle cases where numbers could neighbor multiple symbols, we'd need to adjust our approach to avoid potential double-counting. However, this makes the solution clunkier.
```{python}
import math
import re


numbers = {}
symbols = {}
for row, line in enumerate(lines):
    for match in re.finditer(r'\d+', line):
        for col in range(match.start(), match.end()):
            numbers[(row, col)] = match
    for match in re.finditer(r'[^0-9.]', line):
        symbols[(row, match.start())] = [match.group()]

for (row, col), l in symbols.items():
    neighbours = {numbers[(row + dr, col + dc)] for dr in range(-1, 2) for dc in range(-1, 2) if (row + dr, col + dc) in numbers}
    l.append(neighbours)

part_number_matches = set().union(*(neighbours for _, neighbours in symbols.values()))
answer1 = sum(int(match.group()) for match in part_number_matches)
print(answer1)

answer2 = sum(math.prod(int(match.group()) for match in matches) for symbol, matches in symbols.values() if symbol == '*' and len(matches) == 2)
print(answer2)
```

```{=html}
<div class="card border-info mb-3 mx-auto">
  <div class="card-header text-white bg-info">Key Points</div>
  <div class="card-body p-1">
    <p class="card-text">
```

* `numbers` now stores its neighbours as a `set` of `re.Match` objects and not just a `list` of `int`s
* `set().union(*l)` will union all the `set`s in `l`
* The matches are only converted to integers after de-duplication
* This solution does **not** assume that a number has at most one symbol neighbour

```{=html}
    </p>
  </div>
</div>
```

It's fine to tailor your solution to your input. While a general solution was possible for this problem, [some days](../20/2023-20.html) are practically impossible to solve in the general case and **require** crafting a solution specific to your input.

{{< include ../../_button_footer.qmd >}}
