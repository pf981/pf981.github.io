---
title: "2023 Day 3"
subtitle: "Gear Ratios"
date: 2023-12-03
categories: [python, easy]
draft: true
knitr:
  opts_chunk: 
    comment: "#>"
    collapse: true
problem_url: "https://adventofcode.com/2023/day/3"
---

```{r}
#| echo: false
#| output: false
# www.fontsquirrel.com/fonts/latin-modern-roman -> Webfont Kit -> TTF -> Download
sysfonts::font_paths("../../../fonts")

sysfonts::font_add(
  "LM Roman 10",
  regular = "lmroman10-regular-webfont.ttf",
  bold = "lmroman10-bold-webfont.ttf",
  italic = "lmroman10-italic-webfont.ttf",
  bolditalic = "lmroman10-bolditalic-webfont.ttf"
)

showtext::showtext_auto()
```


Ho ho ho, fellow adventurers!

[Advent of Code day 3]({{< meta problem_url >}}) ...

First, we'll read the input.
```{python}
with open('input.txt', "r") as f:
    lines = f.readlines()
```

## Part 1 <small class="text-body-secondary">...</small>

::: {.hidden}
$$
\newcommand{\game}[1]{\large\phantom{\textbf{9}}\normalsize\llap{\text{#1}}}
$$

$$
\newcommand{\Game}[1]{\color{##2F7E4A}\large\phantom{\textbf{9}}\llap{\textbf{#1}}\color{##55595C}\normalsize}
$$

$$
\newcommand{\grey}[1]{\color{##969696}#1}
$$

$$
\newcommand{\plus}{\smash{\lower{0.5pc}\color{##969696}+}}
$$

$$
\newcommand{\red}[1]{\large\text{\color{##BE4844}\textbf{#1}}\normalsize}
$$

$$
\newcommand{\green}[1]{\large\text{\color{##2F7E4A}\textbf{#1}}\normalsize}
$$

$$
\newcommand{\blue}[1]{\large\text{\color{##1577A0}\textbf{#1}}\normalsize}
$$
:::


::::: {.p-0 style="min-width: fit-content;"}

:::: {.px-4}
```{=html}
<div class="card border-secondary mb-3 mx-auto">
  <div class="card-body p-3 m-1">
    <h4 class="card-title mt-0">Task 1</h4>
    <p class="card-text">
```

Get the <b class='fw-bold' style='color: #91672C;'>sum</b> of <b class='fw-bold' style='color: #2F7E4A;'>numbers</b> <b class='fw-bold' style='color: #1577A0;'>neighbouring</b> a <b class='fw-bold' style='color: #BE4844;'>symbol</b>.

<h6 class="card-subtitle text-muted">Example</h6>

```{r dev="svg"}
#| fig-width: 5.5
#| fig-height: 4
#| dpi: 72
#| code-fold: true
#| code-summary: "Figure Source"
#| warning: false
library(tidyverse)

df <-
  read_lines("467..114..
...*......
..35..633.
......#...
617*......
.....+.58.
..592.....
......755.
...$.*....
.664.598.."
) |>
  str_split("") |>
  map(enframe, name = "col") |>
  list_rbind(names_to = "row") |>
  mutate(
    color = case_when(
      value %in% c("*", "#", "+", "$") ~ "#BE4844",
      row == 1 & col > 5 ~ "#969696",
      row == 6 ~ "#969696",
      !is.na(as.numeric(value)) ~ "#2F7E4A",
      .default = "#969696"
    ),
    fontface = case_when(
      color != "#969696" ~ "bold",
      .default = "plain"
    )
  )

add <- function(row, label, plus = TRUE, is_result = FALSE) {
  component <- annotate(
    geom = "text",
    x = 15,
    y = row,
    size = 7,
    hjust = "right",
    vjust = "middle",
    color = ifelse(is_result, "#91672C", "#969696"),
    fontface = ifelse(is_result, "bold", "plain"),
    label = label,
    family = "LM Roman 10"
  )
  if (plus) {
    component <- list(
      component, 
      annotate(
        geom = "text",
        x = 15,
        y = row + 0.5,
        size = 6,
        hjust = "left",
        vjust = "middle",
        color = "#969696",
        label = "+",
        family = "LM Roman 10"
      )
    )
  }
  component
}

neighbors <- function(row, col, highlight = character()) {
  draw_arrow <- function(direction) {
    dr <- 0.55 * (str_detect(direction, "S") - str_detect(direction, "N"))
    dc <- 0.55 * (str_detect(direction, "E") - str_detect(direction, "W"))
    if (dr != 0 && dc != 0) {
      dr <- dr * 0.8
      dc <- dc * 0.8
    }
    annotate(
      geom = "segment",
      x = col + dc,
      xend = col + (dc * 1.00001),
      y = row + dr,
      yend = row + (dr * 1.00001),
      #size = 1,
      color = ifelse(direction %in% highlight, "#1577A0", "#C2C2C2"),
      arrow = arrow(length = unit(0.015, "npc"), type = "closed")
    )
  }
  map(c("N", "NE", "E", "SE", "S", "SW", "W", "NW"), draw_arrow)
}

df |>
  ggplot(aes(col, row, label = value, fontface = fontface, col = I(color))) +
  geom_text(size = 7, family = "LM Roman 10") +
  scale_y_reverse(
    limits = c(12, 0),
    expand = c(0, 0)
  ) +
  add(1, "467") +
  add(3, "35 + 633") +
  add(5, "617") +
  add(7, "592") +
  add(8, "755") +
  add(10, "664 + 598", plus = FALSE) +
  add(11, "4361", plus = FALSE, is_result = TRUE) +
  neighbors(2, 4, c("S", "SW", "NW")) +
  neighbors(4, 7, c("N", "NE")) +
  neighbors(5, 4, c("W")) +
  neighbors(6, 6, c("SW")) +
  neighbors(9, 4, c("S", "SW")) +
  neighbors(9, 6, c("NE", "SE", "S")) +
  annotate(
    geom = "segment",
    x = 11.5,
    xend = 15,
    y = 10.5,
    yend = 10.5,
    color = "#969696"
  ) +
  theme_void()
```


```{=html}
    </p>
  </div>
</div>
```
::::

...

:::::

<div style="clear: both;"></div> 

```{python}
import re


numbers = {}
symbols = {}
for row, line in enumerate(lines):
    for match in re.finditer(r'\d+', line):
        for col in range(match.start(), match. end()):
            numbers[(row, col)] = match
    for match in re.finditer(r'[^0-9.\n]', line):
        symbols[(row, match.start())] = [match.group()]

for (row, col), l in symbols.items():
    neighbours = {numbers[(row + dr, col + dc)] for dr in range(-1, 2) for dc in range(-1, 2) if (row + dr, col + dc) in numbers}
    l.append([int(match.group()) for match in neighbours])

answer1 = sum(num for _, neighbours in symbols.values() for num in neighbours)
print(answer1)
```

```{=html}
<div class="card border-info mb-3 mx-auto" style="max-width: 30rem;">
  <div class="card-header text-white bg-info">Key Points</div>
  <div class="card-body p-1">
    <p class="card-text">
```

* ...

```{=html}
    </p>
  </div>
</div>
```

## Part 2 <small class="text-body-secondary">...</small>

::::: {.p-0 style="min-width: fit-content;"}

:::: {.px-0}
```{=html}
<div class="card border-secondary mb-3 mx-auto">
  <div class="card-body p-3 m-1">
    <h4 class="card-title mt-0">Task 2</h4>
    <p class="card-text">
```

* Identify <b class='fw-bold' style='color: #BE4844;'>*</b>s <b class='fw-bold' style='color: #1577A0;'>neighbouring exactly two</b> <b class='fw-bold' style='color: #2F7E4A;'>numbers</b>
* **Multiply** its two neighbours
* <b class='fw-bold' style='color: #91672C;'>Sum</b> these values.

<h6 class="card-subtitle text-muted">Example</h6>

```{r dev="svg"}
#| fig-width: 5.5
#| fig-height: 4
#| dpi: 72
#| code-fold: true
#| code-summary: "Figure Source"
#| warning: false
neighbors2 <- function(row, col, highlight = character(), color = "#1577A0") {
  draw_arrow <- function(direction) {
    dr <- 0.55 * (str_detect(direction, "S") - str_detect(direction, "N"))
    dc <- 0.55 * (str_detect(direction, "E") - str_detect(direction, "W"))
    if (dr != 0 && dc != 0) {
      dr <- dr * 0.8
      dc <- dc * 0.8
    }
    annotate(
      geom = "segment",
      x = col + dc,
      xend = col + (dc * 1.00001),
      y = row + dr,
      yend = row + (dr * 1.00001),
      color = color,
      arrow = arrow(length = unit(0.015, "npc"), type = "closed")
    )
  }
  map(highlight, draw_arrow)
}

df |>
  mutate(
    color = case_when(
      row == 4 & col == 7 ~ "#969696",
      row == 5 & col == 4 ~ "#969696",
      row == 6 & col == 6 ~ "#969696",
      row == 9 & col == 4 ~ "#969696",
      
      row == 3 & col > 4 ~ "#969696",
      row %in% c(5, 7) ~ "#969696",
      row == 10 & col <= 4 ~ "#969696",
      .default = color
    ),
    fontface = case_when(
      color != "#969696" ~ "bold",
      .default = "plain"
    )
  ) |>
  ggplot(aes(col, row, label = value, fontface = fontface, col = I(color))) +
  geom_text(size = 7, family = "LM Roman 10") +
  scale_y_reverse(
    limits = c(12, 0),
    expand = c(0, 0)
  ) +
  add(2, expression("467 " %*% " 35")) +
  add(9, expression("755 " %*% " 598"), plus = FALSE) +
  add(11, "467835", plus = FALSE, is_result = TRUE) +
  neighbors2(2, 4, c("S", "NW")) +
  neighbors2(4, 7, c("N"), "#C2C2C2") +
  neighbors2(5, 4, c("W"), "#C2C2C2") +
  neighbors2(6, 6, c("SW"), "#C2C2C2") +
  neighbors2(9, 4, c("S"), "#C2C2C2") +
  neighbors2(9, 6, c("NE", "S")) +
  annotate(
    geom = "segment",
    x = 11.3,
    xend = 15,
    y = 10.5,
    yend = 10.5,
    color = "#969696"
  ) +
  theme_void()
```

```{=html}
    </p>
  </div>
</div>
```
::::

...

:::::

<div style="clear: both;"></div> 

```{python}
import math


answer2 = sum(math.prod(nums) for symbol, nums in symbols.values() if symbol == '*' and len(nums) == 2)
print(answer2)
```

```{=html}
<div class="card border-info mb-3 mx-auto" style="max-width: 30rem;">
  <div class="card-header text-white bg-info">Key Points</div>
  <div class="card-body p-1">
    <p class="card-text">
```

* ...

```{=html}
    </p>
  </div>
</div>
```

## Stocking Stuffers <small class="text-body-secondary">...</small>
...


{{< include ../../_button_footer.qmd >}}
