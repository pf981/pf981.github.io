---
title: "2023 Day 3"
subtitle: "Gear Ratios"
date: 2023-12-03
categories: [python, easy]
draft: true
knitr:
  opts_chunk: 
    comment: "#>"
    collapse: true
problem_url: "https://adventofcode.com/2023/day/3"
---

Ho ho ho, fellow adventurers!

[Advent of Code day 3]({{< meta problem_url >}}) ...

First, we'll read the input.
```{python}
with open('input.txt', "r") as f:
    lines = f.readlines()
```

## Part 1 <small class="text-body-secondary">...</small>

::: {.hidden}
$$
\newcommand{\game}[1]{\large\phantom{\textbf{9}}\normalsize\llap{\text{#1}}}
$$

$$
\newcommand{\Game}[1]{\color{##2F7E4A}\large\phantom{\textbf{9}}\llap{\textbf{#1}}\color{##55595C}\normalsize}
$$

$$
\newcommand{\grey}[1]{\color{##969696}#1}
$$

$$
\newcommand{\plus}{\smash{\lower{0.5pc}\color{##969696}+}}
$$

$$
\newcommand{\red}[1]{\large\text{\color{##BE4844}\textbf{#1}}\normalsize}
$$

$$
\newcommand{\green}[1]{\large\text{\color{##2F7E4A}\textbf{#1}}\normalsize}
$$

$$
\newcommand{\blue}[1]{\large\text{\color{##1577A0}\textbf{#1}}\normalsize}
$$
:::


::::: {.p-0 style="min-width: fit-content;"}

:::: {.px-4}
```{=html}
<div class="card border-secondary mb-3 mx-auto">
  <div class="card-body p-3 m-1">
    <h4 class="card-title mt-0">Task 1</h4>
    <p class="card-text">
```

Get the <b class='fw-bold' style='color: #91672C;'>sum</b> of <b class='fw-bold' style='color: #2F7E4A;'>game IDs</b> <b class='fw-bold' style='color: #BE4844;'>excluding</b> games with more than <b class='fw-bold'>12 red</b>, <b class='fw-bold'>13 green</b>, or <b class='fw-bold'>14 blue</b>.

<h6 class="card-subtitle text-muted">Example</h6>

$$
\begin{aligned}
&\text{Game }\Game{1}\text{: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green} & \grey{1} & \plus\\
&\text{Game }\Game{2}\text{: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue} & \grey{2} & \plus\\
&\text{Game }\game{3}\text{: 8 green, 6 blue, }\red{20 red}\text{; 5 blue, 4 red, 13 green; 5 green, 1 red} & \\
&\text{Game }\game{4}\text{: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, }\red{15 blue}\text{, }\red{14 red} & \\
&\text{Game }\Game{5}\text{: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green} & \grey{5} \llap{\lower{0.4pc}\underline{\phantom{\large{\textbf{8}}}}} \\
& & \color{#91672C}\large{\textbf{8}}
\end{aligned}
$$

```{=html}
    </p>
  </div>
</div>
```
::::

In part 1, we need to identify which games would be possible if there were only

 * `12` red cubes
 * `13` green cubes, and
 * `14` blue cubes

For example, if a line contains `"13 red"`, we know we need to **exclude** it.

We'll use regex to extract the largest red, green, and blue values. Then we'll keep only games where

 * `largest_red ≤ 12`, and
 * `largest_green ≤ 13`, and
 * `largest_blue ≤ 14`

:::::

<div style="clear: both;"></div> 

```{python}
import dataclasses


@dataclasses.dataclass(frozen=True)
class Number:
    row: int
    start_col: int
    end_col: int
    value: int


def get_number(pos, digits):
    start_col = pos[1]
    while (pos[0], start_col - 1) in digits:
        start_col -= 1

    end_col = pos[1]
    while (pos[0], end_col + 1) in digits:
        end_col += 1

    return Number(
        row=pos[0],
        start_col=start_col,
        end_col=end_col,
        value=int(''.join(digits[pos[0], col] for col in range(start_col, end_col + 1)))
    )


m = {(row, col): c for row, line in enumerate(lines) for col, c in enumerate(line)}
symbols = {pos for pos, c in m.items() if c not in '0123456789.'}
digits = {pos: c for pos, c in m.items() if c in '0123456789'}

numbers = {}
for pos, c in digits.items():
    if pos in numbers:
        continue

    number = get_number(pos, digits)
    for col in range(number.start_col, number.end_col + 1):
        numbers[(number.row, col)] = number

valid_numbers = {numbers[(row + dr, col + dc)] for row, col in symbols for dr in range(-1, 2) for dc in range(-1, 2) if (row + dr, col + dc) in numbers}
answer1 = sum(number.value for number in valid_numbers)
print(answer1)
```

```{=html}
<div class="card border-info mb-3 mx-auto" style="max-width: 30rem;">
  <div class="card-header text-white bg-info">Key Points</div>
  <div class="card-body p-1">
    <p class="card-text">
```

* `extract_max` finds highest quantity of a single colour using regex
* `extract_cubes` function find highest quantity of every colour
* Filter and sum the game IDs based on the colour constraints

```{=html}
    </p>
  </div>
</div>
```

## Part 2 <small class="text-body-secondary">Combining Cube Colour Counts</small>

::::: {.p-0 style="min-width: fit-content;"}

:::: {.px-0}
```{=html}
<div class="card border-secondary mb-3 mx-auto">
  <div class="card-body p-3 m-1">
    <h4 class="card-title mt-0">Task 2</h4>
    <p class="card-text">
```

<b class='fw-bold'>Multiply</b> the <b class='fw-bold'>largest</b> <b class='fw-bold' style='color: #BE4844;'>red</b>, <b class='fw-bold' style='color: #2F7E4A;'>green</b>, and <b class='fw-bold' style='color: #1577A0;'>blue</b> values. Then get the <b class='fw-bold' style='color: #91672C;'>sum</b>.

<h6 class="card-subtitle text-muted">Example</h6>

$$
\begin{aligned}
&\text{Game 1: 3 blue, }\red{4 red}\text{; 1 red, }\green{2 green}\text{, }\blue{6 blue}\text{; 2 green} & \grey{4 \times 2 \times 6} & \plus\\
&\text{Game 2: 1 blue, 2 green; }\green{3 green}\text{, }\blue{4 blue}\text{, }\red{1 red}\text{; 1 green, 1 blue} & \grey{3 \times 4 \times 1} & \plus\\
&\text{Game 3: 8 green, }\blue{6 blue}\text{, }\red{20 red}\text{; 5 blue, 4 red, }\green{13 green}\text{; 5 green, 1 red} & \grey{6 \times 20 \times 13} & \plus\\
&\text{Game 4: 1 green, 3 red, 6 blue; }\green{3 green}\text{, 6 red; 3 green, }\blue{15 blue}\text{, }\red{14 red} & \grey{3 \times 15 \times 14} & \plus\\
&\text{Game 5: }\red{6 red}\text{, 1 blue, }\green{3 green}\text{; }\blue{2 blue}\text{, 1 red, 2 green} & \grey{6 \times 3 \times 2} \llap{\lower{0.4pc}\underline{\phantom{3 \times 15 \times 14}}} \\
& & \color{#91672C}\large{\textbf{2286}}
\end{aligned}
$$

```{=html}
    </p>
  </div>
</div>
```
::::

Part 2 asks

> what is the fewest number of cubes of each color that could have been in the bag to make the game possible?

The word "fewest" might lead you to think we need to get the minimum. But actually, we need to find the **maximum** of each colour.

Luckily, that's precisely what we did in part 1. So we just need to multiply the largest of each colour and get the sum.

:::::

<div style="clear: both;"></div> 

```{python}
import math


gears = {pos for pos, c in m.items() if c == '*'}
gear_ratios = 0
for row, col in gears:
    neighbors = {numbers[row + dr, col + dc] for dr in range(-1, 2) for dc in range(-1, 2) if (row + dr, col + dc) in numbers}
    if len(neighbors) == 2:
        gear_ratios += math.prod(number.value for number in neighbors)

answer2 = gear_ratios
print(answer2)
```

```{=html}
<div class="card border-info mb-3 mx-auto" style="max-width: 30rem;">
  <div class="card-header text-white bg-info">Key Points</div>
  <div class="card-body p-1">
    <p class="card-text">
```

* We already have the largest of each colour from part 1
* Multiply the largest of each colour and get the sum

```{=html}
    </p>
  </div>
</div>
```

## Stocking Stuffers <small class="text-body-secondary">...</small>


{{< include ../../_button_footer.qmd >}}
