---
title: "2023 Day 1"
subtitle: "Trebuchet?!"
date: 2023-12-01
categories: [python, easy]
draft: false
# This doesn't work when I put it in _metadata.yml
knitr:
  opts_chunk: 
    comment: "#>"
    collapse: true
problem_url: "https://adventofcode.com/2023/day/1"
description: "Easy string manipulation."
---

Ho ho ho, fellow adventurers!

[Advent of Code day 1]({{< meta problem_url >}}) has catapulted us into a realm of medieval engineering. Day 1 starts off easy with string manipulation.

First, we'll read the input.
```{python}
with open('input.txt', "r") as f:
    lines = f.readlines()
```

## Part 1 <small class="text-body-secondary">Trebuchet Trouble</small>

::: {.hidden}
$$
% \underline doesn't support thickness, so I just redraw the underline slightly offset three times
\newcommand{\thickul}[2]{%
\large{\textbf{#2}}%
\color{#1}%
\llap{\underline{\phantom{\large{\textbf{#2}}}}}%
\llap{\underline{\lower{.05ex}\phantom{\large{\textbf{#2}}}}}%
\llap{\underline{\lower{.1ex}\phantom{\large{\textbf{#2}}}}}%
\llap{\underline{\lower{.15ex}\phantom{\large{\textbf{#2}}}}}%
\color{##55595C}\normalsize%
}
$$

$$
\newcommand{\first}[1]{\thickul{##2F7E4A}{#1}}
$$

$$
\newcommand{\last}[1]{\thickul{##1577A0}{#1}}
$$

$$
\newcommand{\both}[1]{%
\thickul{##2F7E4A}{#1}%
\color{##1577A0}%
\llap{\underline{\lower{1ex}\phantom{\large{\textbf{#1}}}}}%
\llap{\underline{\lower{1.05ex}\phantom{\large{\textbf{#1}}}}}%
\llap{\underline{\lower{1.1ex}\phantom{\large{\textbf{#1}}}}}%
\llap{\underline{\lower{1.15ex}\phantom{\large{\textbf{#1}}}}}%
\color{##55595C}\normalsize%
}
$$
:::

::::: {.p-1}

:::: {.px-4 .float-md-start}
```{=html}
<div class="card border-secondary mb-3 mx-auto" style="width: 20rem;">
  <div class="card-body p-3 m-1">
    <h4 class="card-title mt-0">Task 1</h4>
    <p class="card-text">
```

Combine the <u class='fw-bold' style='text-decoration-thickness: 2px;color: #2F7E4A;'>first</u> and <u class='fw-bold' style='text-decoration-thickness: 2px;color: #1577A0;'>last</u> digit of each string and get the <b class='fw-bold' style='color: #91672C;'>sum</b>.

<h6 class="card-subtitle text-muted">Example</h6>

$$
\begin{aligned}
\first{1}\text{abc}\last{2} & ~~~~~ & \color{#969696}12 & \smash{\lower{0.5pc}\color{#969696}+}\\
\text{pqr}\first{3}\text{stu}\last{8}\text{vwx} & & \color{#969696}38 & \smash{\lower{0.5pc}\color{#969696}+}\\
\text{a}\first{1}\text{b2c3d4e}\last{5}\text{f} & & \color{#969696}15 & \smash{\lower{0.5pc}\color{#969696}+}\\
\text{treb}\both{7}\text{uchet} & & \color{#969696}77\llap{\lower{0.4pc}\underline{\phantom{\large{\textbf{142}}}}} & \\
 & & \color{#91672C}\large{\textbf{142}} &\\
\end{aligned}
$$


```{=html}
    </p>
  </div>
</div>
```
::::

In part 1, we need to get the trebuchet calibration values by extracting the first and last digits of each line of the input.

This can be done with regex, but instead I'll iterate through each letter until I find a digit.

:::::

<div style="clear: both;"></div> 


```{python}
def first_value(line, m):
  for i, _ in enumerate(line):
    for text, val in m.items():
      if line[i:].startswith(text):
        return val


m = {c: int(c) for c in '123456789'}

answer1 = sum(10 * first_value(line, m) + first_value(line[::-1], m) for line in lines)
print(answer1)
```

```{=html}
<div class="card border-info mb-3 mx-auto">
  <div class="card-header text-white bg-info">Key Points</div>
  <div class="card-body p-1">
    <p class="card-text">
```

* `m` maps digit characters to their integer values
* `first_value` finds the first substring that starts with any key of `m` and returns its value
* The string is reversed to find the last value

```{=html}
    </p>
  </div>
</div>
```

## Part 2 <small class="text-body-secondary">Spelling Everything with Letters</small>

::::: {.p-1}

:::: {.px-4 .float-md-start}
```{=html}
<div class="card border-secondary mb-3 mx-auto" style="width: 20rem;">
  <div class="card-body p-3 m-1">
    <h4 class="card-title mt-0">Task 2</h4>
    <p class="card-text">
```

Adapt part 1 to handle digits spelled out with letters.

<h6 class="card-subtitle text-muted">Example</h6>

$$
\begin{aligned}
\first{two}\text{1}\last{nine} & ~~~~~ & \color{#969696}29 & \smash{\lower{0.5pc}\color{#969696}+}\\
\first{eight}\text{wo}\last{three} & & \color{#969696}83 & \smash{\lower{0.5pc}\color{#969696}+}\\
\text{abc}\first{one}\text{2}\last{three}\text{xyz} & & \color{#969696}13 & \smash{\lower{0.5pc}\color{#969696}+}\\
\text{x}\first{two}\text{ne3}\last{four} & & \color{#969696}24 & \smash{\lower{0.5pc}\color{#969696}+}\\
\first{4}\text{nineeightseven}\last{2} & & \color{#969696}42 & \smash{\lower{0.5pc}\color{#969696}+}\\
\text{z}\first{one}\text{ight23}\last{4} & & \color{#969696}14 & \smash{\lower{0.5pc}\color{#969696}+}\\
\first{7}\text{pqrst}\last{six}\text{teen} & & \color{#969696}76\llap{\lower{0.4pc}\underline{\phantom{\large{\textbf{281}}}}} & \\
 & & \color{#91672C}\large{\textbf{281}} &\\
\end{aligned}
$$


```{=html}
    </p>
  </div>
</div>
```
::::

Now, we need to handle digits spelled out with letters. We'll update `m` with these new mappings.

However, now that `m` contains keys with more than one letter it won't work when the string is reversed. For example, it needs to match `eno` instead of `one`.

So we'll create `rev_m` with each key reversed.

:::::

<div style="clear: both;"></div> 

```{python}
words = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']
m.update({text: i for i, text in enumerate(words, 1)})
rev_m = {text[::-1]: value for text, value in m.items()}

answer2 = sum(10 * first_value(line, m) + first_value(line[::-1], rev_m) for line in lines)
print(answer2)
```

```{=html}
<div class="card border-info mb-3 mx-auto">
  <div class="card-header text-white bg-info">Key Points</div>
  <div class="card-body p-1">
    <p class="card-text">
```

* `m` has been extended to include mappings for digits spelled out with letters (e.g. `{'one': 1, 'two': 2, ...}`).
* `rev_m` is `m` with each key reversed (e.g. `{'eno': 1, 'owt': 2, ...}`)
* The first digit is extracted using `m`, while the last digit uses `rev_m`

```{=html}
    </p>
  </div>
</div>
```

{{< include ../../_button_footer.qmd >}}
