{
  "hash": "ab77736139c85665882428a068b39387",
  "result": {
    "markdown": "---\ntitle: \"2023 Day 2\"\nsubtitle: \"Cube Conundrum\"\ndate: 2024-01-03\ncategories: [python, easy]\ndraft: false\nknitr:\n  opts_chunk: \n    comment: \"#>\"\n    collapse: true\nproblem_url: \"https://adventofcode.com/2023/day/2\"\ndescription: \"Easy puzzle with basic regex and arithmetic.\"\nimage: \"/images/2023-02.svg\"\n---\n\n\nHo ho ho, fellow adventurers!\n\n[Advent of Code day 2]({{< meta problem_url >}}) lands us on Snow Island playing a cube game with an Elf. This is a straightforward puzzle involving basic regex and arithmetic.\n\nFirst, we'll read the input.\n\n::: {.cell}\n\n```{.python .cell-code}\nwith open('input.txt', \"r\") as f:\n    lines = f.readlines()\n```\n:::\n\n\n## Part 1 <small class=\"text-body-secondary\">Prismatic Filters</small>\n\n::: {.hidden}\n$$\n\\newcommand{\\game}[1]{\\large\\phantom{\\textbf{9}}\\normalsize\\llap{\\text{#1}}}\n$$\n\n$$\n\\newcommand{\\Game}[1]{\\color{##2F7E4A}\\large\\phantom{\\textbf{9}}\\llap{\\textbf{#1}}\\color{##55595C}\\normalsize}\n$$\n\n$$\n\\newcommand{\\grey}[1]{\\color{##969696}#1}\n$$\n\n$$\n\\newcommand{\\plus}{\\smash{\\lower{0.5pc}\\color{##969696}+}}\n$$\n\n$$\n\\newcommand{\\red}[1]{\\large\\text{\\color{##BE4844}\\textbf{#1}}\\normalsize}\n$$\n\n$$\n\\newcommand{\\green}[1]{\\large\\text{\\color{##2F7E4A}\\textbf{#1}}\\normalsize}\n$$\n\n$$\n\\newcommand{\\blue}[1]{\\large\\text{\\color{##1577A0}\\textbf{#1}}\\normalsize}\n$$\n:::\n\n\n::::: {.p-0 style=\"min-width: fit-content;\"}\n\n:::: {.px-4}\n\n```{=html}\n<div class=\"card border-secondary mb-3 mx-auto\">\n  <div class=\"card-body p-3 m-1\">\n    <h4 class=\"card-title mt-0\">Task 1</h4>\n    <p class=\"card-text\">\n```\n\n\nGet the <b class='fw-bold' style='color: #91672C;'>sum</b> of <b class='fw-bold' style='color: #2F7E4A;'>game IDs</b> <b class='fw-bold' style='color: #BE4844;'>excluding</b> games with more than <b class='fw-bold'>12 red</b>, <b class='fw-bold'>13 green</b>, or <b class='fw-bold'>14 blue</b>.\n\n<h6 class=\"card-subtitle text-muted\">Example</h6>\n\n$$\n\\begin{aligned}\n&\\text{Game }\\Game{1}\\text{: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green} & \\grey{1} & \\plus\\\\\n&\\text{Game }\\Game{2}\\text{: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue} & \\grey{2} & \\plus\\\\\n&\\text{Game }\\game{3}\\text{: 8 green, 6 blue, }\\red{20 red}\\text{; 5 blue, 4 red, 13 green; 5 green, 1 red} & \\\\\n&\\text{Game }\\game{4}\\text{: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, }\\red{15 blue}\\text{, }\\red{14 red} & \\\\\n&\\text{Game }\\Game{5}\\text{: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green} & \\grey{5} \\llap{\\lower{0.4pc}\\underline{\\phantom{\\large{\\textbf{8}}}}} \\\\\n& & \\color{#91672C}\\large{\\textbf{8}}\n\\end{aligned}\n$$\n\n\n```{=html}\n    </p>\n  </div>\n</div>\n```\n\n::::\n\nIn part 1, we need to identify which games would be possible if there were only\n\n * `12` red cubes\n * `13` green cubes, and\n * `14` blue cubes\n\nFor example, if a line contains `\"13 red\"`, we know we need to **exclude** it.\n\nWe'll use regex to extract the largest red, green, and blue values. Then we'll keep only games where\n\n * `largest_red ≤ 12`, and\n * `largest_green ≤ 13`, and\n * `largest_blue ≤ 14`\n\n:::::\n\n<div style=\"clear: both;\"></div> \n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport re\n\n\ndef extract_cubes(line):\n    return [extract_max(line, color) for color in ['red', 'green', 'blue']]\n\n\ndef extract_max(line, c):\n    return max(int(num) for num in re.findall(r'(\\d+) ' + c, line))\n\n\nmax_cubes = [extract_cubes(line) for line in lines]\nanswer1 = sum(game_id for game_id, cubes in enumerate(max_cubes, 1) if cubes[0] <= 12 and cubes[1] <= 13 and cubes[2] <= 14)\nprint(answer1)\n#> 8\n```\n:::\n\n```{=html}\n<div class=\"card border-info mb-3 mx-auto\">\n  <div class=\"card-header text-white bg-info\">Key Points</div>\n  <div class=\"card-body p-1\">\n    <p class=\"card-text\">\n```\n\n\n* `extract_max` finds highest quantity of a single colour using regex\n* `extract_cubes` function find highest quantity of every colour\n* Filter and sum the game IDs based on the colour constraints\n\n\n```{=html}\n    </p>\n  </div>\n</div>\n```\n\n\n## Part 2 <small class=\"text-body-secondary\">Combining Cube Colour Counts</small>\n\n::::: {.p-0 style=\"min-width: fit-content;\"}\n\n:::: {.px-0}\n\n```{=html}\n<div class=\"card border-secondary mb-3 mx-auto\">\n  <div class=\"card-body p-3 m-1\">\n    <h4 class=\"card-title mt-0\">Task 2</h4>\n    <p class=\"card-text\">\n```\n\n\n<b class='fw-bold'>Multiply</b> the <b class='fw-bold'>largest</b> <b class='fw-bold' style='color: #BE4844;'>red</b>, <b class='fw-bold' style='color: #2F7E4A;'>green</b>, and <b class='fw-bold' style='color: #1577A0;'>blue</b> values. Then get the <b class='fw-bold' style='color: #91672C;'>sum</b>.\n\n<h6 class=\"card-subtitle text-muted\">Example</h6>\n\n$$\n\\begin{aligned}\n&\\text{Game 1: 3 blue, }\\red{4 red}\\text{; 1 red, }\\green{2 green}\\text{, }\\blue{6 blue}\\text{; 2 green} & \\grey{4 \\times 2 \\times 6} & \\plus\\\\\n&\\text{Game 2: 1 blue, 2 green; }\\green{3 green}\\text{, }\\blue{4 blue}\\text{, }\\red{1 red}\\text{; 1 green, 1 blue} & \\grey{3 \\times 4 \\times 1} & \\plus\\\\\n&\\text{Game 3: 8 green, }\\blue{6 blue}\\text{, }\\red{20 red}\\text{; 5 blue, 4 red, }\\green{13 green}\\text{; 5 green, 1 red} & \\grey{6 \\times 20 \\times 13} & \\plus\\\\\n&\\text{Game 4: 1 green, 3 red, 6 blue; }\\green{3 green}\\text{, 6 red; 3 green, }\\blue{15 blue}\\text{, }\\red{14 red} & \\grey{3 \\times 15 \\times 14} & \\plus\\\\\n&\\text{Game 5: }\\red{6 red}\\text{, 1 blue, }\\green{3 green}\\text{; }\\blue{2 blue}\\text{, 1 red, 2 green} & \\grey{6 \\times 3 \\times 2} \\llap{\\lower{0.4pc}\\underline{\\phantom{3 \\times 15 \\times 14}}} \\\\\n& & \\color{#91672C}\\large{\\textbf{2286}}\n\\end{aligned}\n$$\n\n\n```{=html}\n    </p>\n  </div>\n</div>\n```\n\n::::\n\nPart 2 asks\n\n> what is the fewest number of cubes of each color that could have been in the bag to make the game possible?\n\nThe word \"fewest\" might lead you to think we need to get the minimum. But actually, we need to find the **maximum** of each colour.\n\nLuckily, that's precisely what we did in part 1. So we just need to multiply the largest of each colour and get the sum.\n\n:::::\n\n<div style=\"clear: both;\"></div> \n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport math\n\n\nanswer2 = sum(math.prod(cubes) for cubes in max_cubes)\nprint(answer2)\n#> 2286\n```\n:::\n\n```{=html}\n<div class=\"card border-info mb-3 mx-auto\">\n  <div class=\"card-header text-white bg-info\">Key Points</div>\n  <div class=\"card-body p-1\">\n    <p class=\"card-text\">\n```\n\n\n* We already have the largest of each colour from part 1\n* Multiply the largest of each colour and get the sum\n\n\n```{=html}\n    </p>\n  </div>\n</div>\n```\n\n\n## Stocking Stuffers <small class=\"text-body-secondary\">Candy-Coated Comprehensions</small>\n\nPretty much every line in the solution is a list comprehension. They can be combined to construct a juicy one-liner.\n\n\n::: {.cell}\n\n```{.python .cell-code .code-overflow-wrap}\n[sum(l) for l in zip(*[(i * (cubes[0] <= 12 and cubes[1] <= 13 and cubes[2] <= 14), math.prod(cubes)) for i, cubes in enumerate(([max(int(num) for num in re.findall(r'(\\d+) ' + c, line)) for c in ['red', 'green', 'blue']] for line in lines), 1)])]\n#> [8, 2286]\n```\n:::\n::: {.cell}\n\n:::\n\n```{=html}\n<!-- Buttons -->\n<div class=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n\n  <!-- Problem Button -->\n  <a type=\"button\" class=\"btn btn-secondary\" href=\"{{< meta problem_url >}}\" role=\"button\">\n    <i class=\"bi bi-box-arrow-up-right\"></i> Problem\n  </a>\n\n  <!-- Input Button -->\n  <button type=\"button\" class=\"btn btn-secondary\" data-bs-toggle=\"modal\" data-bs-target=\"#inputModal\">\n    <i class=\"bi bi-file-earmark-text\"></i> Input\n  </button>\n\n  <!-- Solution Modal Button -->\n  <button type=\"button\" class=\"btn btn-primary\" data-bs-toggle=\"modal\" data-bs-target=\"#solutionModal\">\n    <i class=\"bi bi-code-slash\"></i> Full Solution\n  </button>\n\n</div>\n\n\n<!-- Input Modal -->\n<div class=\"modal fade\" id=\"inputModal\" tabindex=\"-1\" aria-labelledby=\"inputModalLabel\" aria-hidden=\"true\">\n<div class=\"modal-dialog modal-dialog-scrollable modal-xl\">\n<div class=\"modal-content\">\n<div class=\"modal-header\">\n  <h5 class=\"modal-title\" id=\"inputModalLabel\">{{< meta title >}} Input</h5>\n  <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n</div>\n<div class=\"modal-body\">\n```\n::: {.cell file='input.txt'}\n\n```{.r .cell-code}\nGame 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green\nGame 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue\nGame 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red\nGame 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red\nGame 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green\n```\n:::\n\n```{=html}\n</div>\n<div class=\"modal-footer\">\n</div>\n</div>\n</div>\n</div>\n\n\n<!-- Solution Modal -->\n<div class=\"modal fade\" id=\"solutionModal\" tabindex=\"-1\" aria-labelledby=\"solutionModalLabel\" aria-hidden=\"true\">\n<div class=\"modal-dialog modal-dialog-scrollable modal-xl\">\n<div class=\"modal-content\">\n<div class=\"modal-header\">\n  <h5 class=\"modal-title\" id=\"solutionModalLabel\">{{< meta title >}} Full Solution</h5>\n  <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n</div>\n<div class=\"modal-body\">\n```\n::: {.cell file='solution.py'}\n\n```{.r .cell-code}\nimport math\nimport re\n\n\nwith open('input.txt', \"r\") as f:\n    lines = f.readlines()\n\n\ndef extract_cubes(line):\n    return [extract_max(line, color) for color in ['red', 'green', 'blue']]\n\n\ndef extract_max(line, c):\n    return max(int(num) for num in re.findall(r'(\\d+) ' + c, line))\n\n\nmax_cubes = [extract_cubes(line) for line in lines]\nanswer1 = sum(game_id for game_id, cubes in enumerate(max_cubes, 1) if cubes[0] <= 12 and cubes[1] <= 13 and cubes[2] <= 14)\nprint(answer1)\n\n\n# Part 2\nanswer2 = sum(math.prod(cubes) for cubes in max_cubes)\nprint(answer2)\n```\n:::\n\n```{=html}\n</div>\n<div class=\"modal-footer\">\n<small><i>Execution took 0.01 seconds</i></small>\n</div>\n</div>\n</div>\n</div>\n```\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}