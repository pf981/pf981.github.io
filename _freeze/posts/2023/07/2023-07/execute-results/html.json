{
  "hash": "61bea8b09b23dbe2f28b84f9e851ce84",
  "result": {
    "markdown": "---\ntitle: \"2023 Day 7\"\nsubtitle: \"Camel Cards\"\ndate: 2024-04-03\ncategories: [python, easy]\ndraft: false\nknitr:\n  opts_chunk: \n    comment: \"#>\"\n    collapse: true\nproblem_url: \"https://adventofcode.com/2023/day/7\"\ndescription: \"Easy puzzle evaluating simplified poker hands.\"\nimage: \"/images/2023-07.svg\"\n---\n\n\n::: {.hidden}\n$$\n\\newcommand{\\blue}[1]{\\color{##1577A0}\\textbf{#1}\\color{##55595C}}\n\\newcommand{\\orange}[1]{\\color{##91672C}\\textbf{#1}\\color{##55595C}}\n\\newcommand{\\red}[1]{\\color{##BE4844}\\textbf{#1}\\color{##55595C}}\n\\newcommand{\\green}[1]{\\color{##2F7E4A}\\textbf{#1}\\color{##55595C}}\n\\newcommand{\\grey}[1]{\\color{##969696}{#1}\\color{##55595C}}\n\\newcommand{\\greyred}[1]{\\color{##f27d79}{#1}\\color{##55595C}}\n\\newcommand{\\greygreen}[1]{\\color{##7ec295}{#1}\\color{##55595C}}\n\\newcommand{\\greyblue}[1]{\\color{##76acc2}{#1}\\color{##55595C}}\n\\newcommand{\\plus}{\\smash{\\lower{0.5pc}\\grey{+}}}\n$$\n:::\n\n\nHo ho ho, fellow adventurers!\n\n[Advent of Code day 7]({{< meta problem_url >}}) invites us to play a game of Camel Cards. In this simplified version of poker, we must evaluate and rank hands.\n\nFirst, we'll read the input.\n\n::: {.cell}\n\n```{.python .cell-code}\nwith open(\"input.txt\", \"r\") as f:\n    lines = f.readlines()\n```\n:::\n\n\n## Part 1 <small class=\"text-body-secondary\">Hand Hierarchy</small>\n\n::::: {.p-0 style=\"min-width: fit-content;\"}\n\n\n```{=html}\n<div class=\"card border-secondary mb-3 mx-auto\">\n  <div class=\"card-body p-3 m-1 pb-0 mb-0\">\n    <h4 class=\"card-title mt-0\">Task 1</h4>\n```\n\n\nYou are given a list of 5 card hands and their corresponding <b class='fw-bold' style='color: #2F7E4A;'>bids</b>. <b class='fw-bold' style='color: #1577A0;'>Rank</b> each hand and calculate the winnings as the product of the <b class='fw-bold' style='color: #1577A0;'>rank</b> and <b class='fw-bold' style='color: #2F7E4A;'>bid</b>. Compute the <b class='fw-bold' style='color: #91672C;'>total winnings</b>.\n\nHands are <b class='fw-bold' style='color: #1577A0;'>ranked</b> by their type. If two hands are of the same type, their ordering is then determined by comparing the strength of the individual cards, starting from the first card to the fifth, as needed.\n\nHand types are ranked as follows:\n\n1. High card\n2. One pair\n3. Two pair\n4. Three of a kind\n5. Full house\n6. Four of a kind\n7. Five of a kind\n\n<h6 class=\"card-subtitle text-muted\">Example</h6>\n<!-- &{\\text{Hand}} &&{\\text{Bid}} &&{\\text{\\grey{Rank}}} &&{\\text{\\grey{Type}}}\\phantom{\\Huge{G}}&{\\text{\\grey{Winnings}}} &\\\\ -->\n\n$$\n\\begin{aligned}\n&{\\text{Hand}} &&{\\text{Bid}} &&{\\text{\\grey{Rank}}} &&{\\text{\\grey{Type}}}\\phantom{\\Huge{g}}&{\\text{\\grey{Winnings}}} &\\\\\n&\\text{32T3K} &&\\green{765} &&\\greyblue{1} &&\\text{\\grey{One pair}}          &\\greygreen{765} \\,\\grey{\\times}\\, \\greyblue{1}                                                        &\\plus\\\\\n&\\text{T55J5} &&\\green{684} &&\\greyblue{4} &&\\text{\\grey{Full house}}        &\\greygreen{684} \\,\\grey{\\times}\\, \\greyblue{4}                                                        &\\plus\\\\\n&\\text{KK677} &&\\green{28}  &&\\greyblue{3} &&\\text{\\grey{Two pair}} & \\greygreen{28} \\,\\grey{\\times}\\, \\greyblue{3}                                                        &\\plus\\\\\n&\\text{KTJJT} &&\\green{220} &&\\greyblue{2} &&\\text{\\grey{Two pair}}\\grey{^*}          &\\greygreen{220} \\,\\grey{\\times}\\, \\greyblue{2}                                                        &\\plus\\\\\n&\\text{QQQJA} &&\\green{483} &&\\greyblue{5} &&\\text{\\grey{Three of a kind}}   &\\greygreen{483} \\,\\grey{\\times}\\, \\greyblue{5} \\llap{\\lower{0.4pc}\\underline{\\phantom{483 \\times 5}}} &\\\\\n&             &&            &&             &&                                &\\orange{6440}                                                                                         &\\\\\n\\end{aligned}\n$$\n\n$\\grey{\\scriptsize{^{*}\\text{Second card ranks lower than other two pair's second card}}}$\n\n\n\n```{=html}\n  </div>\n</div>\n```\n\n\n:::::\n\n<div style=\"clear: both;\"></div> \n\n\nWe'll need a mechanism to rank hands. First, we define a function, `primary_order`, which ranks the hand's type. This is accomplished by analysing the frequency of each card in the hand, allowing us to classify the hand based on predefined patterns.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport collections\n\n\ndef primary_order(hand):\n    counts = [count for card, count in collections.Counter(hand).most_common()]\n\n    possible_counts = [\n        [1, 1, 1, 1, 1],  # High card\n        [2, 1, 1, 1],  # One pair\n        [2, 2, 1],  # Two pair\n        [3, 1, 1],  # Three of a kind\n        [3, 2],  # Full house\n        [4, 1],  # Four of a kind\n        [5],  # Five of a kind\n    ]\n\n    return possible_counts.index(counts)\n```\n:::\n\n\nNext, we define a function, `secondary_order`, which ranks hands based on the individual card values.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef secondary_order(hand):\n    return tuple(\"23456789TJQKA\".index(card) for card in hand)\n```\n:::\n\n\nFinally, define `hand_bid_order` as the combination of the primary and secondary orderings.  Python makes it easy to combine and apply our primary and secondary orderings. We can provide `sort` a `key` function which takes an element and returns a `tuple` of the primary and secondary orderings.\n\nCalculate the <b class='fw-bold' style='color: #91672C;'>total winnings</b> as the sum of bids multiplied by the <b class='fw-bold' style='color: #1577A0;'>rank</b>.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef hand_bid_order(hand_bid):\n    hand, bid = hand_bid\n    return primary_order(hand), secondary_order(hand)\n\n\nhands_bids = [line.split(\" \") for line in lines]\nhands_bids.sort(key=hand_bid_order)\nanswer1 = sum(i * int(bid) for i, (_, bid) in enumerate(hands_bids, 1))\nprint(answer1)\n#> 6440\n```\n:::\n\n```{=html}\n<div class=\"card border-info mb-3 mx-auto\">\n  <div class=\"card-header text-white bg-info\">Key Points</div>\n  <div class=\"card-body p-1\">\n    <p class=\"card-text\">\n```\n\n\n* Ranking Camel Cards hands involves two levels of ordering:\n    1. **Primary ordering** is based on the type of hand, determined by the pattern of card frequencies\n    2. **Secondary ordering** evaluates the specific values of the cards within a hand\n* A combined key function, `hand_bid_order`, uses both the primary and secondary orderings to sort the hands from weakest to strongest\n\n```{=html}\n    </p>\n  </div>\n</div>\n```\n\n\n\n## Part 2 <small class=\"text-body-secondary\">Jokers Wild</small>\n\n::::: {.p-0 style=\"min-width: fit-content;\"}\n\n:::: {.pe-4}\n\n```{=html}\n<div class=\"card border-secondary mb-3 mx-auto\">\n  <div class=\"card-body p-3 m-1 pb-0 mb-0\">\n    <h4 class=\"card-title mt-0\">Task 2</h4>\n```\n\n\n<b class='fw-bold' style='color: #BE4844;'>J</b>s are now wild <b class='fw-bold' style='color: #BE4844;'>Jokers</b> and act as whatever card results in the **strongest type**.\n\nDetermine the new hand <b class='fw-bold' style='color: #1577A0;'>ranks</b> and compute the <b class='fw-bold' style='color: #91672C;'>total winnings</b>.\n\n<h6 class=\"card-subtitle text-muted\">Example</h6>\n$$\n\\begin{aligned}\n&{\\text{Hand}}      &&{\\text{Bid}} &&{\\text{\\grey{Rank}}} &&{\\text{\\grey{Type}}}\\phantom{\\Huge{g}}&{\\text{\\grey{Winnings}}} &\\\\\n&\\text{32T3K}       &&\\green{765} &&\\greyblue{1} &&\\text{\\grey{One pair}}          &\\greygreen{765} \\,\\grey{\\times}\\, \\greyblue{1}                                                        &\\plus\\\\\n&\\text{T55\\red{J}5} &&\\green{684} &&\\greyblue{3} &&\\text{\\grey{Four of a kind}}        &\\greygreen{684} \\,\\grey{\\times}\\, \\greyblue{3}                                                        &\\plus\\\\\n&\\text{KK677}       &&\\green{28}  &&\\greyblue{2} &&\\text{\\grey{Two pair}} & \\greygreen{28} \\,\\grey{\\times}\\, \\greyblue{2}                                                        &\\plus\\\\\n&\\text{KT\\red{JJ}T} &&\\green{220} &&\\greyblue{5} &&\\text{\\grey{Four of a kind}}          &\\greygreen{220} \\,\\grey{\\times}\\, \\greyblue{5}                                                        &\\plus\\\\\n&\\text{QQQ\\red{J}A} &&\\green{483} &&\\greyblue{4} &&\\text{\\grey{Four of a kind}}   &\\greygreen{483} \\,\\grey{\\times}\\, \\greyblue{4} \\llap{\\lower{0.4pc}\\underline{\\phantom{483 \\times 4}}} &\\\\\n&                   &&            &&             &&                                &\\orange{5905}                                                                                         &\\\\\n\\end{aligned}\n$$\n\n\n```{=html}\n  </div>\n</div>\n```\n\n::::\n:::::\n\n\n<div style=\"clear: both;\"></div> \n\nCreate a new function, `hand_bid_order_wild`, which evaluates the maximum potential strength of a hand by considering all possible substitutions of <b class='fw-bold' style='color: #BE4844;'>J</b> with other cards.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef hand_bid_order_wild(hand_bid):\n    hand, bid = hand_bid\n    return (\n        max(primary_order(hand.replace(\"J\", c)) for c in \"23456789TQKA\"),\n        secondary_order(hand),\n    )\n\n\nhands_bids.sort(key=hand_bid_order_wild)\nanswer2 = sum(i * int(bid) for i, (_, bid) in enumerate(hands_bids, 1))\nprint(answer2)\n#> 5905\n```\n:::\n\n```{=html}\n<div class=\"card border-info mb-3 mx-auto\">\n  <div class=\"card-header text-white bg-info\">Key Points</div>\n  <div class=\"card-body p-1\">\n    <p class=\"card-text\">\n```\n\n\n* Compute the max `primary_order` when replacing <b class='fw-bold' style='color: #BE4844;'>J</b>s with every other card\n* <b class='fw-bold' style='color: #BE4844;'>Jokers</b> only affect the `primary_order` - the `secondary_order` is calculated the same way\n\n```{=html}\n    </p>\n  </div>\n</div>\n```\n::: {.cell}\n\n:::\n\n```{=html}\n<!-- Buttons -->\n<div class=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n\n  <!-- Problem Button -->\n  <a type=\"button\" class=\"btn btn-secondary\" href=\"{{< meta problem_url >}}\" role=\"button\">\n    <i class=\"bi bi-box-arrow-up-right\"></i> Problem\n  </a>\n\n  <!-- Input Button -->\n  <button type=\"button\" class=\"btn btn-secondary\" data-bs-toggle=\"modal\" data-bs-target=\"#inputModal\">\n    <i class=\"bi bi-file-earmark-text\"></i> Input\n  </button>\n\n  <!-- Solution Modal Button -->\n  <button type=\"button\" class=\"btn btn-primary\" data-bs-toggle=\"modal\" data-bs-target=\"#solutionModal\">\n    <i class=\"bi bi-code-slash\"></i> Full Solution\n  </button>\n\n</div>\n\n\n<!-- Input Modal -->\n<div class=\"modal fade\" id=\"inputModal\" tabindex=\"-1\" aria-labelledby=\"inputModalLabel\" aria-hidden=\"true\">\n<div class=\"modal-dialog modal-dialog-scrollable modal-xl\">\n<div class=\"modal-content\">\n<div class=\"modal-header\">\n  <h5 class=\"modal-title\" id=\"inputModalLabel\">{{< meta title >}} Input</h5>\n  <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n</div>\n<div class=\"modal-body\">\n```\n::: {.cell file='input.txt'}\n\n```{.r .cell-code}\n32T3K 765\nT55J5 684\nKK677 28\nKTJJT 220\nQQQJA 483\n```\n:::\n\n```{=html}\n</div>\n<div class=\"modal-footer\">\n</div>\n</div>\n</div>\n</div>\n\n\n<!-- Solution Modal -->\n<div class=\"modal fade\" id=\"solutionModal\" tabindex=\"-1\" aria-labelledby=\"solutionModalLabel\" aria-hidden=\"true\">\n<div class=\"modal-dialog modal-dialog-scrollable modal-xl\">\n<div class=\"modal-content\">\n<div class=\"modal-header\">\n  <h5 class=\"modal-title\" id=\"solutionModalLabel\">{{< meta title >}} Full Solution</h5>\n  <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n</div>\n<div class=\"modal-body\">\n```\n::: {.cell file='solution.py'}\n\n```{.r .cell-code}\nimport collections\n\n\nwith open(\"input.txt\", \"r\") as f:\n    lines = f.read().splitlines()\n\n\ndef primary_order(hand):\n    counts = [count for card, count in collections.Counter(hand).most_common()]\n\n    possible_counts = [\n        [1, 1, 1, 1, 1],  # High card\n        [2, 1, 1, 1],  # One pair\n        [2, 2, 1],  # Two pair\n        [3, 1, 1],  # Three of a kind\n        [3, 2],  # Full house\n        [4, 1],  # Four of a kind\n        [5],  # Five of a kind\n    ]\n\n    return possible_counts.index(counts)\n\n\ndef secondary_order(hand):\n    return tuple(\"23456789TJQKA\".index(card) for card in hand)\n\n\ndef hand_bid_order(hand_bid):\n    hand, bid = hand_bid\n    return primary_order(hand), secondary_order(hand)\n\n\nhands_bids = [line.split(\" \") for line in lines]\nhands_bids.sort(key=hand_bid_order)\nanswer1 = sum(i * int(bid) for i, (_, bid) in enumerate(hands_bids, 1))\nprint(answer1)\n\n\n# Part 2\ndef hand_bid_order_wild(hand_bid):\n    hand, bid = hand_bid\n    return (\n        max(primary_order(hand.replace(\"J\", c)) for c in \"23456789TQKA\"),\n        secondary_order(hand),\n    )\n\n\nhands_bids.sort(key=hand_bid_order_wild)\nanswer2 = sum(i * int(bid) for i, (_, bid) in enumerate(hands_bids, 1))\nprint(answer2)\n```\n:::\n\n```{=html}\n</div>\n<div class=\"modal-footer\">\n<small><i>Execution took 0.01 seconds</i></small>\n</div>\n</div>\n</div>\n</div>\n```\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}