{
  "hash": "59efeb7fcdc89285075ff31f61b9f60a",
  "result": {
    "markdown": "---\ntitle: \"2023 Day 1\"\nsubtitle: \"Trebuchet?!\"\ndate: 2024-01-01\ncategories: [python, easy]\ndraft: false\n# This doesn't work when I put it in _metadata.yml\nknitr:\n  opts_chunk: \n    comment: \"#>\"\n    collapse: true\nproblem_url: \"https://adventofcode.com/2023/day/1\"\ndescription: \"Easy string manipulation.\"\nimage: \"/images/2023-01.svg\"\n---\n\n\nHo ho ho, fellow adventurers!\n\n[Advent of Code day 1]({{< meta problem_url >}}) has catapulted us into a realm of medieval engineering. Day 1 starts off easy with string manipulation.\n\nI narrowly missed the Part 1 leaderboard, landing at rank `119`. Just 4 seconds faster and I'd have cracked the top 100.\n\nFirst, we'll read the input.\n\n::: {.cell}\n\n```{.python .cell-code}\nwith open('input.txt', \"r\") as f:\n    lines = f.readlines()\n```\n:::\n\n\n## Part 1 <small class=\"text-body-secondary\">Trebuchet Trouble</small>\n\n::: {.hidden}\n$$\n% \\underline doesn't support thickness, so I just redraw the underline slightly offset three times\n\\newcommand{\\thickul}[2]{%\n\\large{\\textbf{#2}}%\n\\color{#1}%\n\\llap{\\underline{\\phantom{\\large{\\textbf{#2}}}}}%\n\\llap{\\underline{\\lower{.05ex}\\phantom{\\large{\\textbf{#2}}}}}%\n\\llap{\\underline{\\lower{.1ex}\\phantom{\\large{\\textbf{#2}}}}}%\n\\llap{\\underline{\\lower{.15ex}\\phantom{\\large{\\textbf{#2}}}}}%\n\\color{##55595C}\\normalsize%\n}\n$$\n\n$$\n\\newcommand{\\first}[1]{\\thickul{##2F7E4A}{#1}}\n$$\n\n$$\n\\newcommand{\\last}[1]{\\thickul{##1577A0}{#1}}\n$$\n\n$$\n\\newcommand{\\both}[1]{%\n\\thickul{##2F7E4A}{#1}%\n\\color{##1577A0}%\n\\llap{\\underline{\\lower{1ex}\\phantom{\\large{\\textbf{#1}}}}}%\n\\llap{\\underline{\\lower{1.05ex}\\phantom{\\large{\\textbf{#1}}}}}%\n\\llap{\\underline{\\lower{1.1ex}\\phantom{\\large{\\textbf{#1}}}}}%\n\\llap{\\underline{\\lower{1.15ex}\\phantom{\\large{\\textbf{#1}}}}}%\n\\color{##55595C}\\normalsize%\n}\n$$\n:::\n\n::::: {.p-1}\n\n:::: {.px-4 .float-md-start}\n\n```{=html}\n<div class=\"card border-secondary mb-3 mx-auto\" style=\"width: 20rem;\">\n  <div class=\"card-body p-3 m-1\">\n    <h4 class=\"card-title mt-0\">Task 1</h4>\n    <p class=\"card-text\">\n```\n\n\nCombine the <u class='fw-bold' style='text-decoration-thickness: 2px;color: #2F7E4A;'>first</u> and <u class='fw-bold' style='text-decoration-thickness: 2px;color: #1577A0;'>last</u> digit of each string and get the <b class='fw-bold' style='color: #91672C;'>sum</b>.\n\n<h6 class=\"card-subtitle text-muted\">Example</h6>\n\n$$\n\\begin{aligned}\n\\first{1}\\text{abc}\\last{2} & ~~~~~ & \\color{#969696}12 & \\smash{\\lower{0.5pc}\\color{#969696}+}\\\\\n\\text{pqr}\\first{3}\\text{stu}\\last{8}\\text{vwx} & & \\color{#969696}38 & \\smash{\\lower{0.5pc}\\color{#969696}+}\\\\\n\\text{a}\\first{1}\\text{b2c3d4e}\\last{5}\\text{f} & & \\color{#969696}15 & \\smash{\\lower{0.5pc}\\color{#969696}+}\\\\\n\\text{treb}\\both{7}\\text{uchet} & & \\color{#969696}77\\llap{\\lower{0.4pc}\\underline{\\phantom{\\large{\\textbf{142}}}}} & \\\\\n & & \\color{#91672C}\\large{\\textbf{142}} &\\\\\n\\end{aligned}\n$$\n\n\n\n```{=html}\n    </p>\n  </div>\n</div>\n```\n\n::::\n\nIn part 1, we need to get the trebuchet calibration values by extracting the first and last digits of each line of the input.\n\nThis can be done with regex, but instead I'll iterate through each letter until I find a digit.\n\n:::::\n\n<div style=\"clear: both;\"></div> \n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef first_value(line, m):\n  for i, _ in enumerate(line):\n    for text, val in m.items():\n      if line[i:].startswith(text):\n        return val\n\n\nm = {c: int(c) for c in '123456789'}\n\nanswer1 = sum(10 * first_value(line, m) + first_value(line[::-1], m) for line in lines)\nprint(answer1)\n#> 142\n```\n:::\n\n```{=html}\n<div class=\"card border-info mb-3 mx-auto\">\n  <div class=\"card-header text-white bg-info\">Key Points</div>\n  <div class=\"card-body p-1\">\n    <p class=\"card-text\">\n```\n\n\n* `m` maps digit characters to their integer values\n* `first_value` finds the first substring that starts with any key of `m` and returns its value\n* The string is reversed to find the last value\n\n\n```{=html}\n    </p>\n  </div>\n</div>\n```\n\n\n## Part 2 <small class=\"text-body-secondary\">Spelling Everything with Letters</small>\n\n::::: {.p-1}\n\n:::: {.px-4 .float-md-start}\n\n```{=html}\n<div class=\"card border-secondary mb-3 mx-auto\" style=\"width: 20rem;\">\n  <div class=\"card-body p-3 m-1\">\n    <h4 class=\"card-title mt-0\">Task 2</h4>\n    <p class=\"card-text\">\n```\n\n\nAdapt part 1 to handle digits spelled out with letters.\n\n<h6 class=\"card-subtitle text-muted\">Example</h6>\n\n$$\n\\begin{aligned}\n\\first{two}\\text{1}\\last{nine} & ~~~~~ & \\color{#969696}29 & \\smash{\\lower{0.5pc}\\color{#969696}+}\\\\\n\\first{eight}\\text{wo}\\last{three} & & \\color{#969696}83 & \\smash{\\lower{0.5pc}\\color{#969696}+}\\\\\n\\text{abc}\\first{one}\\text{2}\\last{three}\\text{xyz} & & \\color{#969696}13 & \\smash{\\lower{0.5pc}\\color{#969696}+}\\\\\n\\text{x}\\first{two}\\text{ne3}\\last{four} & & \\color{#969696}24 & \\smash{\\lower{0.5pc}\\color{#969696}+}\\\\\n\\first{4}\\text{nineeightseven}\\last{2} & & \\color{#969696}42 & \\smash{\\lower{0.5pc}\\color{#969696}+}\\\\\n\\text{z}\\first{one}\\text{ight23}\\last{4} & & \\color{#969696}14 & \\smash{\\lower{0.5pc}\\color{#969696}+}\\\\\n\\first{7}\\text{pqrst}\\last{six}\\text{teen} & & \\color{#969696}76\\llap{\\lower{0.4pc}\\underline{\\phantom{\\large{\\textbf{281}}}}} & \\\\\n & & \\color{#91672C}\\large{\\textbf{281}} &\\\\\n\\end{aligned}\n$$\n\n\n\n```{=html}\n    </p>\n  </div>\n</div>\n```\n\n::::\n\nNow, we need to handle digits spelled out with letters. We'll update `m` with these new mappings.\n\nHowever, now that `m` contains keys with more than one letter it won't work when the string is reversed. For example, it needs to match `eno` instead of `one`.\n\nSo we'll create `rev_m` with each key reversed.\n\n:::::\n\n<div style=\"clear: both;\"></div> \n\n\n::: {.cell}\n\n```{.python .cell-code}\nwords = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\nm.update({text: i for i, text in enumerate(words, 1)})\nrev_m = {text[::-1]: value for text, value in m.items()}\n\nanswer2 = sum(10 * first_value(line, m) + first_value(line[::-1], rev_m) for line in lines)\nprint(answer2)\n#> 281\n```\n:::\n\n```{=html}\n<div class=\"card border-info mb-3 mx-auto\">\n  <div class=\"card-header text-white bg-info\">Key Points</div>\n  <div class=\"card-body p-1\">\n    <p class=\"card-text\">\n```\n\n\n* `m` has been extended to include mappings for digits spelled out with letters (e.g. `{'one': 1, 'two': 2, ...}`).\n* `rev_m` is `m` with each key reversed (e.g. `{'eno': 1, 'owt': 2, ...}`)\n* The first digit is extracted using `m`, while the last digit uses `rev_m`\n\n\n```{=html}\n    </p>\n  </div>\n</div>\n```\n::: {.cell}\n\n:::\n\n```{=html}\n<!-- Buttons -->\n<div class=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n\n  <!-- Problem Button -->\n  <a type=\"button\" class=\"btn btn-secondary\" href=\"{{< meta problem_url >}}\" role=\"button\">\n    <i class=\"bi bi-box-arrow-up-right\"></i> Problem\n  </a>\n\n  <!-- Input Button -->\n  <button type=\"button\" class=\"btn btn-secondary\" data-bs-toggle=\"modal\" data-bs-target=\"#inputModal\">\n    <i class=\"bi bi-file-earmark-text\"></i> Input\n  </button>\n\n  <!-- Solution Modal Button -->\n  <button type=\"button\" class=\"btn btn-primary\" data-bs-toggle=\"modal\" data-bs-target=\"#solutionModal\">\n    <i class=\"bi bi-code-slash\"></i> Full Solution\n  </button>\n\n</div>\n\n\n<!-- Input Modal -->\n<div class=\"modal fade\" id=\"inputModal\" tabindex=\"-1\" aria-labelledby=\"inputModalLabel\" aria-hidden=\"true\">\n<div class=\"modal-dialog modal-dialog-scrollable modal-xl\">\n<div class=\"modal-content\">\n<div class=\"modal-header\">\n  <h5 class=\"modal-title\" id=\"inputModalLabel\">{{< meta title >}} Input</h5>\n  <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n</div>\n<div class=\"modal-body\">\n```\n::: {.cell file='input.txt'}\n\n```{.r .cell-code}\n1abc2\npqr1stu8vwx\na1b2c3d4e5f\ntreb1uchet\nfive1eight\neightwo1three\nabcone1threexyz\nxtwone1four\n1nineeightseven7\nzoneight134\n1pqrstsixteen\n```\n:::\n\n```{=html}\n</div>\n<div class=\"modal-footer\">\n</div>\n</div>\n</div>\n</div>\n\n\n<!-- Solution Modal -->\n<div class=\"modal fade\" id=\"solutionModal\" tabindex=\"-1\" aria-labelledby=\"solutionModalLabel\" aria-hidden=\"true\">\n<div class=\"modal-dialog modal-dialog-scrollable modal-xl\">\n<div class=\"modal-content\">\n<div class=\"modal-header\">\n  <h5 class=\"modal-title\" id=\"solutionModalLabel\">{{< meta title >}} Full Solution</h5>\n  <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n</div>\n<div class=\"modal-body\">\n```\n::: {.cell file='solution.py'}\n\n```{.r .cell-code}\nwith open('input.txt', \"r\") as f:\n    lines = f.readlines()\n\n\ndef first_value(line, m):\n  for i, _ in enumerate(line):\n    for text, val in m.items():\n      if line[i:].startswith(text):\n        return val\n\n\nm = {c: int(c) for c in '123456789'}\n\nanswer1 = sum(10 * first_value(line, m) + first_value(line[::-1], m) for line in lines)\nprint(answer1)\n\n\n# Part 2\nwords = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\nm.update({text: i for i, text in enumerate(words, 1)})\nrev_m = {text[::-1]: value for text, value in m.items()}\n\nanswer2 = sum(10 * first_value(line, m) + first_value(line[::-1], rev_m) for line in lines)\nprint(answer2)\n```\n:::\n\n```{=html}\n</div>\n<div class=\"modal-footer\">\n<small><i>Execution took 0.01 seconds</i></small>\n</div>\n</div>\n</div>\n</div>\n```\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}