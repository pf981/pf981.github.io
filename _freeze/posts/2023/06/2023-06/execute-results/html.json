{
  "hash": "8de2c1e28f9e5bb29f7e5030b2875005",
  "result": {
    "markdown": "---\ntitle: \"2023 Day 6\"\nsubtitle: \"Wait For It\"\ndate: 2024-03-30\ncategories: [python, easy, mathematics]\ndraft: false\nknitr:\n  opts_chunk: \n    comment: \"#>\"\n    collapse: true\nproblem_url: \"https://adventofcode.com/2023/day/6\"\ndescription: \"Easy mathematics puzzle.\"\n---\n\n::: {.cell}\n\n:::\n\n\nHo ho ho, fellow adventurers!\n\n[Advent of Code day 6]({{< meta problem_url >}}) presents a problem involving toy boat races, where participants must find optimal strategies to beat existing distance records. \n\nThis puzzle can be solved with some basic maths involving quadratics.\n\nFirst, we'll read the input.\n\n::: {.cell}\n\n```{.python .cell-code}\nwith open('input.txt', \"r\") as f:\n    lines = f.readlines()\n```\n:::\n\n\n## Part 1 <small class=\"text-body-secondary\">Hold to Gold</small>\n\n::::: {.p-0 style=\"min-width: fit-content;\"}\n\n\n```{=html}\n<div class=\"card border-secondary mb-3 mx-auto\">\n  <div class=\"card-body p-3 m-1 pb-0 mb-0\">\n    <h4 class=\"card-title mt-0\">Task 1</h4>\n```\n\n\nYou're given a list of races for toy boats. Each race contains a <b class='fw-bold' style='color: #2F7E4A;'>race duration (ms)</b> and a <b class='fw-bold' style='color: #BE4844;'>current distance record (mm)</b>.\n\nThe distance a toy boat travels in a race is determined by how long you hold the button at the start: each millisecond of holding increases the boat's speed by 1 mm/ms, but also reduces the remaining time for movement. After releasing the button, the boat travels at its accumulated speed for the rest of the race duration.\n\nFind the <b class='fw-bold' style='color: #1577A0;'>number of ways to beat each race's record</b> and get the <b class='fw-bold' style='color: #91672C;'>product</b> of those numbers.\n\n<h6 class=\"card-subtitle text-muted\">Example</h6>\nThe diagram below illustrates the calculations for this example of three races.\n```\nTime:      7  15   30\nDistance:  9  40  200\n```\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Figure Source\"}\nlibrary(tidyverse)\n\n\n\ntext <- \"Time:      7  15   30\nDistance:  9  40  200\"\n\nlines <-\n  str_split_1(text, \"\\n\") |>\n  map(\\(line) str_extract_all(line, \"\\\\d+\", simplify = TRUE)) |>\n  map(as.numeric)\n\ncount_ways <- function(t, d) {\n  upper <- (-t - sqrt(t ^ 2 - 4 * (-1) * (-d))) / 2 * (-1)\n  lower <- (-t + sqrt(t ^ 2 - 4 * (-1) * (-d))) / 2 * (-1)\n  ceiling(upper) - floor(lower) - 1\n}\n\ncreate_plot <- function(race_id, race_duration, record, x_limit = 30) {\n  df <- tibble(wait_time = seq(from = 0, to = race_duration, by = 1)) |>\n    mutate(\n      distance = wait_time * (race_duration - wait_time),\n      fill = case_when(\n        distance > record ~ \"#1577A0\",\n        TRUE ~ \"#969696\"\n      )\n    )\n  \n  ggplot(df, aes(wait_time, distance, fill = I(fill))) +\n    geom_col() +\n    geom_hline(\n      aes(yintercept = record),\n      data = NULL,\n      col = \"#BE4844\",\n      linetype = \"longdash\",\n      size = 0.8\n    ) +\n    scale_x_continuous(\n      breaks = seq(from = 0, to = race_duration, by = 1),\n      labels = \\(break_value) ifelse(break_value == race_duration, glue::glue(\"<b style = 'color:#2F7E4A;'>{break_value}</b>\"), as.character(break_value)),\n      limits = c(-0.5, x_limit),\n      expand = c(0, 0)\n    ) +\n    scale_y_continuous(\n      breaks = c(scales::breaks_pretty(n = 4)(df$distance), record),\n      labels = \\(break_value) ifelse(break_value == record, glue::glue(\"<b style = 'color:#BE4844;'>{break_value}</b>\"), as.character(break_value)),\n      expand = c(0, 0)\n    ) +\n    labs(\n      title = glue::glue(\"Race {race_id}\"),\n      subtitle = glue::glue(\"<b style = 'color:#2F7E4A;'>Race Duration: {race_duration}ms</b>, <b style = 'color:#BE4844;'>Record: {record}mm</b>, <b style = 'color:#1577A0;'>Ways to Beat Record: {count_ways(race_duration, record)}</b>\"),\n      x = \"\",\n      y = \"\"\n    ) +\n    theme_minimal(base_family = \"LM Roman 10\") +\n    theme(\n      panel.grid = element_blank(),\n      axis.line.x.bottom = element_line(color  = \"#CCCCCC\"),\n      axis.ticks.x.bottom = element_line(color  = \"#CCCCCC\"),\n      axis.line.y.left = element_line(color  = \"#CCCCCC\"),\n      axis.ticks.y.left = element_line(color  = \"#CCCCCC\"),\n      axis.text.x = ggtext::element_markdown(),\n      axis.text.y = ggtext::element_markdown(),\n      plot.subtitle = ggtext::element_markdown()\n    )\n}\n\nplots <-\n  pmap(list(seq_along(lines[[1]]), lines[[1]], lines[[2]]), create_plot) |>\n  modify_at(2, \\(p) p + labs(y = \"Distance (mm)\")) |>\n  modify_at(3, \\(p) p + labs(x = \"Button Hold Time (ms)\"))\n\n# Using cowplot or egg with custom font and markdown made the subtitle spacing incorrect\n# Works fine with gridExtra::grid.arrange but the axes aren't aligned\n# cowplot::plot_grid(plotlist = plots, ncol = 1)\n# gridExtra::grid.arrange(plots[[1]], plots[[2]], plots[[3]], ncol = 1)\n# egg::ggarrange(plots[[1]], plots[[2]], plots[[3]], ncol = 1)\n\n# This was the best way to get the font rendering correctly and the axes aligned\nplots |>\n  map(ggplotGrob) %>%\n  do.call(gridExtra::gtable_rbind, .) |>\n  grid::grid.draw()\n```\n\n::: {.cell-output-display}\n![](2023-06_files/figure-html/unnamed-chunk-3-1.svg){width=672}\n:::\n:::\n\n::: {.hidden}\n$$\n\\newcommand{\\blue}[1]{\\color{##1577A0}\\textbf{#1}\\color{##55595C}}\n\\newcommand{\\orange}[1]{\\color{##91672C}\\textbf{#1}\\color{##55595C}}\n\\newcommand{\\red}[1]{\\color{##BE4844}\\textbf{#1}\\color{##55595C}}\n\\newcommand{\\green}[1]{\\color{##2F7E4A}\\textbf{#1}\\color{##55595C}}\n$$\n:::\n$$\\blue{4} * \\blue{8} * \\blue{9} = \\orange{288}$$\n\n\n```{=html}\n  </div>\n</div>\n```\n\n\n:::::\n\n<div style=\"clear: both;\"></div> \n\n\n### Parabolic Pondering\n\nTo calculate the <b class='fw-bold' style='color: #1577A0;'>number of ways to beat the record</b>, we can find the difference between the upper and lower $x$ values of the blue bars.\n\nThese bounds can be found as the intersection of the red line and a frowny parabola which is a function of the button hold time and race duration.\n\n### Algebraic Adventures\n\nGiven:\n\n- $\\green{T}$: Total race time in milliseconds.\n- $\\red{D}$: Record distance that needs to be beaten, in millimeters.\n- $w$: Time in milliseconds for which the button is held down at the start of the race.\n\nThe distance your boat travels when the button is held for $w$ milliseconds with total race time $T$ is:\n$$w \\cdot (T - w)$$\n\nThis matches the current record $D$, when:\n$$D = w \\cdot (T - w)$$\n\nThis can be rewritten as a quadratic equation in terms of $w$:\n$$0 = -w^2 + T \\cdot w - D$$\n\nTo solve for $w$, we use the quadratic formula:\n$$w = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}$$\n\nIn our equation, $a = -1$, $b = T$, and $c = -D$. Thus, substituting these values into the quadratic formula yields:\n$$w = \\frac{-T \\pm \\sqrt{T^2 - 4 \\cdot (-1) \\cdot (-D)}}{2 \\cdot (-1)}$$\n\nSimplifying, we get two values for \\(w\\), which represent the upper and lower bounds of the button holding time that allows the boat to exceed the record distance:\n$$\n\\begin{aligned}\nw_{upper} &= \\frac{-T - \\sqrt{T^2 - 4D}}{2 \\cdot (-1)} \\\\\nw_{lower} &= \\frac{-T + \\sqrt{T^2 - 4D}}{2 \\cdot (-1)} \\\\\n\\end{aligned}\n$$\n\nTo find the number of ways to beat the record, we calculate the number of integers in the open interval $(w_{lower}, w_{upper})$:\n$$\\text{\\blue{Number of ways}} = \\lceil w_{upper} \\rceil - \\lfloor w_{lower} \\rfloor - 1$$\n\nThen simply plug in the numbers for each race and get the <b class='fw-bold' style='color: #91672C;'>product</b> of the resulting values.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport math\nimport re\n\n\ndef count_ways(T, D):\n    upper = (-T - math.sqrt(T ** 2 - 4 * (-1) * (-D))) / 2 * (-1)\n    lower = (-T + math.sqrt(T ** 2 - 4 * (-1) * (-D))) / 2 * (-1)\n    return math.ceil(upper) - math.floor(lower) - 1\n\n\ntimes, distances = [[int(x) for x in re.findall(r'\\d+', line)] for line in lines]\nanswer1 = math.prod(count_ways(time, distance) for time, distance in zip(times, distances))\nprint(answer1)\n#> 288\n```\n:::\n\n```{=html}\n<div class=\"card border-info mb-3 mx-auto\">\n  <div class=\"card-header text-white bg-info\">Key Points</div>\n  <div class=\"card-body p-1\">\n    <p class=\"card-text\">\n```\n\n\n* Find the upper and lower button hold times which beat the record\n* This can be expressed as the intersection between $f(x) = D$ and $f(x) = w \\cdot (T - w)$\n* Compute the product of the differences between the upper and lower bounds\n\n\n```{=html}\n    </p>\n  </div>\n</div>\n```\n\n\n\n## Part 2 <small class=\"text-body-secondary\">Magnitude Multiplied</small>\n\n::::: {.p-0 style=\"min-width: fit-content;\"}\n\n:::: {.pe-4}\n\n```{=html}\n<div class=\"card border-secondary mb-3 mx-auto\">\n  <div class=\"card-body p-3 m-1 pb-0 mb-0\">\n    <h4 class=\"card-title mt-0\">Task 2</h4>\n```\n\n\nRather than multiple races, the <b class='fw-bold' style='color: #2F7E4A;'>race durations</b> and <b class='fw-bold' style='color: #BE4844;'>distance records</b> are each concatenated to form one giant race.\n\nFind the <b class='fw-bold' style='color: #1577A0;'>number of ways to beat this race's record</b>.\n\n<h6 class=\"card-subtitle text-muted\">Example</h6>\n```\nTime:      71530\nDistance:  940200\n```\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Figure Source\"}\n# https://stackoverflow.com/questions/35511951/r-ggplot2-collapse-or-remove-segment-of-y-axis-from-scatter-plot\nsquish_trans <- function(from, to, factor) {\n  trans <- function(x) {\n    if (any(is.na(x))) return(x)\n    isq <- x > from & x < to\n    ito <- x >= to\n    \n    x[isq] <- from + (x[isq] - from)/factor\n    x[ito] <- from + (to - from)/factor + (x[ito] - to)\n    \n    x\n  }\n\n  inv <- function(x) {\n    if (any(is.na(x))) return(x)\n\n    isq <- x > from & x < from + (to - from)/factor\n    ito <- x >= from + (to - from)/factor\n\n    x[isq] <- from + (x[isq] - from) * factor\n    x[ito] <- to + (x[ito] - (from + (to - from)/factor))\n    \n    x\n  }\n  \n  scales::trans_new(\"squished\", trans, inv)\n}\n\ntime_distance <-\n  lines |>\n  map_chr(str_c, collapse = \"\") |>\n  map_int(as.integer)\n\nrace_duration <- time_distance[[1]]\nrecord <- time_distance[[2]]\n\nlower_upper <- function(t, d) {\n  upper <- (-t - sqrt(t ^ 2 - 4 * (-1) * (-d))) / 2 * (-1)\n  lower <- (-t + sqrt(t ^ 2 - 4 * (-1) * (-d))) / 2 * (-1)\n  c(floor(lower), ceiling(upper) - 1)\n}\n\nlower_upper_values <- lower_upper(race_duration, record)\nlower_win <- lower_upper_values[[1]]\nupper_win <- lower_upper_values[[2]]\n\nresolution <- 1000\n\ndf <- tibble(\n  wait_time = unique(c(\n    seq(from = 0, to = lower_win, length.out = resolution),\n    seq(from = lower_win, to = upper_win, length.out = resolution),\n    seq(from = upper_win, to = race_duration, length.out = resolution)\n  )),\n  distance = wait_time * (race_duration - wait_time),\n  is_win = wait_time > lower_win & wait_time < upper_win\n)\n\nggplot(NULL, aes(wait_time, distance)) +\n  geom_area(data = filter(df, wait_time <= lower_win), fill = \"#969696\") +\n  geom_area(data = filter(df, wait_time >= upper_win), fill = \"#969696\") +\n  geom_area(data = filter(df, wait_time > lower_win & wait_time < upper_win), fill = \"#1577A0\") +\n  geom_hline(\n    aes(yintercept = record),\n    data = NULL,\n    col = \"#BE4844\",\n    linetype = \"longdash\",\n    size = 0.8\n  ) +\n  scale_x_continuous(\n    minor_breaks = seq(from = 0, to = race_duration, length.out = 100),\n    labels = \\(break_value) ifelse(break_value == race_duration, glue::glue(\"<b style = 'color:#2F7E4A;'>{scales::label_comma()(break_value)}</b>\"), scales::label_comma()(break_value)),\n    breaks = c(0, 14, seq(from = 10000, to = 60000, by = 10000), 71516, race_duration),\n    expand = c(0, 0),\n    transform = squish_trans(lower_win , upper_win + 1, 1000)\n  ) +\n  scale_y_continuous(\n    breaks = c(0, record, 100000000, 500000000, 1000000000),\n    minor_breaks = seq(from = 0, to = 1279135224, length.out = 50),\n      labels = \\(break_value) ifelse(break_value == record, glue::glue(\"<b style = 'color:#BE4844;'>{scales::label_comma()(break_value)}</b>\"), scales::label_comma()(break_value)),\n    transform = squish_trans(940200, 1279135224, 1000),\n    expand = c(0, 0)\n  ) +\n    labs(\n      title = \"Combined Race\",\n      subtitle = glue::glue(\"<b style = 'color:#2F7E4A;'>Race Duration: {scales::label_comma()(race_duration)}ms</b>, <b style = 'color:#BE4844;'>Record: {scales::label_comma()(record)}mm</b>, <b style = 'color:#1577A0;'>Ways to Beat Record: {scales::label_comma()(count_ways(race_duration, record))}</b>\"),\n      x = \"Button Hold Time (ms)\",\n      y = \"Distance (mm)\"\n    ) +\n    theme_minimal(base_family = \"LM Roman 10\") +\n    theme(\n      axis.line.x.bottom = element_line(color  = \"#CCCCCC\"),\n      axis.ticks.x.bottom = element_line(color  = \"#CCCCCC\"),\n      axis.line.y.left = element_line(color  = \"#CCCCCC\"),\n      axis.ticks.y.left = element_line(color  = \"#CCCCCC\"),\n      axis.text.x = ggtext::element_markdown(),\n      axis.text.y = ggtext::element_markdown(),\n      plot.subtitle = ggtext::element_markdown(),\n      plot.margin = margin(t = 0, r = 40, b = 0, l = 0, unit = \"pt\")\n    )\n```\n\n::: {.cell-output-display}\n![Tails zoomed 1000x for readability](2023-06_files/figure-html/unnamed-chunk-5-1.svg){width=1512}\n:::\n:::\n\n```{=html}\n  </div>\n</div>\n```\n\n::::\n:::::\n\n\n<div style=\"clear: both;\"></div> \n\nJust plug the new numbers into the same formula.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ntime, distance = [int(''.join(str(x) for x in dim)) for dim in [times, distances]]\nanswer2 = count_ways(time, distance)\nprint(answer2)\n#> 71503\n```\n:::\n\n```{=html}\n<div class=\"card border-info mb-3 mx-auto\">\n  <div class=\"card-header text-white bg-info\">Key Points</div>\n  <div class=\"card-body p-1\">\n    <p class=\"card-text\">\n```\n\n\n* Concatenate the <b class='fw-bold' style='color: #2F7E4A;'>race durations</b> and <b class='fw-bold' style='color: #BE4844;'>distance records</b>\n* Compute the <b class='fw-bold' style='color: #1577A0;'>number of ways to beat this race's record</b> using the same formula as part 1\n\n```{=html}\n    </p>\n  </div>\n</div>\n```\n::: {.cell}\n\n:::\n\n```{=html}\n<!-- Buttons -->\n<div class=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n\n  <!-- Problem Button -->\n  <a type=\"button\" class=\"btn btn-secondary\" href=\"{{< meta problem_url >}}\" role=\"button\">\n    <i class=\"bi bi-box-arrow-up-right\"></i> Problem\n  </a>\n\n  <!-- Input Button -->\n  <button type=\"button\" class=\"btn btn-secondary\" data-bs-toggle=\"modal\" data-bs-target=\"#inputModal\">\n    <i class=\"bi bi-file-earmark-text\"></i> Input\n  </button>\n\n  <!-- Solution Modal Button -->\n  <button type=\"button\" class=\"btn btn-primary\" data-bs-toggle=\"modal\" data-bs-target=\"#solutionModal\">\n    <i class=\"bi bi-code-slash\"></i> Full Solution\n  </button>\n\n</div>\n\n\n<!-- Input Modal -->\n<div class=\"modal fade\" id=\"inputModal\" tabindex=\"-1\" aria-labelledby=\"inputModalLabel\" aria-hidden=\"true\">\n<div class=\"modal-dialog modal-dialog-scrollable modal-xl\">\n<div class=\"modal-content\">\n<div class=\"modal-header\">\n  <h5 class=\"modal-title\" id=\"inputModalLabel\">{{< meta title >}} Input</h5>\n  <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n</div>\n<div class=\"modal-body\">\n```\n::: {.cell file='input.txt'}\n\n```{.r .cell-code}\nTime:      7  15   30\nDistance:  9  40  200\n```\n:::\n\n```{=html}\n</div>\n<div class=\"modal-footer\">\n</div>\n</div>\n</div>\n</div>\n\n\n<!-- Solution Modal -->\n<div class=\"modal fade\" id=\"solutionModal\" tabindex=\"-1\" aria-labelledby=\"solutionModalLabel\" aria-hidden=\"true\">\n<div class=\"modal-dialog modal-dialog-scrollable modal-xl\">\n<div class=\"modal-content\">\n<div class=\"modal-header\">\n  <h5 class=\"modal-title\" id=\"solutionModalLabel\">{{< meta title >}} Full Solution</h5>\n  <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n</div>\n<div class=\"modal-body\">\n```\n::: {.cell file='solution.py'}\n\n```{.r .cell-code}\nimport math\nimport re\n\n\nwith open('input.txt', \"r\") as f:\n    lines = f.readlines()\n\n\ndef count_ways(T, D):\n    #     D = w * (T - w)\n    # =>  0 = -w**2 + T*w - D\n    # =>  zeroes at (-T +- sqrt(T**2 - 4*(-1)*(-D))) / 2*(-1)  (quadratic formula)\n    upper = (-T - math.sqrt(T ** 2 - 4 * (-1) * (-D))) / 2 * (-1)\n    lower = (-T + math.sqrt(T ** 2 - 4 * (-1) * (-D))) / 2 * (-1)\n    return math.ceil(upper) - math.floor(lower) - 1\n\n\ntimes, distances = [[int(x) for x in re.findall(r'\\d+', line)] for line in lines]\nanswer1 = math.prod(count_ways(time, distance) for time, distance in zip(times, distances))\nprint(answer1)\n\n\n# Part 2\ntime, distance = [int(''.join(str(x) for x in dim)) for dim in [times, distances]]\nanswer2 = count_ways(time, distance)\nprint(answer2)\n```\n:::\n\n```{=html}\n</div>\n<div class=\"modal-footer\">\n<small><i>Execution took 0.01 seconds</i></small>\n</div>\n</div>\n</div>\n</div>\n```\n\n",
    "supporting": [
      "2023-06_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}