{
  "hash": "dbbdcec976b38bab170902c9ac0fd9f0",
  "result": {
    "markdown": "---\ntitle: \"2023 Day 5\"\nsubtitle: \"If You Give A Seed A Fertilizer\"\ndate: 2024-03-29\ncategories: [python, medium, intervals]\ndraft: false\nknitr:\n  opts_chunk: \n    comment: \"#>\"\n    collapse: true\nproblem_url: \"https://adventofcode.com/2023/day/5\"\ndescription: \"Medium difficulty intervals puzzle.\"\n---\n\n::: {.cell}\n\n:::\n\n\nHo ho ho, fellow adventurers!\n\nIn [Advent of Code day 5]({{< meta problem_url >}}) we're tasked with helping the gardener plant seeds and optimise food production.\n\nThis puzzle introduces us to interval mapping. We're given a series of maps that define how values transition through different categories, like seeds to soil, soil to fertilizer, and so on.  These maps use intervals to describe the conversion process.\n\nFirst, we'll read the input.\n\n::: {.cell}\n\n```{.python .cell-code}\nwith open('input.txt', \"r\") as f:\n    text = f.read()\n```\n:::\n\n\n## Part 1 <small class=\"text-body-secondary\">Marvelous Maps</small>\n\n::::: {.p-0 style=\"min-width: fit-content;\"}\n\n\n```{=html}\n<div class=\"card border-secondary mb-3 mx-auto\">\n  <div class=\"card-body p-3 m-1 pb-0 mb-0\">\n    <h4 class=\"card-title mt-0\">Task 1</h4>\n```\n\n\nA series of <b class='fw-bold' style='color: #3F3F3F;'>mappings</b> describe how values transition from `Seed` to `Soil` to `Fertaliser` to ... to `Location`. Find the <b class='fw-bold' style='color: #91672C;'>minimum location</b> possible from a list of <b class='fw-bold' style='color: #2F7E4A;'>seed values</b>.\n\n<h6 class=\"card-subtitle text-muted\">Example</h6>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Figure Source\"}\nlibrary(tidyverse)\n\n#| fig-width: 5\n#| fig-height: 4\ntext <- \"seeds: 79 14 55 13\n\nseed-to-soil map:\n50 98 2\n52 50 48\n\nsoil-to-fertilizer map:\n0 15 37\n37 52 2\n39 0 15\n\nfertilizer-to-water map:\n49 53 8\n0 11 42\n42 0 7\n57 7 4\n\nwater-to-light map:\n88 18 7\n18 25 70\n\nlight-to-temperature map:\n45 77 23\n81 45 19\n68 64 13\n\ntemperature-to-humidity map:\n0 69 1\n1 0 69\n\nhumidity-to-location map:\n60 56 37\n56 93 4\"\n\nlines <- str_split_1(text, \"\\n\\n\")\n\nseeds <-\n  lines[[1]] |>\n  str_extract_all(\"\\\\d+\", simplify = TRUE) |>\n  as.numeric()\n\nsteps <-\n  lines[-1] |>\n  map(read_lines) |>\n  map(\\(.) {\n    .[-1] |>\n      str_extract_all(\"\\\\d+\", simplify = TRUE) |>\n      as_tibble() |>\n      set_names(c(\"dest_start\", \"source_start\", \"range_len\")) |>\n      mutate(across(everything(), as.numeric))\n  })\n\nget_path <- function(seed) {\n  value <- seed\n  step <- 1\n  path <- list()\n  \n  while (step <= length(steps)) {\n    dest <-\n      steps[[step]] |>\n      mutate(\n        is_valid = value >= source_start & value < source_start + range_len,\n        dest = dest_start + value - source_start\n      ) |>\n      filter(value >= source_start & value < source_start + range_len) |>\n      pull(dest)\n    \n    new_value <- c(dest, value)[1]\n    path <- bind_rows(\n      path,\n      tibble(\n        x = value,\n        xend = new_value,\n        y = 9 - step,\n        yend = y - 1\n      )\n    )\n    value = new_value\n    step <- step + 1\n  }\n  path\n}\n\nplot_seeds <- function(seeds) {\n  paths <-\n  seeds |>\n  map(get_path) |>\n  list_rbind()\n\n  plot_df <-\n    steps |>\n    list_rbind(names_to = \"step\") |>\n    mutate(\n      y = 9 - step,\n      yend = y - 1,\n      x = map2(source_start, range_len, \\(start, range) start + seq_len(range) - 1),\n      xend = map2(dest_start, range_len, \\(start, range) start + seq_len(range) - 1)\n    ) |>\n    unnest()\n  \n  points <-\n    bind_rows(\n      paths |> select(x, y),\n      paths |> select(x = xend, y = yend)\n    ) |>\n    mutate(\n      col = case_when(\n        y == 8 ~ \"#2F7E4A\",\n        y == 1 & x == min(ifelse(y == 1, x, NA), na.rm = TRUE) ~ \"#91672C\",\n        TRUE ~ \"#1577A0\"\n      ),\n      size = ifelse(col == \"#1577A0\", 1.1, 3)\n    )\n  \n  ggplot(plot_df, aes(x, y, xend = xend, yend = yend)) +\n    geom_segment(alpha = 0.5, col = \"#969696\") +\n    geom_segment(data = paths, col = \"#1577A0\") +\n    geom_point(\n      data = points,\n      mapping = aes(x, y, col = I(col), size = I(size), xend = NULL, yend = NULL)\n    ) +\n    scale_y_continuous(\n      breaks = seq_len(8),\n      labels = rev(c(\"Seed\", \"Soil\", \"Fertilizer\", \"Water\", \"Light\", \"Temperature\", \"Humidity\", \"Location\"))\n    ) +\n    theme_void() +\n    theme(\n      axis.text.y = element_text(\n        family = \"LM Roman 10\",\n        margin = margin(r = 0.8 * 11 / 2),\n        hjust = 1\n      )\n    )\n}\n\n\nplot_seeds(seeds)\n```\n\n::: {.cell-output-display}\n![](2023-05_files/figure-html/unnamed-chunk-3-1.svg){width=1512}\n:::\n:::\n\n```{=html}\n  </div>\n</div>\n```\n\n\n:::::\n\n<div style=\"clear: both;\"></div> \n\nPart 1 is straightforward. Iterate through each initial seed. For each seed, go through all the conversion maps (soil, fertilizer, etc.). If the seed value falls within a defined range in a map, we convert it to the corresponding value in the destination category based on the formula `dest_start + (seed - source_start)`. If the seed value doesn't fall within any range in a map, it remains unchanged.\n\nAfter processing all the maps for a seed, we add its final converted value (which corresponds to the location category in the last map) to a list. Finally, we find the minimum value in the locations list.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport re\n\n\nseeds, *maps_list = text.split('\\n\\n')\nseeds = [int(x) for x in re.findall(r'\\d+', seeds)]\nmaps_list = [[[int(x) for x in re.findall(r'\\d+', line)] for line in maps.splitlines()[1:]] for maps in maps_list]\n\nlocations = []\nfor seed in seeds:\n    for maps in maps_list:\n        for dest_start, source_start, range_len in maps:\n            if source_start <= seed < source_start + range_len:\n                seed = dest_start + (seed - source_start)\n                break\n    locations.append(seed)\n\nanswer1 = min(locations)\nprint(answer1)\n#> 35\n```\n:::\n\n```{=html}\n<div class=\"card border-info mb-3 mx-auto\">\n  <div class=\"card-header text-white bg-info\">Key Points</div>\n  <div class=\"card-body p-1\">\n    <p class=\"card-text\">\n```\n\n\n* Map each of the seeds from `Soil` to `Fertaliser` to ... to `Location`\n* At each step find the range which overlaps with the current value and use it to map to the next step\n* If no range matches then the value moves unchanged to the next step\n* Get the smallest `Location`\n\n\n```{=html}\n    </p>\n  </div>\n</div>\n```\n\n\n\n## Part 2 <small class=\"text-body-secondary\">Intersecting Intervals</small>\n\n::::: {.p-0 style=\"min-width: fit-content;\"}\n\n:::: {.pe-4}\n\n```{=html}\n<div class=\"card border-secondary mb-3 mx-auto\">\n  <div class=\"card-body p-3 m-1 pb-0 mb-0\">\n    <h4 class=\"card-title mt-0\">Task 2</h4>\n```\n\n\nGiven <b>ranges</b> of <b class='fw-bold' style='color: #2F7E4A;'>seed values</b> find the <b class='fw-bold' style='color: #91672C;'>minimum location</b> possible.\n\n\n<h6 class=\"card-subtitle text-muted\">Example</h6>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Figure Source\"}\nseeds |>\n  split(ceiling(seq_along(seeds) / 2)) |>\n  map(\\(l) seq(l[1], l[1] + l[2])) |>\n  unlist() |>\n  plot_seeds()\n```\n\n::: {.cell-output-display}\n![](2023-05_files/figure-html/unnamed-chunk-5-1.svg){width=1512}\n:::\n:::\n\n```{=html}\n  </div>\n</div>\n```\n\n::::\n:::::\n\n\n<div style=\"clear: both;\"></div> \n\nAt first, this seems simple. Just update the list of seeds to contain all the seeds in the ranges. Unfortunately, there are billions of seeds so that would take several minutes.\n\nInstead of processing each individual seed within the initial ranges, we work directly with the ranges themselves. As we map these ranges through the conversion steps, we need to identify how they overlap with the ranges defined in each map. In some cases, this might involve splitting the initial range into smaller pieces\n\nOverlap detection and splitting will be simpler if we don't have any gaps. So let's fill in all the holes for all the maps.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef insert_missing_ranges(maps):\n    maps.sort(key=lambda e: e[1])\n    first_val = maps[0][1]\n    if first_val != 0:\n        maps.insert(0, [0, 0, first_val])\n    \n    last_val = maps[-1][1] + maps[-1][2]\n    maps.append([last_val, last_val, 10_000_000_000])\n\n    for i in range(len(maps) - 1):\n        end = maps[i][1] + maps[i][2]\n        start = maps[i+1][1]\n        if end != start:\n            maps.append((end, end, start - end))\n\n    maps.sort(key=lambda e: e[1])\n\nfor maps in maps_list:\n    insert_missing_ranges(maps)\n```\n:::\n\n\nNow, map each of the ranges through all of the steps. If a range overlaps with a mapping range, map the overlapping portion and continue checkking the unmapped portion if there is any left.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef get_smallest_range(i, in_start, in_range_len):\n    if i == len(maps_list):\n        return in_start\n\n    output_ranges = [] # (out_start, out_range_len) pairs\n    for dest_start, source_start, range_len in maps_list[i]:\n        # No overlap\n        if source_start + range_len <= in_start or source_start >= in_start + in_range_len:\n            continue\n        \n        # Assume overlap\n        if source_start == in_start: # Source starts at input start\n            overlap_start = in_start\n            overlap_range_len = min(range_len, in_range_len)\n        elif source_start < in_start: # Source starts to left\n            overlap_start = in_start\n            overlap_end = min(source_start + range_len, in_start + in_range_len)\n            overlap_range_len = overlap_end - in_start\n        else: # Source starts to right of input start\n            overlap_start = source_start\n            overlap_end = min(source_start + range_len, in_start + in_range_len)\n            overlap_range_len = overlap_end - source_start\n\n        overlap_start = overlap_start - source_start +  dest_start\n        output_ranges.append((overlap_start, overlap_range_len))\n\n    outputs = [get_smallest_range(i + 1, out_start, out_range_len) for out_start, out_range_len in output_ranges]\n    return min(outputs) if outputs else float('inf')\n\nstarting_ranges = [seeds[i:i+2] for i in range(0, len(seeds), 2)]\nanswer2 = min(get_smallest_range(0, in_start, in_range_len) for in_start, in_range_len in starting_ranges)\nprint(answer2)\n#> 46\n```\n:::\n\n```{=html}\n<div class=\"card border-info mb-3 mx-auto\">\n  <div class=\"card-header text-white bg-info\">Key Points</div>\n  <div class=\"card-body p-1\">\n    <p class=\"card-text\">\n```\n\n\n* Don't iterate over all possible seeds as that would take minutes\n* Instead, maintain contiguous ranges at each step\n* `get_smallest_range` will find the smallest location accessible in the `i`th step for the given range at that step\n* If the current range overlaps with a mapping range, map the overlapping portion and check the portion that doesn't overlap\n* `insert_missing_ranges` ensures that the range `0` to `10 billion` is fully covered by filling in missing ranges\n* Guaranteeing no holes makes the overlap detection and splitting simpler\n\n\n```{=html}\n    </p>\n  </div>\n</div>\n```\n::: {.cell}\n\n:::\n\n```{=html}\n<!-- Buttons -->\n<div class=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n\n  <!-- Problem Button -->\n  <a type=\"button\" class=\"btn btn-secondary\" href=\"{{< meta problem_url >}}\" role=\"button\">\n    <i class=\"bi bi-box-arrow-up-right\"></i> Problem\n  </a>\n\n  <!-- Input Button -->\n  <button type=\"button\" class=\"btn btn-secondary\" data-bs-toggle=\"modal\" data-bs-target=\"#inputModal\">\n    <i class=\"bi bi-file-earmark-text\"></i> Input\n  </button>\n\n  <!-- Solution Modal Button -->\n  <button type=\"button\" class=\"btn btn-primary\" data-bs-toggle=\"modal\" data-bs-target=\"#solutionModal\">\n    <i class=\"bi bi-code-slash\"></i> Full Solution\n  </button>\n\n</div>\n\n\n<!-- Input Modal -->\n<div class=\"modal fade\" id=\"inputModal\" tabindex=\"-1\" aria-labelledby=\"inputModalLabel\" aria-hidden=\"true\">\n<div class=\"modal-dialog modal-dialog-scrollable modal-xl\">\n<div class=\"modal-content\">\n<div class=\"modal-header\">\n  <h5 class=\"modal-title\" id=\"inputModalLabel\">{{< meta title >}} Input</h5>\n  <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n</div>\n<div class=\"modal-body\">\n```\n::: {.cell file='input.txt'}\n\n```{.r .cell-code}\nseeds: 79 14 55 13\n\nseed-to-soil map:\n50 98 2\n52 50 48\n\nsoil-to-fertilizer map:\n0 15 37\n37 52 2\n39 0 15\n\nfertilizer-to-water map:\n49 53 8\n0 11 42\n42 0 7\n57 7 4\n\nwater-to-light map:\n88 18 7\n18 25 70\n\nlight-to-temperature map:\n45 77 23\n81 45 19\n68 64 13\n\ntemperature-to-humidity map:\n0 69 1\n1 0 69\n\nhumidity-to-location map:\n60 56 37\n56 93 4\n```\n:::\n\n```{=html}\n</div>\n<div class=\"modal-footer\">\n</div>\n</div>\n</div>\n</div>\n\n\n<!-- Solution Modal -->\n<div class=\"modal fade\" id=\"solutionModal\" tabindex=\"-1\" aria-labelledby=\"solutionModalLabel\" aria-hidden=\"true\">\n<div class=\"modal-dialog modal-dialog-scrollable modal-xl\">\n<div class=\"modal-content\">\n<div class=\"modal-header\">\n  <h5 class=\"modal-title\" id=\"solutionModalLabel\">{{< meta title >}} Full Solution</h5>\n  <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n</div>\n<div class=\"modal-body\">\n```\n::: {.cell file='solution.py'}\n\n```{.r .cell-code}\nimport re\n\n\nwith open('input.txt', \"r\") as f:\n    text = f.read()\n\n\nseeds, *maps_list = text.split('\\n\\n')\nseeds = [int(x) for x in re.findall(r'\\d+', seeds)]\nmaps_list = [[[int(x) for x in re.findall(r'\\d+', line)] for line in maps.splitlines()[1:]] for maps in maps_list]\n\nlocations = []\nfor seed in seeds:\n    for maps in maps_list:\n        for dest_start, source_start, range_len in maps:\n            if source_start <= seed < source_start + range_len:\n                seed = dest_start + (seed - source_start)\n                break\n    locations.append(seed)\n\nanswer1 = min(locations)\nprint(answer1)\n\n\n# Part 2\ndef insert_missing_ranges(maps):\n    maps.sort(key=lambda e: e[1])\n    first_val = maps[0][1]\n    if first_val != 0:\n        maps.insert(0, [0, 0, first_val])\n    \n    last_val = maps[-1][1] + maps[-1][2]\n    maps.append([last_val, last_val, 10_000_000_000])\n\n    for i in range(len(maps) - 1):\n        end = maps[i][1] + maps[i][2]\n        start = maps[i+1][1]\n        if end != start:\n            maps.append((end, end, start - end))\n\n    maps.sort(key=lambda e: e[1])\n\n\ndef get_smallest_range(i, in_start, in_range_len):\n    if i == len(maps_list):\n        return in_start\n\n    output_ranges = [] # (out_start, out_range_len) pairs\n    for dest_start, source_start, range_len in maps_list[i]:\n        # No overlap\n        if source_start + range_len <= in_start or source_start >= in_start + in_range_len:\n            continue\n        \n        # Assume overlap\n        if source_start == in_start: # Source starts at input start\n            overlap_start = in_start\n            overlap_range_len = min(range_len, in_range_len)\n        elif source_start < in_start: # Source starts to left\n            overlap_start = in_start\n            overlap_end = min(source_start + range_len, in_start + in_range_len)\n            overlap_range_len = overlap_end - in_start\n        else: # Source starts to right of input start\n            overlap_start = source_start\n            overlap_end = min(source_start + range_len, in_start + in_range_len)\n            overlap_range_len = overlap_end - source_start\n\n        overlap_start = overlap_start - source_start +  dest_start\n        output_ranges.append((overlap_start, overlap_range_len))\n\n    outputs = [get_smallest_range(i + 1, out_start, out_range_len) for out_start, out_range_len in output_ranges]\n    return min(outputs) if outputs else float('inf')\n\n\nfor maps in maps_list:\n    insert_missing_ranges(maps)\n\nstarting_ranges = [seeds[i:i+2] for i in range(0, len(seeds), 2)]\nanswer2 = min(get_smallest_range(0, in_start, in_range_len) for in_start, in_range_len in starting_ranges)\nprint(answer2)\n```\n:::\n\n```{=html}\n</div>\n<div class=\"modal-footer\">\n<small><i>Execution took 0.01 seconds</i></small>\n</div>\n</div>\n</div>\n</div>\n```\n\n",
    "supporting": [
      "2023-05_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}