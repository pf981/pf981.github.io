[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Paul Foster’s Advent of Code Blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Paul Foster - Advent of Code",
    "section": "",
    "text": "2023 Day 7\n\n\nCamel Cards\n\n\n\n\npython\n\n\neasy\n\n\n\n\nEasy puzzle evaluating simplified poker hands.\n\n\n\n\n\n\nApr 3, 2024\n\n\nPaul Foster\n\n\n\n\n\n\n  \n\n\n\n\n2023 Day 6\n\n\nWait For It\n\n\n\n\npython\n\n\neasy\n\n\nmathematics\n\n\n\n\nEasy mathematics puzzle.\n\n\n\n\n\n\nMar 30, 2024\n\n\nPaul Foster\n\n\n\n\n\n\n  \n\n\n\n\n2023 Day 5\n\n\nIf You Give A Seed A Fertilizer\n\n\n\n\npython\n\n\nmedium\n\n\nintervals\n\n\n\n\nMedium difficulty intervals puzzle.\n\n\n\n\n\n\nMar 29, 2024\n\n\nPaul Foster\n\n\n\n\n\n\n  \n\n\n\n\n2023 Day 4\n\n\nScratchcards\n\n\n\n\npython\n\n\nmedium\n\n\ndynamic programming\n\n\n\n\nMedium difficulty dynamic programming puzzle.\n\n\n\n\n\n\nJan 6, 2024\n\n\nPaul Foster\n\n\n\n\n\n\n  \n\n\n\n\n2023 Day 3\n\n\nGear Ratios\n\n\n\n\npython\n\n\nmedium\n\n\n\n\nMedium difficulty grid puzzle involving parsing numbers, getting adjacencies, and handling duplicates.\n\n\n\n\n\n\nJan 4, 2024\n\n\nPaul Foster\n\n\n\n\n\n\n  \n\n\n\n\n2023 Day 2\n\n\nCube Conundrum\n\n\n\n\npython\n\n\neasy\n\n\n\n\nEasy puzzle with basic regex and arithmetic.\n\n\n\n\n\n\nJan 3, 2024\n\n\nPaul Foster\n\n\n\n\n\n\n  \n\n\n\n\n2023 Day 1\n\n\nTrebuchet?!\n\n\n\n\npython\n\n\neasy\n\n\n\n\nEasy string manipulation.\n\n\n\n\n\n\nJan 1, 2024\n\n\nPaul Foster\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "latex_test.html",
    "href": "latex_test.html",
    "title": "latex_test",
    "section": "",
    "text": "\\[\n\\newcommand{\\cul}[2]{\\color{#1}\\Huge{\\underline{{\\color{##55595C}{\\normalsize\\textbf{#2}}}}}\\color{##55595C}\\normalsize}}\n\\]\n\\[\n\\newcommand{\\first}[1]{\\cul{##2F7E4A}{#1}}\n\\]\n\\[\n\\newcommand{\\last}[1]{\\cul{##1577A0}{#1}}\n\\]\n\\[\n\\newcommand{\\both}[1]{\\Huge\\color{##1577A0}\\underline{\\color{##2F7E4A}\\underline{\\color{##55595C}\\normalsize{\\textbf{#1}}}}\\color{##55595C}\\normalsize}\n\\]\n\n\n\n\\[\n\\begin{aligned}\n\\Huge\\color{#2F7E4A}\\underline{\\color{#1577A0}\\underline{\\color{#55595C}\\normalsize{hello}}}\n\\end{aligned}\n\\]\n\\[\n\\begin{aligned}\n\\text{pre}\\first{thisisfirst}\\text{post} \\\\\n\\text{pre}\\last{thisislast}\\text{post} \\\\\n\\text{pre}\\both{thisisboth}\\text{post} \\\\\n\\end{aligned}\n\\]\n\n\n\\[\n\\newcommand{\\first}[1]{\\color{##2F7E4A}\\underline{{\\color{black}#1}}\\color{black}}\n\\]\n\n\n\\[\n\\newcommand{\\cul}[2][black]{\\color{#1}\\underline{{\\color{black}#2}}\\color{black}}\n\\]\n\\[\n\\begin{aligned}\n\\text{\\textcolor{#2F7E4A}{\\textbf{1}}abc\\textcolor{#1577A0}{\\textbf{2}}} \\\\\n\\text{pqr\\textcolor{#2F7E4A}{\\textbf{3}}stu\\textcolor{#1577A0}{\\textbf{8}}vwx} \\\\\n\\text{a\\textcolor{#2F7E4A}{\\textbf{1}}b2c3d4e\\textcolor{#1577A0}{\\textbf{5}}f} \\\\\n\\text{treb\\textcolor{#2F7E4A}{\\textbf{7}}\\textcolor{#1577A0}{\\textbf{}}uchet} \\\\\n\\end{aligned}\n\\]\n\n\\[\n\\begin{aligned}\n\\text{pre}\\first{thisisfirst}\\text{post}\n\\end{aligned}\n\\]\n\\[\n\\begin{aligned}\n\\huge{\\underline{\\small{FONTTEST}}}\n\\end{aligned}\n\\]\n\\[\n\\begin{aligned}\n\\huge{\\underline{\\text{\\small{FONTTEST}}}}\n\\end{aligned}\n\\]\n\\[\n\\begin{aligned}\n\\text{abc}\\huge{\\underline{\\text{\\small{abc}}}}\\text{abc}\n\\end{aligned}\n\\]\n\\[\n\\begin{aligned}\n\\text{abc}\\huge{\\underline{\\text{\\normalsize{abc}}}}\\text{abc}\n\\end{aligned}\n\\]\n\\[\n\\begin{aligned}\n\\text{\\normalsize{normal}\\huge{huge}\\normalsize{normalagain}whataboutthis}\n\\end{aligned}\n\\]\n\\[\n\\begin{aligned}\n\\cul[#2F7E4A]{\\textbf{1}}\n\\end{aligned}\n\\]\n\\[\n\\cul[red]{\\cul[blue]{TEST}}\n\\]\n\n\\[\n\\foo2\n\\]\n\\[\n\\foo\n\\]\n\\[\n\\def\\mathunderline#1#2{\\color{#1}\\underline{{\\color{black}#2}}\\color{black}}\n\\begin{aligned}\n\\[ f(x)=\\int_1^\\infty\\mathunderline{red}{x^2+\\frac12\\ln(x)}\\mathrm{d}x\n       = \\mathunderline{blue}{\\int_1^\\infty x^2} \\mathrm{d}x\n       + \\mathunderline{green}{\\int_1^\\infty\\frac12\\ln(x)} \\mathrm{d}x \\]\n\\end{aligned}\n\\]\n\\[\n\\begin{aligned}\n\\text{\\textcolor{#2F7E4A}{\\textbf{1}}abc\\textcolor{#1577A0}{\\textbf{2}}} \\\\\n\\text{pqr\\textcolor{#2F7E4A}{\\textbf{3}}stu\\textcolor{#1577A0}{\\textbf{8}}vwx} \\\\\n\\text{a\\textcolor{#2F7E4A}{\\textbf{1}}b2c3d4e\\textcolor{#1577A0}{\\textbf{5}}f} \\\\\n\\text{treb\\textcolor{#2F7E4A}{\\textbf{7}}\\textcolor{#1577A0}{\\textbf{}}uchet} \\\\\n\\end{aligned}\n\\] \\[\n\\begin{aligned}\n& \\textcolor{#4BBF73}{hello} \\\\\n& \\textcolor{#1F9BCF}{hello} \\\\\n& \\textcolor{#F0AD4E}{hello} \\\\\n& \\textcolor{#D9534F}{hello} \\\\\n\\end{aligned}\n\\] Contrast improved \\[\n\\begin{aligned}\n& \\textcolor{#2F7E4A}{green} \\\\\n& \\textcolor{#1577A0}{blue} \\\\\n& \\textcolor{#91672C}{orange} \\\\\n& \\textcolor{#BE4844}{red} \\\\\n\\end{aligned}\n\\] \\[\n\\usepackage{soul}\n\\begin{aligned}\n\\setulcolor{red}\\ul{test}\n\\underline{text} \\\\\n\\underline{\\underline{text}}\n\\end{aligned}\n\\]\n\\[\n\\begin{aligned}\n\\color{blue}\\underline{{\\color{black}hello}}\\color{black}\n\\end{aligned}\n\\]"
  },
  {
    "objectID": "posts/2023/01/2023-01.html",
    "href": "posts/2023/01/2023-01.html",
    "title": "2023 Day 1",
    "section": "",
    "text": "Ho ho ho, fellow adventurers!\nAdvent of Code day 1 has catapulted us into a realm of medieval engineering. Day 1 starts off easy with string manipulation.\nI narrowly missed the Part 1 leaderboard, landing at rank 119. Just 4 seconds faster and I’d have cracked the top 100.\nFirst, we’ll read the input.\nwith open('input.txt', \"r\") as f:\n    lines = f.readlines()"
  },
  {
    "objectID": "posts/2023/01/2023-01.html#part-1-trebuchet-trouble",
    "href": "posts/2023/01/2023-01.html#part-1-trebuchet-trouble",
    "title": "2023 Day 1",
    "section": "Part 1 Trebuchet Trouble",
    "text": "Part 1 Trebuchet Trouble\n\n\\[\n% \\underline doesn't support thickness, so I just redraw the underline slightly offset three times\n\\newcommand{\\thickul}[2]{%\n\\large{\\textbf{#2}}%\n\\color{#1}%\n\\llap{\\underline{\\phantom{\\large{\\textbf{#2}}}}}%\n\\llap{\\underline{\\lower{.05ex}\\phantom{\\large{\\textbf{#2}}}}}%\n\\llap{\\underline{\\lower{.1ex}\\phantom{\\large{\\textbf{#2}}}}}%\n\\llap{\\underline{\\lower{.15ex}\\phantom{\\large{\\textbf{#2}}}}}%\n\\color{##55595C}\\normalsize%\n}\n\\]\n\\[\n\\newcommand{\\first}[1]{\\thickul{##2F7E4A}{#1}}\n\\]\n\\[\n\\newcommand{\\last}[1]{\\thickul{##1577A0}{#1}}\n\\]\n\\[\n\\newcommand{\\both}[1]{%\n\\thickul{##2F7E4A}{#1}%\n\\color{##1577A0}%\n\\llap{\\underline{\\lower{1ex}\\phantom{\\large{\\textbf{#1}}}}}%\n\\llap{\\underline{\\lower{1.05ex}\\phantom{\\large{\\textbf{#1}}}}}%\n\\llap{\\underline{\\lower{1.1ex}\\phantom{\\large{\\textbf{#1}}}}}%\n\\llap{\\underline{\\lower{1.15ex}\\phantom{\\large{\\textbf{#1}}}}}%\n\\color{##55595C}\\normalsize%\n}\n\\]\n\n\n\n\n  \n    Task 1\n    \nCombine the first and last digit of each string and get the sum.\n\nExample\n\n\\[\n\\begin{aligned}\n\\first{1}\\text{abc}\\last{2} & ~~~~~ & \\color{#969696}12 & \\smash{\\lower{0.5pc}\\color{#969696}+}\\\\\n\\text{pqr}\\first{3}\\text{stu}\\last{8}\\text{vwx} & & \\color{#969696}38 & \\smash{\\lower{0.5pc}\\color{#969696}+}\\\\\n\\text{a}\\first{1}\\text{b2c3d4e}\\last{5}\\text{f} & & \\color{#969696}15 & \\smash{\\lower{0.5pc}\\color{#969696}+}\\\\\n\\text{treb}\\both{7}\\text{uchet} & & \\color{#969696}77\\llap{\\lower{0.4pc}\\underline{\\phantom{\\large{\\textbf{142}}}}} & \\\\\n& & \\color{#91672C}\\large{\\textbf{142}} &\\\\\n\\end{aligned}\n\\]\n    \n  \n\n\nIn part 1, we need to get the trebuchet calibration values by extracting the first and last digits of each line of the input.\nThis can be done with regex, but instead I’ll iterate through each letter until I find a digit.\n\n\n\n\n\ndef first_value(line, m):\n  for i, _ in enumerate(line):\n    for text, val in m.items():\n      if line[i:].startswith(text):\n        return val\n\n\nm = {c: int(c) for c in '123456789'}\n\nanswer1 = sum(10 * first_value(line, m) + first_value(line[::-1], m) for line in lines)\nprint(answer1)\n#&gt; 55712\n\n\n  Key Points\n  \n    \n\nm maps digit characters to their integer values\nfirst_value finds the first substring that starts with any key of m and returns its value\nThe string is reversed to find the last value"
  },
  {
    "objectID": "posts/2023/01/2023-01.html#part-2-spelling-everything-with-letters",
    "href": "posts/2023/01/2023-01.html#part-2-spelling-everything-with-letters",
    "title": "2023 Day 1",
    "section": "Part 2 Spelling Everything with Letters",
    "text": "Part 2 Spelling Everything with Letters\n\n\n\n  \n    Task 2\n    \nAdapt part 1 to handle digits spelled out with letters.\n\nExample\n\n\\[\n\\begin{aligned}\n\\first{two}\\text{1}\\last{nine} & ~~~~~ & \\color{#969696}29 & \\smash{\\lower{0.5pc}\\color{#969696}+}\\\\\n\\first{eight}\\text{wo}\\last{three} & & \\color{#969696}83 & \\smash{\\lower{0.5pc}\\color{#969696}+}\\\\\n\\text{abc}\\first{one}\\text{2}\\last{three}\\text{xyz} & & \\color{#969696}13 & \\smash{\\lower{0.5pc}\\color{#969696}+}\\\\\n\\text{x}\\first{two}\\text{ne3}\\last{four} & & \\color{#969696}24 & \\smash{\\lower{0.5pc}\\color{#969696}+}\\\\\n\\first{4}\\text{nineeightseven}\\last{2} & & \\color{#969696}42 & \\smash{\\lower{0.5pc}\\color{#969696}+}\\\\\n\\text{z}\\first{one}\\text{ight23}\\last{4} & & \\color{#969696}14 & \\smash{\\lower{0.5pc}\\color{#969696}+}\\\\\n\\first{7}\\text{pqrst}\\last{six}\\text{teen} & & \\color{#969696}76\\llap{\\lower{0.4pc}\\underline{\\phantom{\\large{\\textbf{281}}}}} & \\\\\n& & \\color{#91672C}\\large{\\textbf{281}} &\\\\\n\\end{aligned}\n\\]\n    \n  \n\n\nNow, we need to handle digits spelled out with letters. We’ll update m with these new mappings.\nHowever, now that m contains keys with more than one letter it won’t work when the string is reversed. For example, it needs to match eno instead of one.\nSo we’ll create rev_m with each key reversed.\n\n\n\n\n\nwords = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\nm.update({text: i for i, text in enumerate(words, 1)})\nrev_m = {text[::-1]: value for text, value in m.items()}\n\nanswer2 = sum(10 * first_value(line, m) + first_value(line[::-1], rev_m) for line in lines)\nprint(answer2)\n#&gt; 55413\n\n\n  Key Points\n  \n    \n\nm has been extended to include mappings for digits spelled out with letters (e.g. {'one': 1, 'two': 2, ...}).\nrev_m is m with each key reversed (e.g. {'eno': 1, 'owt': 2, ...})\nThe first digit is extracted using m, while the last digit uses rev_m\n\n    \n  \n\n\n\n\n  \n  \n     Problem\n  \n\n  \n  \n     Input\n  \n\n  \n  \n     Full Solution\n  \n\n\n\n\n\n\n\n\n\n  2023 Day 1 Input\n  \n\n\n\n51591twosix4dhsxvgghxq\n425nine\nllvmhjtr8nbbhrfone\nlpbjvpbtdfvtxtdvkpjs7qrvddkzmjtlqtg\n3sixnineseven\nrfmsqbkms7three\n33291six\noneonevstpxxrjpnine7six\n75sevennine14mzqljsjfbb7two\nthree6two9jckvk\nzprj8394threehczfkncntk\nmkqtlrzmzfsix2ccqsnnxtwo4sevenxp9\ntdszrfzspthree2ttzseven5seven\ntwo3fiveckrsjr\nfour14three7\n4fdkcclmxmxsevenfiver\n5sjnnfivefourzxxfpfivenine7five\n77sixfive\ntwofivecrkvmpcpvzddvzcmjhjlthree8fcrrninefive\nfivetwo562five\n2ninekvdbfnmjmd6ninentpktmgseven92\n2twonine\n5fivesprm4ndqzbqnjqx\n7jfq9\n1hgnkmx91\n2jcrmhfvntc3lqnine4five4\nzvqmpjrpninejhqrnineggghcrjfd3onefive\n11three64qjjhqdnonetwo\nrmvzjnbonetwo6\neightfive698threenine9\n8eighttrfngsklrkfivefourninefourqhclfcp\n1z\nfivegfslvcvtvs4\nsfq1twosevendbjq2nine4rzmdpmgcx\nseven816one8jmcqqhfnthree\ntwor4325rsl5\nfour2vqhninexqqhlfhfouronejks1\n7hjmmxhdnine8\n1eight3hqgshtb147\nfour6sixeightone\ntwomvkjxbqxzhnnmjxstkgfhzzdsc1fivefivesix\n3slhhsfnkhhlxtvqfrhvdzzkvlzcnlxgd4ninechp\nmeightseven8onegghfsfeight84\nkmxckzqdfeightsqfivefivetfg77\ndc8\nmktwonecvqsxhqrjfninethreethreedkllgfxrxrffzvdbqdj2c3\n8shsxjmqmb3kpvj485nd\nrbdlrxsmjvnkttnpfour6twoseven\nbkt1seven\nthreehkjhm9\nthreeeight8sevennine7nlx\njmvj4ctqpccsixseven\n4fourmtwoxcsvlvlhctdpxns\neight7three4729eightbslrgrhs\n26seven1\n7ffseven\n9rsgmlgcsevenxkmsd17three\nsnzn6htcqxqj7bf\nppr7six73znmtmgrzrp9\n61mj7dvddfseveneight\nthreevfive3fourseven3\nxznsxcxsbggvctqqb82two\nfive4none\nfoursevenrl12threegpbvdsspkrfour\n9sevensixthreerftbxgthree\n6fph\n996three\n64pkndfphqrglbgcpseven\n72749twoeightcpqfzqcrns\nxnzzhvssixtrlfftrjr5two9threenine\nfour8hzkkrpb71glpqsnkvcb\nsixsix1\n9lfdtwo4sevenjhv911\nchxjljdh8jztwo61three\ntwothree11\nhft2dmntjgzg1\nrtfckbnqxfdldgttbltdr33kqhxhkeight4\nninefourseven4nine5\n25fsmkbsevenpzhgdhnxnbsix3\nbd1frglljngg8one1\n34six\n96cpcmztffqdrfrfslfour4lpnbmrfm\npsxrlseven2zmkvrhckqcxdl91\nninexkfjcjkjb8three4xeighttqsrgbmfdt\n2threesixeight1\nggxzf3gkdvsqxggltxdhdbhm5\nsixtwo89six\neightnine3\nthreemdrhqpone6\nsncpmhtwozsfpcpxgq9three\nrtwone37three7xhzlckfclbltdkrgqbcrhpqzg\n68sixbgsz35\nkdeightwo69\nfour7bfq3four\nsixone3fivedgmrrvjqrr7three7seven\nsixthree6\nonethree3onevdtlkrfour4\neight4seven5cszgblfseven\ntwo8ddmjtg\nfivejnvrdmghnvrmrjeightnnxpv8\n2threezvklqkpml\ntwo76cdfrmfckbjc\nzqxpg42sixeightfour76\n3eightvqpxzsn2bnbkrfb49\neight85five\nsixngs8xjseight4\n296pfsgnlpbmngzlrrldznmrj1mjgvtxkr\nsix4bvrdgxh\n34eight56eightsixhphnbgscfb\ntwo4twosixthreeggfdzlbkxxqmtxtczdfj\nfour4tqrjxxcrztwoeight\none73zpfhjvjh2\n7eight35phcfcdzhhpzn49eight\nzqcmlcqfneightsixrpmmhcrssk6dclcpmhzqhrbcnkxjdfjvrf\n1threegkhpq7nfrksvm69nxpvgvthfzoneighttc\ngtjsevensixsixb9\nnine73nine\ncbhsddcmzmdv2bnnffour\n85hhqkqmv\nsix2jfxfgpg9\nfiveeightskrn1\nkhvcf3five8qj5\nsevenfive7ptb\ntscc9psz3gtnsnksn\nxzlh7zfivefivejgr\none4nine8three3\n2kjkbbvftktkvpbp8gkcnrrkr6r\n565three718five\ntwojjgcfz3fiveoneftvnldxdhr2\n13three\nphbvxsnnineksttklfljm85\ntvzpbgzhmbnine1eightbpjtkflllg\n7five3\n2623four\nnvfchhrbcone1nine\nmjv5vtmlmsfcfmt65five1\n7one2\n4six4\ndlbzctlxpjxxqk96pmdgdfblbfjnsxjmkoneqgeight\nseven4nzvxldvzvjpzlzxb4eightnine6\n2vzblzhrxnc8qtgvxxzgkeightblqfftjtnxrbpvlsgvd\nthfdzxfqcthqfcnrt2\nqxfpbbnfczfourh4twodjrhp\n4m2fivelklgfgr6three\n4tsbs74\none6twomzfncms2lrgzgsspkjmcgqxp\nsix5fourgzrhbvdnzzllh\n9seventwothree8sevenfive4two\n7eightdprzmjvsevenfourfiveeight\ntwosjzhsb29lqzkjbtshp5\n8four6two\nbklkfctjb84one\nsevensevenfive7seven6\nvklhzsjz5fiveeight5\nfourmlthreecjspnchzrthree8tb\n7gsfvptnpcl2n82\n58mdllbtjkkzcmdgzbeightbzqmfour\n2vtlzkzlsfive92vbpnq\njbcgqvr28ksbphtfourfourfksnxjhtb\n21ljfcmgtmdqfive\nthreejhhstcxfive64sixeightthree\n7tqpqngnrmnnxt3pjbcqjmktvj\nfmqqc9twoone15four\n5six13dnkxtqrxrh\n8xxpnpfivethreeh5ktnpctlqrgtl\n9hgmlnzsbmbsbjbg9\n8mnlsqkpqp18jkftxzfcklsgkvjr4threergdbrrzbb\neightglhhjsfl819lkzlxjvcshdtjhxvjs8\ngshmsmzfbcrhvnfnpppmmfmngcv2snrponeqgxvtx\n9sprkdkk3cpjzlzphfdbhczbpssix\nnine8954five\noneonettsixckhgprszjckhx2\nseveneightgnhzhm9pkthree3three\n5mjkpk\nsevenfour832five\nfivellhglxm2twoneq\nfqtfqdgeight2lfklmhrnfive\nflqdfkmlfthdvzncvbfour7gq\n793\nfourninetwojrfp4three5three5\nsnnnjlhcnine84eightjthbkgtslhp4skglpzhz\nmnxfgpg862ninefive26\nbmdtbfjonegprzlxqlkb4mcscbqnv\nnine9fourfourfive1fivethree2\neightfqrqz8\nfourpkd1bpxczlzthreecptvjlgzfmtqnr\n25onejrksrlccgrqtkcsmzccnine\n5nine26three88\n25four299fourfour\nhlrbll8vnhjlfjrkd\nffourthreefourkgjbsnbc6\neight8mpqpsgxthreegmxrhqkqbhgstcz\nthree82five1\n4dxvzg29fourdsh\nffgdlggchpcq7four34lfive\nseveneight9eightnpjmh9eightfive\nbnjrnsdfjg6\n76five\nfive4nine6six\nq339eightkhnjsixttvqzlbchleight\nkoneightonenine2nftlzxnkbctmjvzk98\n511\n4cghqsix3bqr\n958three\nseven2vmrkjqgrlb5\n9three6one5jdrnlfour6nine\nfour2xdrqqsktone\n1sevendxkhzglzxgcmonesixrplhlplhnone\n6threefourhshvnszlqrzb\n7hctfsqf2jzjkxbljg\nsevencxncnc68\n49lfdkv2zbhddmbfive\nsevenfdsmsmmgzv29two6rpxsgpdsjxljcthree\nhgfqhdfb4mninesevenzngfljcvpvvkmghqxoneseven\ngtlqcggrp6lzjfive3rtrqvszcrsevennine\nqvhztzsfddxbbxsr88\nnine5kfnninelknrbf5bjrrthv\npfnmdzksjcjcbvlvgcbheight47\nsixfour8\ncdbxkcqseven1\nonefive65mdbrnlg\nvlcxxcxhfkjhm6two5\nbfpnhlzq3tgcmhd4\n6three69eightgmxsseven\nthree1six\nfourgqqgvltwofkxzmcfdmz4\n24four68nxs84spjnpfsdv\nm1threesvlhmgsbn\nthree7jcvclg84sixfjvvtkfk7\nhznlsixjqnlvpmninejrvfpplbm5\nmgfrn6\nxb9469\n48713fivefour6\nsevenfiverzlhdzr59lbtvltccgbstzxksb\nrxkppsh771\ndldhcgdvtwosix3\none4phkrftwo\nrrdrpfddtphv88jldqht\nvgcpcmrj6\n9zdqnzlthreelxzmlhsgdc1pddz\n669onesix\n5eighthlbhzlpms7qvbftcrone\n8mttfjqjnsf528hzvljcx\neight9tseven25csfeight1\n7threethreetcdxnhnnftwosevennine\n54tsrjthq831sixcmxzqg\n61eight9kb5\nqlxmg4zhcpfxvrhlgjlcbxvxsix\n95two\nfour75eight\n6fbrnsflmxstwo\n25\neightcdl979gxzv97eightwogdv\neightgbx85sevenseven\n3rfvzeightsjcctzxvtcrsix\nfivevqgm14\ndbfkfnfbckncvseven83drnkzt1\n11ninesevenxlxfr\n4ptvstqt7fivebznine\n5qmcnfour9\nfour5mndpqsmxninethree56ctnlcpbtzmthree\nfour2bqnbcbninemccbzhrfourbgrccrsznskjn\nrjdfqd24seveneightwom\n9ztmbftvvzlqlr4\nqprftkd3vkfhtwofour33five\nfourdtmjbtvvdxdhj5\njpttch9\n9jkngffbxhg\none79twoonesix\n2eight528nine2\npsncczvbeight3\n4seven7nlgrlzsqjsdb51\nfive98lqc8\nnine377rcgvvhdghrg5scmff1\n8fvcxpr6kx5cpcrjdpnjcsj\nltlbphmcc7six2\n4threek\n8hzmfhrnvt\ntbmzgpgkkxc89z4sqpd\nfivefourdjpdgfournine37eightzqbpgcnfrq\nsqh6llxn9z\nfive1sixrqqclkhx334sixone\n289\nnqcspsixone822five\nbq19\nmxdqptgg99982vpthreesgdgsf\nvp334fourhdtjvlgtwo9seven\n3five157sixgzgxxfive2\ndvmtwone3sixfivetwo6ninezpjv\n9trtrdkldqj429hsrtd8\n6three3sxsbbhpgsix1\n3gccsixcghh\nsix4nnbg\nppvljnh5\nsevenmghppptnrtrzh7\n4sevenszkgbpldhklrtclm\n9qjsxmrmdm\ntwoskbhlqhnkmgzkpvtft9five2qrkeight\n1v\n988fkxgkbonerglfsknxr5eight6\nxkdklvjbhv977lvlnmrj3gnfjrnttm\n1fourthreesevensevenxfdmtdone\nfourmg4xtvjbfmqkhtbslq1onehmtrtvsslrjdfncr\ntwosgdlxsixfive1\nbscpkcfp8mhpvzn7threefqgcpfpmftsrmktwo\nsixeight4vthcxd48two\n1ninehclngfzbktvpjone\none2sixmzxdqxvg4oneoneztbmplctc\n5tkhrmfrvonetwo\nlfgveightnqdmrv9six\nzzgmcr1jgzjjljhqmtnbrnbt\none3vfour7eight\nfourseven3ninenine5four\n92kpdtggsb\nonecsfdhsn3gqmtfhc\nbhflvgdfkhprqqdgs6one\n1five93pmrhdvmgp7onesix\n56mgkt\nrksixfourfourthreefive3fdrbtgmdt2\n8one7\nrgvccbsrphxkmdgjkrjjztdzzmkgqbcdkseven69\nthree4eightsixjgbnthfxvltwosevenxjkd\n5cffmxhdbtgtlffdb\n8fivetwoneb\n5trtgsgkvplfvqccknine\ntwo4gjjmptwo\ntwo845lltssr6\nsix8xngnhbctl\nnhbxglqfjrhmhneightqmvlnqtwo53\n7nsr\none2seven\n8eight2jphsz9\n9fivebv7kmxqtdvxq\nninec4four\nvrtczjzbzg8bgf\npvhnfhvsixbppv4oneshhqp8jprm\ntnxqmfive1khnmb\nonefivechd69nine8\nsxeightwoeightkpjxbkrvtbllbxfshseven4threemkbx7\ntwofgcfp7ddjqvhrbvmkjdsltfps9bttz6\nsixninezpsbrvhvlz4\nfour6sbtdldjcjrn7\n79drd742\nmmccvnldbhxcfnpxrftqc1sixlncsqs\njjdpbsm2\n9fnhthreefourtftrmqhkmxrpnnhbxvk\nfive168sixs4\n65fourkpzbhhgsghxvhlvlftfmck62\n8fivesixsvmzjhdmdqsixntzrckdk\ngfzjxptdqnineonepqqsldlvjrg5pdgthrslpfcfive\n38mmkcseven2four\nvghjzfchxsqq8fivefourone1\ntttjzcm3\njpn764tsmrfvtjp7four\nonelhbhkmf7\n5ssfzvfrrvgleight71\n52lkxkxdjch5\n3eighttffhffht4\n832\n2gbhzrgchz\nthreessdmstrhchfq73ftcfbrtrvf\n8xqs9scc\nxglmdxq24two28kcckrsqpzone\n16mkcl\nldhmz3\nxzvttst5\ndrkkc3\n8zhbplhvcr4\none1xzbrkd59\nxzzbsnktjhjltsfrrrz3four\n8vlfgxgzsnfljbnnmlpz5nine3three\n99onehzdqm\n5zdtrvccn\n75sixsixkxldjnxslnvggnvvjbzcrqveight\n9sixztkk\nthree9sevenone\nzxsgxfxpkpp45\n9hkshgthreekkvrplztccvb\nsixbvdxrhrc16\n1jbjbqhnqgg5shmgfm9seven99fvpnrrpks\nsixstsxgbmcx12qhhdr\n9trfxqzkdstwo2dzone5three\none3drbrbtsevenonekmfdlffive\nnsnchfkxttwo2zgpbvkvktwofour\ncnzgzdvfm9\n8fst5jsgmxhbgklninebkkrs577\nxskvpkzcx2twoninebslrbdmqseven\nqlbpjqmptkseven9lqmcdvjcxqsix4\neight7six2\n33h8rxmtlctrz67dz\n3rmkrn83seven4bxthree\nmmznine55\n1onefour\ntwo4fivenine\nfivesevenpp2onexcxjvllseight\nonehtfzdtjxskmzsbc4sixfourz\nmfkttfxqvtdqdrl93\n567\nqqpnrfninetwo55eight\n4qqmlrfbfrvpxvphjpbc\nnltblqfourbxxrrgvgkcbb5hzzgfour5dmdxl\nthree2526ngfzssixsixseven\n1tffj2fcddnfxrzx34\n59jd\nsevenr8sevenvxltmxcssttwo9\nsvklhbtwoxbbmk6ninekptrln7sixjqbjgxdhzr\nkrbmcxpnxfrn4\npnkfournjgpggxzjd97two\ncplfrzbgbleight2z7six\nninep8xxxnine\nxqlrnzlz92ninehblgkztwonerc\n1nine7\none8three361two98\nnine367qqslvgcxftwo\n3fournine3twofkcdmx6\n1b2ninethree\n6one4sevencnlsqzzmcxkxfnqjone9csmkx\noneeightgh44eight66\n6x527threethreerggpfcfqlf\neight1tnine7gjvtpvmqb1seven6\nsix45six7fourmnhbskfthree4\nltf4\n3hgqgdsmnsnine\nhjqneight5threeeight\nonekxbrlhkxgxbmbn6eightfourltspzkqdnone\nllfphldmghqrcnineeightonefive9vldfskjbhl1\nsixpjf5gjkdqkvvqhj\n2five685kvh17four\npgslffcdvsix7oneightcs\nlznbhzonefivezgj45crzfl\ntwosjggnvbxcmtwo8four5\nfourhtstxbkcz6fclrvgfrgbv\nnine4ninefourfdkdmjvlvzgsnjsfseven\nthree318lmzcfive57\n5pmcnc\n861\nqbbhpjsg5r2\njtxcphmrjnscfhqhk6seven2threefive\nqd1sixninefour\nfour7fivethree65\n7dlzrddgrgfour3hxsttlnkbm29\nfour4twonine8\n5zblkgmxninesevenbrhntxm\nxfvl9589\nfive2seventhree6gbzb2\ncvmqqtskxlthree1\nsevenseventwo9xthreevzfdmfqvdf6\nsix72sixeightnine9\nxrjnqqtlxz8bbgsqrseven6two9\n29seven153eightzl7\nsevengntsfmzkfb8\n1fiveseveneightdbvbtszptqlnineseventhree\nfour6rks1v\n52eightninez\n5jspztgxrpt\nbq8jpttmm2\nfourctnlpkbrsfive9qd\n85twothreebbpsjcfh12oneeightwov\nxhxgfrcljq7six\nzh9\n9sixfiveseveneight\nrgqzbrldqrhtzjbsbzggktnc4nine8one1\nxcmfbrprxr72qqtnine\ntjphvghjfthree1one\ntwosixeight9fourone\neight48xronebc\nt6two34nkmfgmsnnvlbq3\neighteightkx86\n82b6fcvvxpsx84\nthreeeight66two\nsix4pkbhtxlteighteightsix\nthree7snrrdfb8sixninetwo4mltj\n5jqbgnqthreemjzgbvpdeighteight8tvf\nnine6zrbpsfrfqnsixlkmxrkxln\n2fivedvkt2998\nj2eightzqspbs\nmmp694eighteight\n3chzvrsrhzrcrtwoone2\nqqqzxcqmbb8nine\nsixsone7onesix1vvrqszvmnrh\n8threegtfnmkgthreesixthreeglhzqq\nthreefiveone2three6seven4\nsixzkqbcg1\ntwo7seven85five\ncfhg3zmpfd644\nbtsrthdbkt6242dhl\nhqlgnine5two\n2zgftzs8twovt\nmmpcgngmjjvbnsix35threezxjjxsqnlv\nlmmqsevenvjcvcqj55fiveninernmn9\ntwo7rgsbxnmddtjd\n36foursixsevencjffhxrsq\n4jxzfhxrphtgbjqfivefive\n99pqtnvtwo9crsbvsnrmtpltthree\nthreedhk3hgvkp8nvbk6\nfivelkxdgvsq6twofive9hzjkdz\nps7two9pqnnnvqpdbcpttjgrjl\njjcfkvqdcl4twothreetwosix\n47one525\n23three2\neight9four7gddxxfxcm9gdmmnfvbxr1\n745\ngkblgnrzsblklpb5bc8ftrnineoneseven\njghbzdlmqbjm5glsqfffvzksc\neightsix1five\nnznrzbdsv4\n16vdxm2hlrgtvgtdrbsix\ntxk26eightnrjxrrlvffour2\nthreesevenddmrsghzsjk2bdcqx\neightthree9blrfjvrpfnjcfqrxcnine1\ntwo7three81htcdvdnxg\nseven1three6\nkplnzdjmkcrthreefour38\nbvf1sevenmcdfnv9lpnnh\n6eightqcznninesix\ntwo3sevensnpf6v\neightthreeeight4986\n9seven7nine6nineseven6\n3two91\nsix97three26hlxczxp\n65twopggttdksmtsblfpjbcphzc8eightwopx\nmbxtfmkfourrkspbkvbrnljsjhzpqsgtvrr2\nsixseven9one5\nthree7twob98\n6c\n5797xjtwo83\nchrbcms6vpmrpctssbvqmvreight76\nmthgpstgchone6two\n597\n1799gjjdgzhg9eight\nvzqkgj27zpvxltzvrfcl47\n381lmxkxrfhbxqeight89tdhpbpqnx\nsevennine4\n29ninetwo1tvhpr6three\ndlbqfsdmdxhszmcpzshdthree3hvc2csbtfthree\n19khmsnhone\ntwofourbtlsl1\n3sevenssevenfivefour\n8seventhreesevenseven\nthree27rseven\n1jbdtfcdvvbzhgfsixrzqxkfktjmhkhfive5\nonetnznrrcthreefmmfivesbsvg4twothreetwoneqq\nsbjfxeight2tzbdkvqmmdd2\nvc4xfsjmt\nbfive9dmqgfnzvtngkbvthlrfjmsjtclbzbszfour\n31nbzfqvckd\n26kcdkzbjnpkpljxhgnhjgmtbrvkntjbqtwo\n3eightthree\neighteight88\nfive6bsix3rkchjzlfour94\none9rrrbx3eightone\n6fourkxpdmt852eight\n8xhfbqqklnfive2one\n4ninetwoone6\nseven5seven\n1vzprkvk\nmczkrcdx7rzvgdd6ktcnktpfkpp\nsixnine988one\n68shx\njqfoneight4sevensevenhmcrqjlzhnl6vcsqgmgnnxqhvchx8\n1fourgqbjvjhzdppdq\nlcxjghp2\nsevenone8nlh5\nnine94krdvjv5seven3\nninenineseven8threentgtlzfnrfbhxxzn8jt\nnine37\nhbzztninexrrktrlktwohr1765\n5sixjdvfxdxslhthreethree\n2eighteight\ndfnbf65\n4onenineqjnlpninekgk\noneoneeight974\n4nqqm83ninezkmbcblh\n7tpjhbeight1\nfiveninefdcnfourvdjcnsshnine3fivefive\n344\ncrnqzpztstxvcgjdmkp6\nhgcvbscglp63tpfive\nseven5fivesixcbtblmlsixgvfbqttzonedld\n43threep\nzshzcplxth4nine2zcgsbzdlxtzbxggnine\ncqtwoneone9ckhnzmzfsevenfour8j3\nfiveshs8ttpcsznh\nhdpqds3seventwokbzlhxpj\njoneight9\nhmxxnxhqfivefiveseventtgxqcxc3\n59sixoneonezjgbshzpfg\n1gqqz\n8two38fourjm7\n1fiveeight1four69\n88eightwoffg\nthreenine3threegqvtvtxgninerdprd\n7sixthreesixsixmgzlqlbsslseven7\nthreegmrbgmsfourfourbvmhzpctkd5rzx98\nfive193146mmqmf\n41fourxone\n2jhgqrkmmgbthreeeighttxg\n5xxbgpmm3\n5twonineffsevenfivetwonine\nseven98\none7532rcc\n8djrctpqvpcd\neightqqnhfnn2pjsevensixx7nine\njkzjrbhsevenseven1\n4tnkqxkl69nrktzz\nsix88five9nplcm\nxngrktpqclsmkqggj935oneeight\n8fourgbns\neight47nine1two147\nvpshrqvfkjctpmhcfc22eightmqdxlsngbfn\nrfive1kxfbcpq\ntwompnqfvqxqninevgvhqlpfqc15seven5eight\n9fournine4ntvhbkbhqn48mqhqhltbjpzrrgb\nninesix2four937\n6cxpmgqnchk33mfdxfqdhxbfiveonethree\n9mqmldz3kjnsgfoureight\n4dmxtdvqvrvdrbfour5q\n8eightmcsbfive11four2thqxmbktdl\nzddeightwosixlmhrzfksevensevenfive3seven7four\nlvgfftzceightsevensevennineseven5twobkd\nnine7three\nzlmfvjfrxrrdmtxg965msd4\ntwo9five4sevennmrvdgzrf1bjdzbtrdlb1\ntjbnzrpzrflpfsrprsg9\nfourzcqfonesix279\n75fxlvc\nldvmnfqpll7fourqxzpfctfxp1nhrhpvkbtmone\nseven4ninebpbdfjsxxmbqvtwo6one8\nfivefive47seven\nrxeightwomgzhcbnlmj72\neight34xhbcmeightfour3\nnxszsbltqhthree4\n7threefiveninecqzfdjpdcg\nkdfour2\nktworhdsfhhfqcrbzdslthmt2\ndpjbqmd7689\nthreesix8\n61113threenine\nninenine77fhtvsmfh23onefour\nbccdxg5three\n2eight1bnrx\neight7sixdvvrqgt46874\n35onekpnthreeprznkpfvlneightwom\n52five6\none3foursjnngjznqkfqklhjn\neighttwomzrxzfqgtdthree3scbjdnq\n9fivecjgdnkxrt\n5nine442fb8\nnine6one\n241fouronenrlb6\n97sstjznxfcpccngfl7cxmzzcvptfive\ngvtsxbqzcone52\n5845836fourfgrvrchv\n7247zxfkqhvd\nfourxtwonine2eightfive\nznjxhfour229three\nfiveone8qjfmjbnnc\n1sqdjlfiveh\nfivegxfj9pfbxf5\ncnxmvmcrm4cfivedcnrnneightwosd\nfour3oneone\nhbtfjlnplcsrxkt6rcqpfdseveneightwoh\njqknine9xfour43sevenbgznxhh\npvtztgjv47\none9oneeight\n3npsq\nninekmzdninejk7\n6threeninefhcpbb\n266\npvtwocthreeeight1\nlpmshscqztgsgsb2zfcddqnvkseven\ndmoneighteight78oneeight9zqszseven\neight8eight\nfcdlflbtfiverxfx9\nfive7six5\nhhvmsspr4four8hhcjdhnthree\nthree8qfzjpdztwodrkg5cg\n919lhzrx1\nfoursevenfourfive6lvfour57\ncrzmt7\ntwo71pzxnxtjkngfzm\nsixbmzlvcnine9\nhfbeightwo3eightfoursixfive\nj5twotwo57nine\nrmqq3sbjqnqmdjhmbp91hp\n3threezr\nfivesixfour81jqxx\n2bfeight7nine7\nfourfiveqjfkzsdxmgjmpmtone3hbgcvq\n7nrshoneninetwocpphnrfprz2five\ntwoseven1bqjgdz2\none7qonevmvb4sixhsbqgp\nfivethreethreegmdh1\nlv7d89\n2tbrnmflxfhhsixddn\n6sevennlhxsevensixt\npd2kkfvtjbbgvfrcts\ndjfoursevenflp2three6\nbppkvmxcrvffssdxgrr6mtlthree9six\n4szvlsixsevenxttwo\nppggtqx8\ntwo3three6five\nthreegplsmsjzjfcctwo6tkrkzmnk\nsrtj2tsnxthreeonethreep\nszhnzblxslqthreejveightfvrrhbcqjqmmvczh1\nfive2five25\nbtvlzjhrxxdqdmbbcrmbffpmlmr9four\n1jdrpjpvkmmseven\n85bbbht\n2onel2p\nhdsfftwotpqcgdbdjbgnvfone3eight\nfourdgtccrxdnvfszgkjsj38\ntwonine6twotvqxpskhonejsnpmtpctjfive6\n29eightcgskgdnmnhkpp63seventwo\n2seventwofhktwo9\n8kx\n32zxdzvfzjvtwofive9sevenfive\n2seven8pmdnnthreehnvltl7\n33sevenfournvnjp24\ntwo3m9kcsppfour\nhjfb9six5gtbppmzlfmfourtwodqzppcldd2\n4qlkz3\n4ninejzgpnkvq\nfbcpkspbcgrn6dmclmnqldeight\nsixtwodphp833\nsevenonesix5eightsrzpjzpj45rczn\n9fiveltfqjmkzbrm8oneightbq\nmxfqsrs5fpeightfive7mvclrlqhhkptpbqq\n438rktthreegvhltmsv\ndcl9xnntwosixthreesix7\ncsxhsvkkkhfour4slkvjk1eight89\nthree2eightfiveone\n17kqnstzmbthree9seventpld35\nztxjhftwo1f\nccfvc3three9five\nfmngmbkjppkxjnzqbqldmspbrrrhhrkrsix4\n9fivejthreepjtmtfive455\n4ncdvqfiveonefive5zxgjpptbnbsmbrfdpqrjnx\nljctvztrxncpxsdtttwo2tnkkt\nfive544mlzkztsblt17fivesix\n9five35bkbpjc\n6fourtwo\nnine5hqlbjp1onenvvnvsseven\n5qbvsbxtktqhgqxfgprsgsrrpdtpcmr8\nhhsgjxlz3gzxhz14fourtwofq\n6three8rmtrbnhvr\n9bhxvmhldnm6\nvkjjpkgdmxrzzfour7\nrhvrsrthsevenfour3eight5one73\nmsqdzmfzfeight6qhrvzcdxfourrleight84\npjtfflgfhqnpdk6three63five9six\n1sixcpcvbnnine9eightonenlnjfdfdmxcmcb\nzpgrbsevenmqskhgtrm6\n8hnqmmgrnsxhrxjjc2qjbbvpknh82\n5six7threepx\nbmlxvnqrxtqzkdlnnine5two9bpphfdhqj\nmtxrblghxrsbxhmgnbvgvffivenine49ztktxvfvseven\ntnqclrllq9fivebddnv\n56seven222pkmqk\n74eight9pfqghssgk\nnhmzdpbnlreightqgljp6\nnf3three2\neight9glknfltsqsfdsixfour2tcfnzfmf\nfour1ninetwo4sckcbgzrx663\neightbcfsevennqznfmfivetwo7qgdjtwo\n64three\n8vgggxllsrhqjh2\n7jhthmpmlxlptgbnscxcthreeeighttwo3seven\nktqlfveight1eightjnfxvvjk\n99qjcxgnpdvnbjqprbqnsjone3ninenmxkslmdsx\n9gn2\nqtlztwo7eight2\nnvzhsjsdp4sgrbmx36\nfldvmnlkq52nqtsccgfgtwolm7mmb\ntzvgkfx6ssnxfeightwov\nrrl8pxjj6onefour\n3hzhqbrdspfrn2eight8\njcrcxtqh8three4\nttwone449cxvvljcpzpqmngtzslnq\n3gnkgbjnsmxv2fourd8\n9zt\nkckeightsix8oneeightsix36\nvjcg4p\njkzr3\ntwofiveone1four9seven5cnhzm\n6one6\ns2twosixfvgrglfive2mtkrxznllj1\ncnhbzthlzllgghkxjgtrph45\nsix5two\nnine5threefournine\n1rkbvrk8threevfkdbvxgj\n28six7dvone8\n74seven\n6threeseven92rvpg1\nhxvthvgk8vhn6kmljfnl\nfourztpprfkonemnjbsfdjlj8\ndjnhxfxxl1five2threezgthn7\nvmhmlgljrpsix93sssixsevensix\ndqk8nrsrk\njjtdjkfivegpfspqqjthreedkntgjslqreight7n8\n8four12\n8vlcfsixthreelvvdv\nzsjqvmghp6seventwo\n6tnjfl2cfzcbgqp5\nvgjxleightzqfklqdx4vlpvp2gqxdxpzk4\n12mshtkbgsndrdx7three\nhtckznt2threeninej4fhmrtthreeeight\nfour8hdbrmptjnine\n2xbk\nljgcscxxjgdbpdpzfcchrqnmqqthree8\nthree7six51\nfour5five92ftqhjhx\neightfthreebzbhk4tceight\n2fivethreefiveeight9fbk\n9four613two8cnpzgcrnmc3\nfqfive38\nnine88mkthree99lkvzgvpjk7\n784dxxcpszbzkdlsrgnnqfsixone7twonemvh\nonetwo5tzggnsix2\nxsclx3twojhslqrnc32pxfqsjxctnb4\nzrdbcccznzlfgz8jfpgllczxtnpmp58one\nfour21one925rntdr\n38six\nseven3nfttdgkjhklmdqbkv8threefour\n75kblsbqhonevsx\nfourztseven8twothtwo\ngmktvrd44twonine4pnbrkhhzpl8five\nnineslj1six8two\none98mxnkrbv\n9zmfour\n8dkfmthstlqvs9r\ncjmcjjjvmceight9rslcctdslsxthreexsjbffnine\n5eight677\n4twothree\ncvqbrkmgthree4tbmzrhqtpx\n24twoone\nnphprsbcfhcfrggktgzgvrninesixdnchjd2\n9sevennmxzpjbhct\nsbchgzqgdk8twosix667\nhkjlpqgtmglv3eighttwo7two\ngflktjvlfivetbgmbsxzdpdxjdgkzvn851sixfour\nfive2ffivefiveonekldfpcfjg\nmlnvqltfsixnxqxsgfpxrpsxmmlnzsnineeight5\nsix1z\nsevenpvhgctkcvgtjstwoeightzgqlcgq1gxzj\nfivenine13rbbxfs1zpvrstlkceight\n6zmcggdqbfptwofourfphdbdg99four\none65ninetljqcfive8\nsix57fourthree4fzctnjzcdm\n181one\n3one315gftsbtnggrq\ngcdvnzbvv55onemgcftkmzrxf\n697cnzql8eightvdsngsglkfour\nfourfiveqjptdn6\npq83six7fprdbzvmgrhkzmjmxgnkcr\nnineeightfivesix8\nfiveseven931xhtnvrtr9three\nseven9ninetkhldts\n6threehlzfbppqmhrtxnfoursix2cxn9\nmphgdnggjt3flmdz14ninejjskfivenine\nboneight7one19179\nnpdjlhskrdmvsvhtldsthree5tpt\n6rvpnvdqqpkkfvgclctqcmpdfvftt68\n91four3twoones\nseven793\n8h2four6cdsevencsjvcgdlrj\n4bzxqvp74mmdvjfdvq4fivec\n31tlvlrb75\nnndfct5ninesix\nncqsnf6six\nfiveonefour8\nsixtwo6zjhvhkoneeighttbfv\nthree5dcpmcsnmfhtwo5\neightnqqkpnine4ninegb\nlgnsrbbtkgtwo7eightthree\nrlpcrnscknpjpqm2qqpllrzk8p9\ntvpqncpmffpmv9nineninesixnjbhbhgdlf2\nlzrhjdkfhn1\njgjfckbrpvc3fouronefourfive3eight\ntwozhkpzcdkjfour8eight\n5sevenfourtwo4\n1sevenfivehvppxvxvcnsnhdrflonefour\n4pshnstwo46fivetwoone\nthree1onemdlc8pcqkzsrnhqone\nqvgfvfxnrp5bqdrlqd\njzgcnslrfxxc72bqqqrzltqm18four\nnmjlnxktmvzzrgkbrffourdddbbt7eight\n3two9twothreerlztqftcgkznfour\n8fivefive5tkv\n4vtsnlclbb37eight2xprhpnddzj9\n8hbmfjxmqckxqrdjqxrnhg\nonef6\n8fivezcjtworgbxrfkjkbk5mdkdgfbnkkkljlv\n5six6prgqhbvcrr1msjcct\nmvzdrmdlrsdz9nqmbkb6286\n367\n94vjktbt\ntwofivefour7three454\n2n\nsix224\nz841dzxcthdx\nfourvnlj7twocchdcn976four\nthreexmxq5five\ndscbqrjqmssnzbbdtx34\n8sevenhrvzqskpczsfhzrhrfch\n4qx\n6eightnine\ncnbxjrbsseven8hbdfmjvk6sevendrglnfq3six\n82threengstmq\n19f\ncvjrhrnxnfiveksrjgh8\n2six1dlpdds\n5xzhhnqpnsix8qthckdhggfdfour7\n9threetwoqznvtb4\none8dseven\n3fivefourjzbk4seven8tvqgvh\n9kffjzvfxtwofive3seventhree5\n5onerxdcrrlgvfbrvrphnine5eight\n614pnrbdp\neightfour1cvxjbztxgzznlpr8qbzkz35\nfour5seventwo3\n9fourzzjfdqdkmxbeight41eightwopr\neight6rfdhz793twonevkf\nvmrkgjgthreethree8ninesevend6hmjmkfdqz\nvqstkklpj4j8\n72jglrpp57nine7vcr\nsevenfbbgpxlvk7tmlvtjsixdtrnseven3d\n5jlb4\njhkslf976fpseven\njpfive1\ntwo2jpfztkeightssfsevennine56\nseven6rjchpgvmqgrxdddq\nfour7eight\nzqoneight9mqmjtjcb\nljcmvjf1ngrgzmttttqprks2kphjtgqvmeightvfmzqhdhgj\n77ninejjxxgbffive6zzgd\n4pthree5zp3one\nmhdzcmmsseven4three3bngxxqzclpkmcppxtwo\nbneightwo33ptmpcbfournine4five\nsevenfrzffbklg4dmdngxmsixnzjgpkngsfivetwo6\nsix2onethreethree\nxhx4gvkbtcjbqvrhtwo6\n1mdfvninevchtrqthree\nonecrnninedjchhzkmzthree4qjnclshjlbn\nthreeccgbz6sixlhnkcpfdzk119\n61dtwo\nncsbdxnp43jlrxfhgzlrfzqjkzbkd\nnxfztwo9lhcc\nmds9vkninehzcdk\ntwofive4jdcndg\n374\nthreedrsh9eightcqkrslljl5tthree\nfourtwotwo8kl1bvplqfrc7\nthreekldmmjkmc92sixsixonenine6\nbllccpcksq59zznr\nn35lxtnq3\n25hmzzxv\n38sevenkqgtfcpnj\nntfceightmvhvnzjvv37bsj\n4sixfvrtgdsjvxsevenfouronefiveddns2\neight29lnznht2oneonekgjkq\n4lthkrtj1onesevenninerfplsixfhxdvlhoneighth\n1seven8eightgxzvgmnqj\n7qfqvxcjttwoeighteightqqsgbsftseight\nslfqkljnine1oneeightlgskmlqgstwo\nsppqhlxqzkdtdqc6qtxsssdcf41\ntnggpjrnmrrgzpssptpk32\n6pcjglgdknjoneightssb\nninefivefrglbccjmrchvbpsgxrq15fourfive\n7five1lmndzphnj4fouronesj\njvhkb24htseven7\n7sevensjnrvxmsixthreesevengrh\n9h5xbdgpdjjkt1\nc14vbjvcv\nninetwohfbm6fourjpgz676\ngqdtlzqvkplj48cxvtvjjlkmbstcfxd5hkbfdgtf\nninelpxd8eightvmmbvgmhs3six1\n9mmlj4vvcxlnbsfoureight\nnzrjlxqhnffour1\nhl5fzsxdbvklx4five\n182ninedghflcgrqz4ns\neightdmbqddsqmfive7qshcvdjx\nvdfzsevenoneone4ninemhclrkjspkxt\n2three1qzqhscbvmpnine86three\n1ninevvlzft\n1ghfnrvkn97sixqzgtm32\nsixnine4rsjghcsznfvs\nph5mzknlknp5\n3eight3twotchnsqdtbkh\n63threerjlgv6three\nfivevvcmvrqfkdfshxjnfgsevensix3seven8\n21onebcsgvhtm6two\nbnjpqcqdzmeight2gtjhqeight\n1rsjbbhtkbbfourqzdhlone4eighttwo\n6jpnnlbstgjfjdrdgnthreepgh49hdxqghr\nfive3oneonefrvnbnnlz\ngbseven9five6\nnine2hdltdjdp73phzrjnonegx\n3two3eightjszbfourkxbh5twonepr\n5cfprzgxtf3465five\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  2023 Day 1 Full Solution\n  \n\n\n\nwith open('input.txt', \"r\") as f:\n    lines = f.readlines()\n\n\ndef first_value(line, m):\n  for i, _ in enumerate(line):\n    for text, val in m.items():\n      if line[i:].startswith(text):\n        return val\n\n\nm = {c: int(c) for c in '123456789'}\n\nanswer1 = sum(10 * first_value(line, m) + first_value(line[::-1], m) for line in lines)\nprint(answer1)\n\n\n# Part 2\nwords = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\nm.update({text: i for i, text in enumerate(words, 1)})\nrev_m = {text[::-1]: value for text, value in m.items()}\n\nanswer2 = sum(10 * first_value(line, m) + first_value(line[::-1], rev_m) for line in lines)\nprint(answer2)\n\n\n\nExecution took 0.05 seconds"
  },
  {
    "objectID": "posts/2023/02/2023-02.html",
    "href": "posts/2023/02/2023-02.html",
    "title": "2023 Day 2",
    "section": "",
    "text": "Ho ho ho, fellow adventurers!\nAdvent of Code day 2 lands us on Snow Island playing a cube game with an Elf. This is a straightforward puzzle involving basic regex and arithmetic.\nFirst, we’ll read the input.\nwith open('input.txt', \"r\") as f:\n    lines = f.readlines()"
  },
  {
    "objectID": "posts/2023/02/2023-02.html#part-1-prismatic-filters",
    "href": "posts/2023/02/2023-02.html#part-1-prismatic-filters",
    "title": "2023 Day 2",
    "section": "Part 1 Prismatic Filters",
    "text": "Part 1 Prismatic Filters\n\n\\[\n\\newcommand{\\game}[1]{\\large\\phantom{\\textbf{9}}\\normalsize\\llap{\\text{#1}}}\n\\]\n\\[\n\\newcommand{\\Game}[1]{\\color{##2F7E4A}\\large\\phantom{\\textbf{9}}\\llap{\\textbf{#1}}\\color{##55595C}\\normalsize}\n\\]\n\\[\n\\newcommand{\\grey}[1]{\\color{##969696}#1}\n\\]\n\\[\n\\newcommand{\\plus}{\\smash{\\lower{0.5pc}\\color{##969696}+}}\n\\]\n\\[\n\\newcommand{\\red}[1]{\\large\\text{\\color{##BE4844}\\textbf{#1}}\\normalsize}\n\\]\n\\[\n\\newcommand{\\green}[1]{\\large\\text{\\color{##2F7E4A}\\textbf{#1}}\\normalsize}\n\\]\n\\[\n\\newcommand{\\blue}[1]{\\large\\text{\\color{##1577A0}\\textbf{#1}}\\normalsize}\n\\]\n\n\n\n\n  \n    Task 1\n    \nGet the sum of game IDs excluding games with more than 12 red, 13 green, or 14 blue.\n\nExample\n\n\\[\n\\begin{aligned}\n&\\text{Game }\\Game{1}\\text{: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green} & \\grey{1} & \\plus\\\\\n&\\text{Game }\\Game{2}\\text{: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue} & \\grey{2} & \\plus\\\\\n&\\text{Game }\\game{3}\\text{: 8 green, 6 blue, }\\red{20 red}\\text{; 5 blue, 4 red, 13 green; 5 green, 1 red} & \\\\\n&\\text{Game }\\game{4}\\text{: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, }\\red{15 blue}\\text{, }\\red{14 red} & \\\\\n&\\text{Game }\\Game{5}\\text{: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green} & \\grey{5} \\llap{\\lower{0.4pc}\\underline{\\phantom{\\large{\\textbf{8}}}}} \\\\\n& & \\color{#91672C}\\large{\\textbf{8}}\n\\end{aligned}\n\\]\n    \n  \n\n\nIn part 1, we need to identify which games would be possible if there were only\n\n12 red cubes\n13 green cubes, and\n14 blue cubes\n\nFor example, if a line contains \"13 red\", we know we need to exclude it.\nWe’ll use regex to extract the largest red, green, and blue values. Then we’ll keep only games where\n\nlargest_red ≤ 12, and\nlargest_green ≤ 13, and\nlargest_blue ≤ 14\n\n\n\n\n\n\nimport re\n\n\ndef extract_cubes(line):\n    return [extract_max(line, color) for color in ['red', 'green', 'blue']]\n\n\ndef extract_max(line, c):\n    return max(int(num) for num in re.findall(r'(\\d+) ' + c, line))\n\n\nmax_cubes = [extract_cubes(line) for line in lines]\nanswer1 = sum(game_id for game_id, cubes in enumerate(max_cubes, 1) if cubes[0] &lt;= 12 and cubes[1] &lt;= 13 and cubes[2] &lt;= 14)\nprint(answer1)\n#&gt; 2006\n\n\n  Key Points\n  \n    \n\nextract_max finds highest quantity of a single colour using regex\nextract_cubes function find highest quantity of every colour\nFilter and sum the game IDs based on the colour constraints"
  },
  {
    "objectID": "posts/2023/02/2023-02.html#part-2-combining-cube-colour-counts",
    "href": "posts/2023/02/2023-02.html#part-2-combining-cube-colour-counts",
    "title": "2023 Day 2",
    "section": "Part 2 Combining Cube Colour Counts",
    "text": "Part 2 Combining Cube Colour Counts\n\n\n\n  \n    Task 2\n    \nMultiply the largest red, green, and blue values. Then get the sum.\n\nExample\n\n\\[\n\\begin{aligned}\n&\\text{Game 1: 3 blue, }\\red{4 red}\\text{; 1 red, }\\green{2 green}\\text{, }\\blue{6 blue}\\text{; 2 green} & \\grey{4 \\times 2 \\times 6} & \\plus\\\\\n&\\text{Game 2: 1 blue, 2 green; }\\green{3 green}\\text{, }\\blue{4 blue}\\text{, }\\red{1 red}\\text{; 1 green, 1 blue} & \\grey{3 \\times 4 \\times 1} & \\plus\\\\\n&\\text{Game 3: 8 green, }\\blue{6 blue}\\text{, }\\red{20 red}\\text{; 5 blue, 4 red, }\\green{13 green}\\text{; 5 green, 1 red} & \\grey{6 \\times 20 \\times 13} & \\plus\\\\\n&\\text{Game 4: 1 green, 3 red, 6 blue; }\\green{3 green}\\text{, 6 red; 3 green, }\\blue{15 blue}\\text{, }\\red{14 red} & \\grey{3 \\times 15 \\times 14} & \\plus\\\\\n&\\text{Game 5: }\\red{6 red}\\text{, 1 blue, }\\green{3 green}\\text{; }\\blue{2 blue}\\text{, 1 red, 2 green} & \\grey{6 \\times 3 \\times 2} \\llap{\\lower{0.4pc}\\underline{\\phantom{3 \\times 15 \\times 14}}} \\\\\n& & \\color{#91672C}\\large{\\textbf{2286}}\n\\end{aligned}\n\\]\n    \n  \n\n\nPart 2 asks\n\nwhat is the fewest number of cubes of each color that could have been in the bag to make the game possible?\n\nThe word “fewest” might lead you to think we need to get the minimum. But actually, we need to find the maximum of each colour.\nLuckily, that’s precisely what we did in part 1. So we just need to multiply the largest of each colour and get the sum.\n\n\n\n\n\nimport math\n\n\nanswer2 = sum(math.prod(cubes) for cubes in max_cubes)\nprint(answer2)\n#&gt; 84911\n\n\n  Key Points\n  \n    \n\nWe already have the largest of each colour from part 1\nMultiply the largest of each colour and get the sum"
  },
  {
    "objectID": "posts/2023/02/2023-02.html#stocking-stuffers-candy-coated-comprehensions",
    "href": "posts/2023/02/2023-02.html#stocking-stuffers-candy-coated-comprehensions",
    "title": "2023 Day 2",
    "section": "Stocking Stuffers Candy-Coated Comprehensions",
    "text": "Stocking Stuffers Candy-Coated Comprehensions\nPretty much every line in the solution is a list comprehension. They can be combined to construct a juicy one-liner.\n\n[sum(l) for l in zip(*[(i * (cubes[0] &lt;= 12 and cubes[1] &lt;= 13 and cubes[2] &lt;= 14), math.prod(cubes)) for i, cubes in enumerate(([max(int(num) for num in re.findall(r'(\\d+) ' + c, line)) for c in ['red', 'green', 'blue']] for line in lines), 1)])]\n#&gt; [2006, 84911]\n\n\n\n\n  \n  \n     Problem\n  \n\n  \n  \n     Input\n  \n\n  \n  \n     Full Solution\n  \n\n\n\n\n\n\n\n\n\n  2023 Day 2 Input\n  \n\n\n\nGame 1: 10 green, 5 blue; 1 red, 9 green, 10 blue; 5 blue, 6 green, 2 red; 7 green, 9 blue, 1 red; 2 red, 10 blue, 10 green; 7 blue, 1 red\nGame 2: 7 green, 5 red, 3 blue; 4 blue, 7 green, 8 red; 9 blue, 4 green; 6 green, 3 red, 4 blue\nGame 3: 2 green, 4 blue, 13 red; 15 blue, 9 red, 3 green; 3 red, 18 blue, 3 green; 6 red, 4 green, 2 blue; 6 blue, 13 red\nGame 4: 9 red, 1 green, 13 blue; 3 red; 2 blue, 6 red, 1 green; 12 blue, 2 red\nGame 5: 1 red, 8 green; 2 red, 8 green, 8 blue; 1 red, 11 green; 5 blue, 11 green; 11 blue, 2 green; 10 blue, 2 red, 1 green\nGame 6: 1 red, 12 blue; 20 blue, 3 green, 2 red; 4 red, 15 blue\nGame 7: 13 red, 9 green, 1 blue; 8 green, 2 red, 6 blue; 4 green, 5 blue; 7 red, 3 green, 7 blue; 19 red, 5 blue, 1 green\nGame 8: 11 red, 14 green, 4 blue; 2 blue, 5 green, 16 red; 18 blue, 11 red, 2 green; 2 blue, 15 red; 13 green, 8 blue\nGame 9: 7 green, 5 blue, 11 red; 10 red, 7 green, 4 blue; 1 red; 6 green, 2 blue, 9 red; 8 green, 10 red, 6 blue; 5 red, 5 green, 7 blue\nGame 10: 4 blue, 2 green, 1 red; 5 green, 2 red, 1 blue; 3 green, 8 blue, 1 red; 2 blue, 6 green, 2 red; 1 red, 4 green, 2 blue\nGame 11: 3 red, 4 blue; 8 blue, 7 green, 2 red; 7 blue, 1 red, 6 green; 13 blue, 4 green\nGame 12: 2 red, 3 blue, 4 green; 2 blue, 9 red, 8 green; 10 red, 1 blue; 1 green, 7 red, 3 blue; 7 red, 2 blue, 9 green\nGame 13: 12 red, 6 green, 2 blue; 15 green, 2 red, 4 blue; 7 green, 1 red, 3 blue\nGame 14: 9 green, 4 red; 6 blue, 1 red, 7 green; 3 blue, 5 green\nGame 15: 7 red, 3 green, 2 blue; 3 blue, 4 green; 4 blue, 4 green, 9 red\nGame 16: 12 blue, 11 green, 4 red; 8 blue, 9 red, 10 green; 9 green, 11 blue, 13 red; 10 red, 5 blue, 6 green; 2 red; 2 blue, 5 green, 5 red\nGame 17: 3 red, 2 green, 2 blue; 1 blue, 3 red, 1 green; 10 green\nGame 18: 3 green, 1 blue, 4 red; 12 red, 5 green; 3 red, 3 green, 3 blue; 13 red, 2 blue\nGame 19: 13 blue, 8 green, 6 red; 10 red, 12 blue; 8 green, 13 red, 9 blue; 13 green, 3 red, 5 blue; 5 green, 1 blue, 2 red\nGame 20: 19 red, 13 blue, 4 green; 1 red, 4 green, 8 blue; 14 red, 6 blue, 7 green; 11 red, 13 blue, 8 green\nGame 21: 3 green, 13 red, 7 blue; 1 blue, 1 green, 1 red; 3 blue, 15 red, 5 green; 3 blue, 15 red, 2 green; 6 green, 9 red, 14 blue\nGame 22: 2 red, 6 green, 4 blue; 6 green, 2 red; 1 blue, 4 red, 3 green; 11 green, 7 blue, 1 red; 4 red, 8 green, 3 blue\nGame 23: 14 blue; 3 green, 2 red, 3 blue; 5 blue, 1 red\nGame 24: 12 red; 5 blue, 16 red; 2 blue, 1 green, 16 red; 1 green, 11 red; 2 blue, 8 red, 1 green\nGame 25: 4 red, 11 blue, 1 green; 7 red, 9 blue; 6 blue, 10 green\nGame 26: 3 green, 13 red; 7 blue, 13 red, 5 green; 5 blue, 8 green, 11 red; 7 blue, 18 green, 6 red\nGame 27: 6 green, 6 red, 5 blue; 2 blue, 4 green, 11 red; 15 red, 6 green; 4 green, 12 red, 2 blue; 3 blue, 5 red\nGame 28: 16 blue, 6 red, 1 green; 7 red, 4 green, 10 blue; 1 red, 4 green\nGame 29: 5 blue, 4 red; 6 blue, 3 red, 4 green; 2 green, 4 red, 5 blue; 1 green, 7 blue, 4 red; 3 green, 2 blue, 4 red\nGame 30: 2 green; 14 green, 1 blue, 2 red; 5 red, 14 green\nGame 31: 9 blue, 6 red, 7 green; 20 red, 1 green, 15 blue; 6 blue, 7 green, 17 red; 2 blue, 3 green, 6 red; 1 red, 3 blue, 2 green; 5 green, 18 red, 6 blue\nGame 32: 7 green, 9 blue, 8 red; 8 red, 13 green, 19 blue; 2 red, 9 blue, 3 green; 9 green, 6 blue, 6 red\nGame 33: 6 blue, 12 red; 13 blue, 3 green, 15 red; 5 red, 10 blue, 4 green; 11 blue, 6 red\nGame 34: 5 green, 16 blue, 6 red; 10 green, 1 blue, 4 red; 2 red, 7 blue, 6 green; 12 green, 4 blue, 4 red\nGame 35: 11 green, 3 blue; 1 red, 6 blue, 10 green; 11 green, 3 blue; 1 red, 2 blue; 11 green, 3 blue, 1 red; 3 blue, 2 green\nGame 36: 10 green, 6 red, 4 blue; 3 green, 3 blue, 5 red; 6 red, 5 blue, 10 green\nGame 37: 8 red, 7 blue, 5 green; 8 blue, 5 green, 14 red; 8 red, 2 blue\nGame 38: 4 green, 1 red, 4 blue; 8 green, 11 blue; 7 red, 5 blue\nGame 39: 2 blue, 4 red, 4 green; 8 green, 8 red, 1 blue; 3 red\nGame 40: 4 green, 3 red, 14 blue; 4 blue, 13 green, 3 red; 12 green, 2 red, 2 blue; 8 green, 1 red, 11 blue; 4 green, 1 red, 1 blue\nGame 41: 4 red, 1 green, 2 blue; 4 red; 4 red\nGame 42: 12 red, 8 blue, 1 green; 8 green, 6 red, 5 blue; 12 green, 3 red, 13 blue; 1 red, 2 green, 8 blue; 3 green, 5 red, 6 blue\nGame 43: 12 green, 3 blue; 13 green, 7 red, 5 blue; 10 green, 4 red, 4 blue\nGame 44: 6 green, 2 red, 4 blue; 10 green, 6 red; 5 blue, 15 red, 13 green; 1 blue, 6 red, 3 green; 9 red, 5 green, 3 blue; 6 green, 4 blue, 5 red\nGame 45: 10 blue, 14 green; 2 green, 2 red, 12 blue; 7 green, 1 red; 8 blue, 6 green, 1 red\nGame 46: 8 red, 10 green, 15 blue; 9 green, 3 red, 17 blue; 2 blue, 10 red, 5 green; 11 blue, 3 green, 9 red; 5 red, 11 blue, 1 green; 7 green, 5 red, 16 blue\nGame 47: 10 blue, 1 green, 1 red; 3 red, 8 blue, 7 green; 8 red, 9 blue; 2 green, 8 red, 1 blue\nGame 48: 5 blue, 2 green; 2 red, 7 green, 2 blue; 1 blue, 3 green, 1 red\nGame 49: 2 green, 6 red, 5 blue; 6 green; 4 blue, 17 red, 5 green\nGame 50: 5 blue, 10 green; 6 blue, 4 red, 9 green; 7 red, 4 blue; 7 red, 3 blue, 14 green; 5 blue, 10 green, 9 red; 13 green, 1 blue, 9 red\nGame 51: 1 blue, 15 green; 6 green, 2 blue; 5 blue, 1 red, 12 green\nGame 52: 3 red, 15 green; 7 blue, 1 red, 14 green; 8 green, 1 red, 12 blue; 1 red, 9 green, 7 blue\nGame 53: 2 green, 4 red; 1 red, 1 blue; 3 blue, 1 green; 2 red, 2 blue, 2 green\nGame 54: 7 blue, 13 red, 7 green; 1 red, 2 green; 11 red, 10 green, 5 blue; 10 red, 8 green, 5 blue; 8 green, 12 blue, 12 red\nGame 55: 18 red, 3 green, 5 blue; 5 green, 3 blue, 7 red; 3 blue, 3 green, 4 red\nGame 56: 14 red, 17 green, 2 blue; 5 green, 13 red, 1 blue; 11 red, 20 green\nGame 57: 3 red, 6 green, 2 blue; 3 red, 2 green; 2 green, 5 red; 1 blue, 1 green, 2 red\nGame 58: 7 blue, 5 green, 9 red; 10 red, 5 green, 9 blue; 2 blue, 3 red, 8 green; 8 blue, 9 red; 7 red, 3 blue, 7 green; 2 green, 7 red, 1 blue\nGame 59: 4 green, 3 blue; 10 red, 4 green, 4 blue; 2 green, 14 red, 12 blue; 1 blue, 1 green, 13 red; 10 red, 3 green, 3 blue; 2 green\nGame 60: 9 red, 13 blue; 2 green, 5 red, 9 blue; 3 green, 10 blue\nGame 61: 2 red, 8 green, 4 blue; 3 green, 2 red; 10 red, 9 green, 12 blue; 11 green, 17 blue, 3 red; 7 green, 1 red, 14 blue\nGame 62: 1 green, 5 red, 13 blue; 5 blue, 1 green, 8 red; 2 green, 8 blue, 3 red; 1 green, 8 red\nGame 63: 8 green, 15 red, 2 blue; 4 blue, 3 red, 12 green; 4 green, 1 blue, 17 red; 9 green, 18 red, 4 blue\nGame 64: 7 blue, 17 red, 17 green; 3 blue, 4 green, 3 red; 4 red, 19 green, 1 blue; 11 blue, 14 red; 4 blue, 19 green, 7 red; 1 red, 10 green, 11 blue\nGame 65: 1 blue, 17 red, 5 green; 17 red, 3 blue, 2 green; 10 blue, 9 green\nGame 66: 5 blue, 6 red; 8 red, 2 blue, 1 green; 2 green, 3 blue; 8 blue, 10 red; 1 green, 2 red, 5 blue; 1 red, 3 blue\nGame 67: 12 green, 16 blue, 12 red; 15 red, 1 blue, 3 green; 10 red, 3 green, 10 blue; 2 blue, 6 green, 6 red; 9 red, 8 blue, 7 green\nGame 68: 10 red, 7 blue; 12 blue, 9 red; 12 blue, 9 red, 2 green\nGame 69: 14 blue, 3 red, 3 green; 7 green, 7 red, 2 blue; 8 blue, 4 green, 8 red; 6 blue, 14 red, 3 green\nGame 70: 7 blue, 6 green, 2 red; 2 red, 4 blue, 4 green; 2 red, 5 blue, 3 green; 6 green, 2 blue; 5 blue, 2 red, 2 green\nGame 71: 7 green, 15 blue, 3 red; 15 blue, 15 red, 2 green; 10 red, 9 blue; 6 green, 20 blue, 11 red; 12 blue, 3 green, 7 red; 1 red, 7 blue\nGame 72: 2 green, 9 blue, 7 red; 5 green, 3 blue, 5 red; 10 blue, 8 red, 7 green\nGame 73: 18 blue, 5 red, 1 green; 18 blue, 3 red, 9 green; 2 red, 4 blue, 9 green; 5 blue, 5 red; 2 blue, 10 green, 6 red\nGame 74: 1 blue, 10 green, 5 red; 4 green, 12 blue, 6 red; 7 red, 13 green, 3 blue; 5 blue, 8 green, 4 red\nGame 75: 4 red, 2 blue, 5 green; 2 blue, 7 red, 4 green; 2 blue, 4 green, 3 red; 12 green, 2 blue; 10 green, 1 blue, 2 red\nGame 76: 8 green, 6 blue, 5 red; 1 red, 2 blue, 9 green; 7 red, 9 green; 5 green, 1 blue, 11 red\nGame 77: 3 blue, 10 red, 9 green; 7 blue, 6 red, 4 green; 4 red, 1 green, 8 blue\nGame 78: 2 blue, 1 red, 14 green; 11 green, 1 blue; 15 green, 1 red\nGame 79: 3 green, 17 blue, 1 red; 3 red, 2 blue, 10 green; 13 blue, 11 green, 5 red; 16 blue, 2 green, 16 red; 11 green, 1 blue, 14 red\nGame 80: 7 red, 10 blue, 5 green; 6 blue, 6 green, 8 red; 6 blue, 3 green, 5 red\nGame 81: 1 blue, 14 red, 6 green; 1 red, 13 blue, 12 green; 2 green, 15 red, 15 blue\nGame 82: 5 blue, 8 red, 6 green; 19 blue, 4 green; 9 green, 15 blue, 3 red\nGame 83: 19 red, 15 green, 2 blue; 17 red, 4 green, 1 blue; 13 green, 18 red\nGame 84: 9 green, 14 red; 11 green, 14 red, 1 blue; 1 blue, 2 red, 3 green; 13 green, 10 red; 1 green, 5 red\nGame 85: 4 red, 2 green, 11 blue; 8 blue, 3 red; 4 red, 1 blue, 5 green; 2 red, 3 green; 1 green, 8 red, 12 blue\nGame 86: 5 blue, 1 red; 8 blue; 2 red, 1 green, 12 blue; 12 blue, 2 red\nGame 87: 3 red, 10 green, 3 blue; 13 blue, 6 red, 2 green; 1 green, 2 red, 10 blue\nGame 88: 10 red, 3 green, 8 blue; 3 red, 18 blue, 2 green; 3 green, 15 blue; 15 green, 16 blue, 8 red\nGame 89: 10 blue, 1 red; 4 green, 9 red, 13 blue; 10 red, 3 green, 12 blue; 2 green, 1 red, 16 blue; 10 blue, 1 red, 6 green\nGame 90: 4 red, 2 blue, 15 green; 5 red, 1 blue, 12 green; 3 blue, 3 red, 7 green; 4 blue, 3 red, 7 green; 1 red, 2 green, 1 blue; 1 blue, 4 green, 3 red\nGame 91: 16 red, 10 blue, 1 green; 13 green, 13 red, 19 blue; 11 blue, 12 green, 2 red\nGame 92: 8 blue, 4 green, 5 red; 7 blue, 4 red; 2 green, 15 blue; 16 blue, 4 red; 1 red, 7 green, 16 blue; 11 blue, 1 red, 3 green\nGame 93: 12 green, 2 blue, 2 red; 8 red, 16 green, 8 blue; 15 red, 4 blue, 7 green; 1 red, 4 blue, 15 green; 13 green, 5 red, 4 blue; 5 green, 8 blue, 12 red\nGame 94: 13 green, 10 red; 11 red, 19 green, 1 blue; 1 blue, 10 red, 12 green; 18 green, 9 red, 1 blue; 8 green, 1 red\nGame 95: 3 green, 4 blue; 2 red, 2 green, 2 blue; 7 red, 3 green\nGame 96: 5 red, 7 green; 4 blue, 14 green, 10 red; 13 green; 13 green, 3 blue; 13 green, 1 red, 3 blue; 12 red, 1 green\nGame 97: 2 green, 1 blue; 9 red; 4 blue, 8 red; 4 green, 1 red, 14 blue; 2 green, 9 blue; 1 red, 6 blue, 2 green\nGame 98: 12 green, 9 blue, 13 red; 6 red, 7 blue; 2 blue, 2 green\nGame 99: 9 red, 3 green, 10 blue; 10 red, 10 blue, 4 green; 2 green, 15 blue, 3 red; 12 blue, 4 red\nGame 100: 15 blue, 6 red; 1 green, 2 red; 12 blue, 8 green, 1 red; 1 red, 7 blue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  2023 Day 2 Full Solution\n  \n\n\n\nimport math\nimport re\n\n\nwith open('input.txt', \"r\") as f:\n    lines = f.readlines()\n\n\ndef extract_cubes(line):\n    return [extract_max(line, color) for color in ['red', 'green', 'blue']]\n\n\ndef extract_max(line, c):\n    return max(int(num) for num in re.findall(r'(\\d+) ' + c, line))\n\n\nmax_cubes = [extract_cubes(line) for line in lines]\nanswer1 = sum(game_id for game_id, cubes in enumerate(max_cubes, 1) if cubes[0] &lt;= 12 and cubes[1] &lt;= 13 and cubes[2] &lt;= 14)\nprint(answer1)\n\n\n# Part 2\nanswer2 = sum(math.prod(cubes) for cubes in max_cubes)\nprint(answer2)\n\n\n\nExecution took 0.01 seconds"
  },
  {
    "objectID": "posts/2023/03/2023-03.html",
    "href": "posts/2023/03/2023-03.html",
    "title": "2023 Day 3",
    "section": "",
    "text": "Ho ho ho, fellow adventurers!\nGear up for a grid-based challenge. In Advent of Code day 3, we are tasked with deciphering engine schematics to fix a gondola lift.\nThis puzzle is trickier than the previous ones, but still manageable. It’s our first grid question and involves parsing numbers, getting adjacencies, and handling duplicates.\nFirst, we’ll read the input. Note that we use f.read().splitlines() instead of f.readlines() so our lines don’t include \\n.\nwith open('input.txt', \"r\") as f:\n    lines = f.read().splitlines()"
  },
  {
    "objectID": "posts/2023/03/2023-03.html#part-1-neighbourly-numbers",
    "href": "posts/2023/03/2023-03.html#part-1-neighbourly-numbers",
    "title": "2023 Day 3",
    "section": "Part 1 Neighbourly Numbers",
    "text": "Part 1 Neighbourly Numbers\n\n\n  \n    Task 1\nGet the sum of numbers neighbouring a symbol.\n\nExample\n\n\n\nFigure Source\nlibrary(tidyverse)\n\ndf &lt;-\n  read_lines(\"467..114..\n...*......\n..35..633.\n......#...\n617*......\n.....+.58.\n..592.....\n......755.\n...$.*....\n.664.598..\"\n) |&gt;\n  str_split(\"\") |&gt;\n  map(enframe, name = \"col\") |&gt;\n  list_rbind(names_to = \"row\") |&gt;\n  mutate(\n    color = case_when(\n      value %in% c(\"*\", \"#\", \"+\", \"$\") ~ \"#BE4844\",\n      row == 1 & col &gt; 5 ~ \"#969696\",\n      row == 6 ~ \"#969696\",\n      !is.na(as.numeric(value)) ~ \"#2F7E4A\",\n      .default = \"#969696\"\n    ),\n    fontface = case_when(\n      color != \"#969696\" ~ \"bold\",\n      .default = \"plain\"\n    )\n  )\n\nadd &lt;- function(row, label, plus = TRUE, is_result = FALSE) {\n  component &lt;- annotate(\n    geom = \"text\",\n    x = 15,\n    y = row,\n    size = 7,\n    hjust = \"right\",\n    vjust = \"middle\",\n    color = ifelse(is_result, \"#91672C\", \"#969696\"),\n    fontface = ifelse(is_result, \"bold\", \"plain\"),\n    label = label,\n    family = \"LM Roman 10\"\n  )\n  if (plus) {\n    component &lt;- list(\n      component, \n      annotate(\n        geom = \"text\",\n        x = 15,\n        y = row + 0.5,\n        size = 6,\n        hjust = \"left\",\n        vjust = \"middle\",\n        color = \"#969696\",\n        label = \"+\",\n        family = \"LM Roman 10\"\n      )\n    )\n  }\n  component\n}\n\nneighbors &lt;- function(row, col, highlight = character()) {\n  draw_arrow &lt;- function(direction) {\n    dr &lt;- 0.55 * (str_detect(direction, \"S\") - str_detect(direction, \"N\"))\n    dc &lt;- 0.55 * (str_detect(direction, \"E\") - str_detect(direction, \"W\"))\n    if (dr != 0 && dc != 0) {\n      dr &lt;- dr * 0.8\n      dc &lt;- dc * 0.8\n    }\n    annotate(\n      geom = \"segment\",\n      x = col + dc,\n      xend = col + (dc * 1.00001),\n      y = row + dr,\n      yend = row + (dr * 1.00001),\n      #size = 1,\n      color = ifelse(direction %in% highlight, \"#1577A0\", \"#C2C2C2\"),\n      arrow = arrow(length = unit(0.015, \"npc\"), type = \"closed\")\n    )\n  }\n  map(c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\"), draw_arrow)\n}\n\ndf |&gt;\n  ggplot(aes(col, row, label = value, fontface = fontface, col = I(color))) +\n  geom_text(size = 7, family = \"LM Roman 10\") +\n  scale_y_reverse(\n    limits = c(12, 0),\n    expand = c(0, 0)\n  ) +\n  add(1, \"467\") +\n  add(3, \"35 + 633\") +\n  add(5, \"617\") +\n  add(7, \"592\") +\n  add(8, \"755\") +\n  add(10, \"664 + 598\", plus = FALSE) +\n  add(11, \"4361\", plus = FALSE, is_result = TRUE) +\n  neighbors(2, 4, c(\"S\", \"SW\", \"NW\")) +\n  neighbors(4, 7, c(\"N\", \"NE\")) +\n  neighbors(5, 4, c(\"W\")) +\n  neighbors(6, 6, c(\"SW\")) +\n  neighbors(9, 4, c(\"S\", \"SW\")) +\n  neighbors(9, 6, c(\"NE\", \"SE\", \"S\")) +\n  annotate(\n    geom = \"segment\",\n    x = 11.5,\n    xend = 15,\n    y = 10.5,\n    yend = 10.5,\n    color = \"#969696\"\n  ) +\n  theme_void()\n\n\n\n\n\n  \n\n\n\n\n\nIn part 1 we need to locate all the symbols and neighbouring numbers. Our approach is essentially this.\n\nfor each symbol:\n  get the 8 neighbouring numbers\n  remove duplicates\n  add the numbers to the answer\n\nRemoving duplicates is important. Consider the # symbol in the example. It is touching 633 to the north and touching it again to the north-east. We need to be mindful to not double-count.\nAlso, we want to be mindful to not accidentally under-count. Consider ..123*123.. where * has two distinct neighbours, 123 and 123. We want to only discard true duplicates.\n\nDigital Fingerprints\nWe’ll construct a dictionary, numbers, which maps every digit’s coordinate to its representation.\nnumbers = {\n  (0, 0): &lt;467&gt;,\n  (0, 1): &lt;467&gt;,\n  (0, 2): &lt;467&gt;,\n  (0, 5): &lt;114&gt;,\n  (0, 6): &lt;114&gt;,\n  (0, 7): &lt;114&gt;,\n  ...\n}\nWhat should the values of this dictionary be? It can’t just be the integer value as that wouldn’t necessarily uniquely identify each number.\nWe’re going to use re.finditer to get the start, end, and value of each number. We’ll do something sneaky and just use the re.Match objects as the values of numbers!\nIn the code below, match is a re.Match object which contains the start, end, and value a number. It uniquely identifies that number as each re.Match object has its own object ID - even if the string is identical.\n\nimport re\n\n\nnumbers = {}\nfor row, line in enumerate(lines):\n    for match in re.finditer(r'\\d+', line):\n        for col in range(match.start(), match.end()):\n            numbers[(row, col)] = match\n\n\n\nSymbol Surroundings\nWe want another dictionary, symbols, which maps every symbol’s coordinate to its character and neighbouring numbers.\nsymbols = {\n  (1, 3): ['*', [467, 35]],\n  (3, 6): ['#', [633]],\n  ...\n}\nAgain, we can get the symbol locations using re.finditer.\n\nsymbols = {}\nfor row, line in enumerate(lines):\n    for match in re.finditer(r'[^0-9.]', line):\n        symbols[(row, match.start())] = [match.group()]\n\nThen append the neighbours. Note that neighbours is constructed using set comprehension, so it is de-duplicated.\n\nfor (row, col), l in symbols.items():\n    neighbours = {numbers[(row + dr, col + dc)] for dr in range(-1, 2) for dc in range(-1, 2) if (row + dr, col + dc) in numbers}\n    l.append([int(match.group()) for match in neighbours])\n\n\n\nAssumption\nFinally, the answer is just the sum of all the neighbours.\nNote that this assumes that no number is neighbouring more than one symbol. If that were the case, it would be double-counted.\n\nanswer1 = sum(num for _, neighbours in symbols.values() for num in neighbours)\n\n\n\nSumming It Up\nNow, let’s put it all together.\n\nimport re\n\n\nnumbers = {}\nsymbols = {}\nfor row, line in enumerate(lines):\n    for match in re.finditer(r'\\d+', line):\n        for col in range(match.start(), match. end()):\n            numbers[(row, col)] = match\n    for match in re.finditer(r'[^0-9.]', line):\n        symbols[(row, match.start())] = [match.group()]\n\nfor (row, col), l in symbols.items():\n    neighbours = {numbers[(row + dr, col + dc)] for dr in range(-1, 2) for dc in range(-1, 2) if (row + dr, col + dc) in numbers}\n    l.append([int(match.group()) for match in neighbours])\n\nanswer1 = sum(num for _, neighbours in symbols.values() for num in neighbours)\nprint(answer1)\n#&gt; 543867\n\n\n  Key Points\n  \n    \n\nre.finditer locates the symbols and numbers\nThe numbers dictionary maps digit positions to their re.Match object\nThe symbols dictionary maps symbol positions to their character and a list of neighbouring integers\nThe answer is the sum of those integers\nThis solution assumes that a number has at most one symbol neighbour"
  },
  {
    "objectID": "posts/2023/03/2023-03.html#part-2-asterisk-adjacencies",
    "href": "posts/2023/03/2023-03.html#part-2-asterisk-adjacencies",
    "title": "2023 Day 3",
    "section": "Part 2 Asterisk Adjacencies",
    "text": "Part 2 Asterisk Adjacencies\n\n\n\n  \n    Task 2\n\nIdentify *s neighbouring exactly two numbers\nMultiply its two neighbours\nSum these values.\n\n\nExample\n\n\n\nFigure Source\nneighbors2 &lt;- function(row, col, highlight = character(), color = \"#1577A0\") {\n  draw_arrow &lt;- function(direction) {\n    dr &lt;- 0.55 * (str_detect(direction, \"S\") - str_detect(direction, \"N\"))\n    dc &lt;- 0.55 * (str_detect(direction, \"E\") - str_detect(direction, \"W\"))\n    if (dr != 0 && dc != 0) {\n      dr &lt;- dr * 0.8\n      dc &lt;- dc * 0.8\n    }\n    annotate(\n      geom = \"segment\",\n      x = col + dc,\n      xend = col + (dc * 1.00001),\n      y = row + dr,\n      yend = row + (dr * 1.00001),\n      color = color,\n      arrow = arrow(length = unit(0.015, \"npc\"), type = \"closed\")\n    )\n  }\n  map(highlight, draw_arrow)\n}\n\ndf |&gt;\n  mutate(\n    color = case_when(\n      row == 4 & col == 7 ~ \"#969696\",\n      row == 5 & col == 4 ~ \"#969696\",\n      row == 6 & col == 6 ~ \"#969696\",\n      row == 9 & col == 4 ~ \"#969696\",\n      \n      row == 3 & col &gt; 4 ~ \"#969696\",\n      row %in% c(5, 7) ~ \"#969696\",\n      row == 10 & col &lt;= 4 ~ \"#969696\",\n      .default = color\n    ),\n    fontface = case_when(\n      color != \"#969696\" ~ \"bold\",\n      .default = \"plain\"\n    )\n  ) |&gt;\n  ggplot(aes(col, row, label = value, fontface = fontface, col = I(color))) +\n  geom_text(size = 7, family = \"LM Roman 10\") +\n  scale_y_reverse(\n    limits = c(12, 0),\n    expand = c(0, 0)\n  ) +\n  add(2, expression(\"467 \" %*% \" 35\")) +\n  add(9, expression(\"755 \" %*% \" 598\"), plus = FALSE) +\n  add(11, \"467835\", plus = FALSE, is_result = TRUE) +\n  neighbors2(2, 4, c(\"S\", \"NW\")) +\n  neighbors2(4, 7, c(\"N\"), \"#C2C2C2\") +\n  neighbors2(5, 4, c(\"W\"), \"#C2C2C2\") +\n  neighbors2(6, 6, c(\"SW\"), \"#C2C2C2\") +\n  neighbors2(9, 4, c(\"S\"), \"#C2C2C2\") +\n  neighbors2(9, 6, c(\"NE\", \"S\")) +\n  annotate(\n    geom = \"segment\",\n    x = 11.3,\n    xend = 15,\n    y = 10.5,\n    yend = 10.5,\n    color = \"#969696\"\n  ) +\n  theme_void()\n\n\n\n\n\n  \n\n\nPart 2 tasks us with indentifying gears which are * symbols with exactly 2 neighbours.\nThis is straightforward as we have the symbols dictionary from part 1.\n\n\n\n\n\nimport math\n\n\nanswer2 = sum(math.prod(nums) for symbol, nums in symbols.values() if symbol == '*' and len(nums) == 2)\nprint(answer2)\n#&gt; 79613331\n\n\n  Key Points\n  \n    \n\nFilter symbols where the symbol is * and the number of neighbours is 2\nGet the product of neighbours, then the sum"
  },
  {
    "objectID": "posts/2023/03/2023-03.html#stocking-stuffers-auspicious-assumptions",
    "href": "posts/2023/03/2023-03.html#stocking-stuffers-auspicious-assumptions",
    "title": "2023 Day 3",
    "section": "Stocking Stuffers Auspicious Assumptions",
    "text": "Stocking Stuffers Auspicious Assumptions\nOur solution assumes that no number is neighbouring more than one symbol. This is true of our input.\nTo make the solution more general and handle cases where numbers could neighbor multiple symbols, we’d need to adjust our approach to avoid potential double-counting. However, this makes the solution clunkier.\n\nimport math\nimport re\n\n\nnumbers = {}\nsymbols = {}\nfor row, line in enumerate(lines):\n    for match in re.finditer(r'\\d+', line):\n        for col in range(match.start(), match.end()):\n            numbers[(row, col)] = match\n    for match in re.finditer(r'[^0-9.]', line):\n        symbols[(row, match.start())] = [match.group()]\n\nfor (row, col), l in symbols.items():\n    neighbours = {numbers[(row + dr, col + dc)] for dr in range(-1, 2) for dc in range(-1, 2) if (row + dr, col + dc) in numbers}\n    l.append(neighbours)\n\npart_number_matches = set().union(*(neighbours for _, neighbours in symbols.values()))\nanswer1 = sum(int(match.group()) for match in part_number_matches)\nprint(answer1)\n#&gt; 543867\n\nanswer2 = sum(math.prod(int(match.group()) for match in matches) for symbol, matches in symbols.values() if symbol == '*' and len(matches) == 2)\nprint(answer2)\n#&gt; 79613331\n\n\n  Key Points\n  \n    \n\nnumbers now stores its neighbours as a set of re.Match objects and not just a list of ints\nset().union(*l) will union all the sets in l\nThe matches are only converted to integers after de-duplication\nThis solution does not assume that a number has at most one symbol neighbour\n\n    \n  \n\nIt’s fine to tailor your solution to your input. While a general solution was possible for this problem, some days are practically impossible to solve in the general case and require crafting a solution specific to your input.\n\n\n\n  \n  \n     Problem\n  \n\n  \n  \n     Input\n  \n\n  \n  \n     Full Solution\n  \n\n\n\n\n\n\n\n\n\n  2023 Day 3 Input\n  \n\n\n\n....401.............425.......323......791......697...............963............................................420........................\n...*..................................%......#.....*....290.........................492.............656...@953.....................+830.....\n..159...........823...33.717.....572.......806...896......-.....335....834......815.............791....*..............776...................\n.........-.....#........*.........*..................715..........*.....*........*.....................5...*.....................688........\n....=..=..573..............212.......553.632....622....*.......260....29.........692.129....727...........290.........%32.....%...*..441....\n.791..998..............................*............531.......................84.......*..../.......506%......=............240..831..*......\n.....................321.586........447...&.-276.21......@..........12.......&.......-..333...................619..94................982....\n..........@...........#..*..............525.......*...183............*............407.......23.........%............&......846..............\n....97..686.............89.....................-..494..............875....*607.............*.......239.407..................%.......529.....\n.....+.........815..703............208.=555.856...........@............133........................*..........672...501........898#...*......\n...............*.......*...659.......*....................183..............528.......614.......4....................................39......\n...602..........804..313....*.......480..............602.............354......*877................832@.....140...$...........707.......222..\n...*....999.................23.264..............516.....*.......-....*....................................*.....722......24....*........*...\n436....+................./......./..........765*......37.....843....218..........852*68....290............410...........*.....539....896....\n.........../...#........907............587...............&................149...............*.......*..............#780..707................\n........349....603.598....................-....203.....178.......431......./...............152......571....926.750.............127..........\n.............@........*176.283...................*...%......642......../......20..............................*.........@.............534...\n...749..../.194..............*.......337.395*....682.429.=...#..........186.....*.........682..../......498..........%.8.............*......\n....*..324..........893*...878......*........659..........65....671.189.......641...........+.859.........$.......149....648........53.+....\n...776......$.....................667.................432...........*..............697............282.901...................*889........471.\n............103............../........-..................-...748&.257.............&...........739*....*......491*543................997.....\n.........2.........813*.....278..316.333.....296.142.+...................673.%....../.....+.........490...................790........*......\n......@.*.......................*...............*....643.464............*....25....108..807..179.........931.......289..........365...522...\n....367.250.927../.............754.........14...............*.+..........23...................*......&.....*..%..........323................\n................939...644..............791..*.551....35...937..806...............&.............536.930...703...565......*...............*640\n534$.................*.........$..448.....=......*...................707*658.....33....920..74.....................844................36....\n.......572....672...875......770.+................380.............52......................*.......-....251............%........*909......677\n.......*.......=........................658.889.........882.....=......................534..*..291...%....*.................289.............\n.212......993..............438./..........*....@..532......*586.163....213...307...........167.....981.700..................................\n....*.....*..................-..12...611...196.......*309.....................+.......*685............................403....243..+385......\n59...428..14...22.747....990............*........575...............................247.....985....&..................*.......*..............\n.................*........%...539.......416.712.....*2..408.......%....................999.......275......738.....715......670..............\n..357........653..............*....374..........285................785.........384......*.............277*........................765.137...\n...@..........*..@632......361.......=..............35.........329..............................=858..............798.................*.....\n......................216*.......459..................*..........&........479.....255......302......................*.530.........269..453..\n............./.573........153.....*........#.......462...%..........45......+.122*............*672....545........157.....*862.....*.........\n820....%...977.+...................726...790.199.........631....308..................755..............*...460..................643....#237..\n.......229.............727..425............../..........................228........#..$...............385....&...........695................\n...................978.*....*....................700....*.........256..@.........625......311.170...+................642*...................\n.492.....983.........-.577.743..................*....267.521........%....479.......................696.980......................*...........\n....*820.#....................................236.................*......*...856.............137...........489......409........177..450.....\n974.........479.$......182..456......./.............*755..617..333.849.........*...............*..........*..........=...-...........*......\n...+..........*..83.#....@.=...........893.......610.........*.................727....6*..488.839...449..541../97......560.........449......\n............208......168......971..........................547..........559............................=...........237...................641\n.......336...................*....563..993.911.=......853................*...............391...@572.................*.......*......614..*...\n........$...........579.....810....-......*....480....*......649.138..410..201..604........*..............450#.....485...124.841..*......790\n..399...........928.............67..................#..295......*............*...#....333...83...#111.............................635.......\n...=........./.....*..807...529..*......642#......603......704.........@....599......&.................=....................................\n..............233.618..../........114........566......100..*.....423.26...............................168................555$..........#625.\n.....608*372..................543..........*.*............4.....*.......+374.......436*...................680.135....................*......\n.................................@...385.309..111......69....991..127........693#......985....25..856*96.+.......*860..........%..278.160...\n.......351.......495=.772..............*...............*...........*...........................@............569...............905...........\n........................*.$402........640.*.............366.........350...623&...250.............446*341.....=.........................292..\n....#..*...595.289...347..........75.......844......307..........................*....585.....*..................766+...................*...\n.148..906.....*..........232.449...*...........................................326..$...-..102.595.....406............-...........650....682\n..........619...23........$...*.....138.893.......890...79....53.........118........966................+..............233............*......\n.........*......../..........62..........*........*....*.............@..*....................245...........-....806.........98........318...\n....534+.264..993...420.................675..77..659..263..........615.405...............=..*......%..75...614.*..................4.........\n...............*..............421.........................834*287.......................813..651.902...*........134.....$...........334.....\n....631....=..443........................352..........941...............317.......*286...............562.855............690....387.....*....\n.27...$.430......................89....-....*90...&......%..........155.......899.......%59....*986.................775..............25.....\n...*....................-.....+...*...952.........62.........478...........&...../..........694.........775.....640..$......................\n....102..........+197....109.270.453.....................................641.......123..........573....*.......=............880.403+........\n.........87.186..........................709.+219........224.726...882.............*...868..203*....732............928*607..*...............\n..819....*..*.............*....81........*....................-../..%...+..........700.=.......................149............*....438..=...\n....#.875..223.106.........646......%.....519...579.............38.....883.626@....................149..........=..........205.272./....480.\n.......................965.........332.........*......221.292...........................594..945......*931..365....814*214..................\n..228*....29............*....79...........+.....811.....*..*..592..........681.............*....#.427........*................170..58.......\n......563...*........817..93*...+60..507...898........796.942...*..=335.......@...490....488.......-......974....817...........*....+.......\n...........519..&...................*..........948.............454......184.........*.........=.......................409......947..........\n...............272..........257....712............+.@.....338..............*381...824..923..756.............971*181....=....+......430......\n....228.............709.......&......................685.....*..597....135......+.....*..........+......471..................452..*......923\n....*..................#...........271.....................167.*.........*.......325.935..........224......*.....749&...-..........587......\n..464.../199..$..........50...........*..794..........36.......733....................................@....414...........605................\n...............765.%.......=.215*717........*715....................210......845.......................643........66...........*908.........\n.........215........761............................544....781...390*.....576..*....869..781....517................*.....356.664.......=.....\n..............316...........235/...............715*.....-....*.............*..130..........*..@..........&.........564.*...............89...\n...................................&....169...........353....390....57.71.847...........716.........466..516..651......447..................\n.......459..................101.379.....*......324...................#.#............943..............*...........%.........$625.../...586...\n........*.....173...................198..306...*....313........51............629...*..........-958..228.178.......................967.......\n......714...@.........206.......934*.........109...........*.........../......*....832...................*........934.....921..........897..\n...........487............700......................*507..415....349%...179...961................437.......489.......*............../...*....\n.................*440.952*................667...533.....................................359.618....*927.........................968...412...\n...........-..778..................667.....@..........764..401.........279.......#.748.....*................534*.....444....................\n...835..779......../.....443.........*.........................53/......=......774......=....784...204..385.....929..........+...861........\n......%..........74..947*.....187&.874..........&.........................545........752.......$....$...*..................308.....*..284...\n........#.................190...........445$..784...51*226...................*............*245..........435.......=...200..........88.*.....\n640.....310...&...........*......296..........................................107......943..........244...........662......=..440+....302...\n...*..........67........381..............856....349...........790*...911........................901...*......733........844.................\n.327..............885........169.....419........*.....62..........70..@..664...........=...422%...*....617.....*....................230*....\n...........916...@.............................95....@.....+.........................355.........104...........149......................569.\n.............*.........................230.../..............350..............................432.....710............=.........=.............\n..925..545..634.....@..297*933...........*....839...33...........34.....162.......577..248.....#...........814...524..........790......9/...\n...*...............66....................421............606+..*../.......&.........*....&..129..............=......................529......\n659..........253...........$504.......*......................379....&........./..860......+..............&...............%.....658*....310..\n........208...*........................354..........................647......326...............911.....503.......11.......293...............\n....*.....&.617..511.........885.906......................166/......................589..........*..........749....*931..........915........\n.852.908........................*................../........................297.470*........#628..269...613......#................*.........\n.........................716.................689...460...737*502...510.............../...........................778.......373..734.....+...\n..520=.........../.....*....*226........326.....+.................+............971...362........800$..904.303.........*874..........=..548..\n............554.889.720.854......808.....*..258............284*........639/...*...........................*........603.............839......\n...........*........................*690.71..*.........314.....795.86.........53.................786%...134...................890*..........\n663.....225...%........513...................951..........*........*...............275.995...764.....................=............30........\n...*...........353....*...........%......................468.....87..225........31..=.....%.=......../.......886.....84.....................\n..694......166........243........380...275..287..............261.....@.....888....*............162...278.......&..........351.534........197\n........$.......209.-......261...........*.......876.....15.....*.........*........712.....870...*.......897.....46...........#.............\n......450.........%..463.....%.679....119.....=.*....@...@.........871...408..995*...........*...922.+..........*...66.466..................\n..............803.........................$.250...493...............&.............356.519.552........737.......153....*.............+.......\n......982........*.....................540...................641.......................*......&....................................851../...\n..............638..............=.306....................+938..@................*520....511.174......*..........-......*503...832.........219\n.292..239...................775..*......334..../582...................173...859..................238.678......117..429.......%...708.534....\n........*........240....491.....546...................+................*.............%....498.............................55........*.....74\n.816.....406.......*...&..............181...........765.......776....+..636...&337...264..*............*716..$908...........*...............\n...................860....................980...................$..323....................163.......851............*.......396......501.....\n...-..20*197................722..........*...............................&.....408..............109.......794*155..590........./....$.......\n.482...........257..........*............999./850.........482..........933........*.*982...../.....*..........................826.......908.\n.......%597......@..345.329..172.....295...........349....*.....=527........174.727........645...167......@..........*......................\n.....................*.....+..........$.............*....725...............*............$............+.447..723...346.759............967....\n............638..............................589.....................................=..312..+....951..........=..........809*..........#...\n.............@............325..........322.........&......................508......359......768........8..&.........992.....................\n.783.32...................*............*.........656.............98*178.....%.....................74*.....2...410&....@............+........\n...*...*..54*525...112..720...66......641.+280.......................................................467.......................580..348.....\n..699.673......................................491..869............#......171..............98............473......%..............$..........\n........................%.....214.......303$......#..%.......191.852..560*.......835..550...$.150.........#........291.......240............\n.......579...982.........713....*...536.......................+...................*....#........$..840.......43................*............\n......$.........*....*.......606......+....48...........993.......838*744.880....969........@........*......*....*726..........168...&......\n...............395.579............340......*........386.=...420..............*........833..835........257...842....................810...635\n......#......................%...........983...632.@........*........-...%..157...193*...........................@..137....209..............\n.....819.....................278..377........................578...195..230........................$......586.985...............263.417.....\n................592....../............*......../.............................922.......350........138.156*............698...78*.........$571\n....................405/..573.764....257.@940...34.977$..441....304.............*.....*................................*.......93..600......\n...643....675...262..........................................................993.....556...........314........278.258.322............*......\n...*.........*.....&................/.....................222.........959................@..121.......*...930.......#.......170*462.....588.\n384....+..19.863..............407=.283.........972...340....#....427*....*737...........558...%.....91......*...........................=...\n.....812...@.........298..563....................*......*............506..........845......................634...&............624+...&......\n.....................*.....=.....*.............492.563...950..827*...............+....................968......652..................49......\n.730.........498..382.........399.......824.........&...................390.630........248...........*.......-......448......-..............\n................*......333..........832*.....#...............$...565.....*...............*............701..564.........*.115..718.......313.\n.960...*965....993......*.....*..............604..........730...*..................234&..662.....+..............=69.930...*.......967*......\n.....30..............355...978...........67.........419........239..........732...............645..........................484........664...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  2023 Day 3 Full Solution\n  \n\n\n\nimport math\nimport re\n\n\nwith open(r'input.txt', \"r\") as f:\n    lines = f.read().splitlines()\n\n\nnumbers = {}\nsymbols = {}\nfor row, line in enumerate(lines):\n    for match in re.finditer(r'\\d+', line):\n        for col in range(match.start(), match. end()):\n            numbers[(row, col)] = match\n    for match in re.finditer(r'[^0-9.]', line):\n        symbols[(row, match.start())] = [match.group()]\n\nfor (row, col), l in symbols.items():\n    neighbours = {numbers[(row + dr, col + dc)] for dr in range(-1, 2) for dc in range(-1, 2) if (row + dr, col + dc) in numbers}\n    l.append([int(match.group()) for match in neighbours])\n\nanswer1 = sum(num for _, neighbours in symbols.values() for num in neighbours)\nprint(answer1)\n\n\n# Part 2\nanswer2 = sum(math.prod(nums) for symbol, nums in symbols.values() if symbol == '*' and len(nums) == 2)\nprint(answer2)\n\n\n\nExecution took 0.01 seconds"
  },
  {
    "objectID": "posts/2023/04/2023-04.html",
    "href": "posts/2023/04/2023-04.html",
    "title": "2023 Day 4",
    "section": "",
    "text": "Ho ho ho, fellow adventurers!\nIn Advent of Code day 4 we must convince an elf to lend us his boat by helping him decipher his scratchcards.\nThis puzzle propels us into the exciting world of dynamic programming, a technique for efficiently solving problems with overlapping subproblems. It’s our secret weapon against repetitive calculations!\nEven if you’re new to this, fear not! I’ll share an easy intuitive approach that will work with almost any dynamic programming challenge.\nFirst, we’ll read the input.\nwith open('input.txt', \"r\") as f:\n    lines = f.read().splitlines()"
  },
  {
    "objectID": "posts/2023/04/2023-04.html#part-1-multiplicative-match-mayhem",
    "href": "posts/2023/04/2023-04.html#part-1-multiplicative-match-mayhem",
    "title": "2023 Day 4",
    "section": "Part 1 Multiplicative Match Mayhem",
    "text": "Part 1 Multiplicative Match Mayhem\n\n\\[\n\\newcommand{\\grey}[1]{\\normalsize\\color{##969696}#1\\normalsize}\n\\]\n\\[\n\\newcommand{\\score}[1]{\\phantom{xxxxxxxx}\\llap{\\grey{#1}}}\n\\]\n\\[\n\\newcommand{\\plus}{\\smash{\\lower{0.5pc}\\color{#969696}{+}}}\n\\]\n\\[\n\\newcommand{\\card}[1]{\\text{Card #1: }}\n\\]\n\\[\n\\newcommand{\\num}[1]{\\large\\phantom{\\textbf{\\;1\\;\\;}}\\llap{\\text{\\;#1}}}\n\\]\n\\[\n\\newcommand{\\match}[1]{\\color{##2F7E4A}\\large\\phantom{\\textbf{\\;1\\;\\;}}\\llap{\\;\\textbf{#1}}\\color{##55595C}\\normalsize}\n\\]\n\\[\n\\newcommand{\\wins}[1]{\\phantom{xxx}\\llap{\\grey{\\text{#1}}}}\n\\] \n\n\n\n\n\n\n\n\n\n\n\n\n  \n    Task 1\nCalculate the sum of scores of each card as one for the first match and double for each subsequent match.\n\nExample\n\n\\[\n\\begin{aligned}\n&\\card{1}\\num{41}\\match{48}\\match{83}\\match{86}\\match{17}\\;|\\match{83}\\match{86}\\num{ 6}\\num{31}\\match{17}\\num{ 9}\\match{48}\\num{53}&\\wins{4 wins}&&\\score{1 \\times 2 \\times 2 \\times 2}\\plus\\\\\n&\\card{2}\\num{13}\\match{32}\\num{20}\\num{16}\\match{61}\\;|\\match{61}\\num{30}\\num{68}\\num{82}\\num{17}\\match{32}\\num{24}\\num{19}&\\wins{2 wins}&&\\score{1 \\times 2}\\plus\\\\\n&\\card{3}\\match{ 1}\\match{21}\\num{53}\\num{59}\\num{44}\\;|\\num{69}\\num{82}\\num{63}\\num{72}\\num{16}\\match{21}\\num{14}\\match{ 1}&\\wins{2 wins}&&\\score{1 \\times 2}\\plus\\\\\n&\\card{4}\\num{41}\\num{92}\\num{73}\\match{84}\\num{69}\\;|\\num{59}\\match{84}\\num{76}\\num{51}\\num{58}\\num{ 5}\\num{54}\\num{83}&\\wins{1 wins}&&\\score{1}\\plus\\\\\n&\\card{5}\\num{87}\\num{83}\\num{26}\\num{28}\\num{32}\\;|\\num{88}\\num{30}\\num{70}\\num{12}\\num{93}\\num{22}\\num{82}\\num{36}&\\wins{0 wins}&&\\score{0}\\plus\\\\\n&\\card{6}\\num{31}\\num{18}\\num{13}\\num{56}\\num{72}\\;|\\num{74}\\num{77}\\num{10}\\num{23}\\num{35}\\num{67}\\num{36}\\num{11}&\\wins{0 wins}&&\\score{0}\\llap{\\lower{0.4pc}\\underline{\\phantom{\\large{\\textbf{13}}}}}\\phantom{\\plus}\\\\\n& & && \\color{#91672C}\\large{\\textbf{13}}\\normalsize\\phantom{\\plus}\n\\end{aligned}\n\\]\n  \n\n\n\n\n\nPart 1 is straightforward. We need to find the overlap of two sets and do some basic scoring.\nWe can parse out the left and right numbers into sets. Then the number of wins is just the length of the intersection of those sets.\n\nimport re\n\n\ncards = [[set(re.findall(r'\\d+', side)) for side in line.split(':')[1].split('|')] for line in lines]\nn_wins = [len(have.intersection(want)) for have, want in cards]\n\nThe score can be calculated as \\[\n\\begin{equation}\n\\text{score}(\\text{wins})=\n    \\begin{cases}\n        2^{\\text{wins} - 1} & \\text{if wins} \\gt 0\\\\\n        0 & \\text{otherwise}\n    \\end{cases}\n\\end{equation}\n\\]\n\nanswer1 = sum(2**(n - 1) for n in n_wins if n &gt; 0)\n\nPutting it all together\n\nimport re\n\n\ncards = [[set(re.findall(r'\\d+', side)) for side in line.split(':')[1].split('|')] for line in lines]\nn_wins = [len(have.intersection(want)) for have, want in cards]\nanswer1 = sum(2**(n - 1) for n in n_wins if n &gt; 0)\nprint(answer1)\n#&gt; 26426\n\n\n  Key Points\n  \n    \n\nParse the left and right numbers into sets\nCalculate the number of wins as the length of the intersection of those sets\nCalculate the score based off the number of wins"
  },
  {
    "objectID": "posts/2023/04/2023-04.html#part-2-cutting-corners-caching-card-copies",
    "href": "posts/2023/04/2023-04.html#part-2-cutting-corners-caching-card-copies",
    "title": "2023 Day 4",
    "section": "Part 2 Cutting Corners Caching Card Copies",
    "text": "Part 2 Cutting Corners Caching Card Copies\n\n\n\n  \n    Task 2\nEach match wins copies of subsequent cards. Count all original cards and won copies to find the number of total cards.\n\nExample\n\nIn this example, there are 6 original cards and 24 won copies for a total of 30 cards.\n\\[\n\\begin{aligned}\n&\\card{1}\\num{41}\\match{48}\\match{83}\\match{86}\\match{17}\\;|\\match{83}\\match{86}\\num{ 6}\\num{31}\\match{17}\\num{ 9}\\match{48}\\num{53}&&\\grey{\\text{Wins cards 2, 3, 4, \\& 5}}\\\\\n&\\card{2}\\num{13}\\match{32}\\num{20}\\num{16}\\match{61}\\;|\\match{61}\\num{30}\\num{68}\\num{82}\\num{17}\\match{32}\\num{24}\\num{19}&&\\grey{\\text{Wins cards 3 \\& 4}}\\\\\n&\\card{3}\\match{ 1}\\match{21}\\num{53}\\num{59}\\num{44}\\;|\\num{69}\\num{82}\\num{63}\\num{72}\\num{16}\\match{21}\\num{14}\\match{ 1}&&\\grey{\\text{Wins cards 4 \\& 5}}\\\\\n&\\card{4}\\num{41}\\num{92}\\num{73}\\match{84}\\num{69}\\;|\\num{59}\\match{84}\\num{76}\\num{51}\\num{58}\\num{ 5}\\num{54}\\num{83}&&\\grey{\\text{Wins card 5}}\\\\\n&\\card{5}\\num{87}\\num{83}\\num{26}\\num{28}\\num{32}\\;|\\num{88}\\num{30}\\num{70}\\num{12}\\num{93}\\num{22}\\num{82}\\num{36}&&\\\\\n&\\card{6}\\num{31}\\num{18}\\num{13}\\num{56}\\num{72}\\;|\\num{74}\\num{77}\\num{10}\\num{23}\\num{35}\\num{67}\\num{36}\\num{11}&&\\\\\n\\end{aligned}\n\\]\n\n\n\n\n\n%%{\n  init: {\n    'theme': 'base',\n    'themeVariables': {\n      'primaryColor': '#55595c',\n      'primaryTextColor': '#55595c',\n      'primaryBorderColor': '#C2C2C2',\n      'lineColor': '#C2C2C2',\n      'secondaryColor': '#C2C2C2',\n      'tertiaryColor': '#fff',\n      'background': '#FFFFFF',\n      'mainBkg': '#FFFFFF',\n      'clusterBkg': '#ededed',\n      'fontFamily': 'Nunito Sans'\n    },\n    'flowchart': {\n      'nodeSpacing': 15,\n      'rankSpacing': 50\n    }\n  }\n}%%\nflowchart LR\n  A[Card 1]:::starting --&gt; A1[Card 2]\n  A[Card 1] --&gt; A2[Card 3]\n  A[Card 1] --&gt; A3[Card 4]\n  A[Card 1] --&gt; A4[Card 5]\n  A1 --&gt; A11[Card 3]\n  A1 --&gt; A12[Card 4]\n  A2 --&gt; A21[Card 4]\n  A2 --&gt; A22[Card 5]\n  A3[Card 4] --&gt; A31[Card 5]\n  A11 --&gt; A111[Card 4]\n  A11 --&gt; A112[Card 5]\n  A12[Card 4] --&gt; A121[Card 5]\n  A21[Card 4] --&gt; A211[Card 5]\n  A111[Card 4] --&gt; A1111[Card 5]\n\n  B[Card 2]:::starting --&gt; B1[Card 3]\n  B[Card 2] --&gt; B2[Card 4]\n  B1 --&gt; B11[Card 4]\n  B1 --&gt; B12[Card 5]\n  B11[Card 4] --&gt; B111[Card 5]\n  B2 --&gt; B21[Card 5]\n  \n  C[Card 3]:::starting --&gt; C1[Card 4]\n  C[Card 3] --&gt; C2[Card 5]\n  C1[Card 4] --&gt; C11[Card 5]\n  \n  D[Card 4]:::starting --&gt; D1[Card 5]\n  E[Card 5]:::starting\n  F[Card 6]:::starting\n  classDef default fill:#EDECFF\n  classDef starting fill:#FFF3BF\n\n\n\n\n\n\n  \n\n\n\nThe example can be solved by constructing the graph and counting the number of nodes. However, our full input would have millions of nodes - that wouldn’t be very efficient.\n\nSpotting Superfluous Subproblems Saves Seconds\nTo tackle this problem, we first need to identify that this is a dynamic programming problem. How do we know that?\nWell, how many subproblems do we need to solve in the example? Each node is a subproblem so there are 30 subproblems.\nNow, how many distinct subproblems are there? That is, how many distinct nodes are there? Only 6!\nThis leads us to conclude that this is a dynamic programming problem as there are overlapping subproblems.\n\n\nFrom Brute Force to Brilliance\nSo how can dynamic programming help us?\nRather than solving all 30 subproblems, we can just solve the 6 distinct subproblems and reuse those results. This saves us from repeating work we’ve already done.\n\n\nEffortless Efficiency\nSo now we know we need to use dynamic programming, but how do we do that? The thing is, unlike specific algorithms with defined steps, dynamic programming is a broad paradigm. There are multiple different ways to implement it.\nI’m going to share the easiest and most intuitive way to implement dynamic programming: recursion with memoisation\n\nStep 1: Recursion\nWrite the most naive and inefficient recursive solution you can come up with. Remember that a recursive function has two components:\n\nBase case\nRecursive case\n\n\ndef count_scratchcards(i):\n    # 1. Base case: If we win a card that doesn't exist\n    if i &gt; len(n_wins):\n        return 0\n  \n    # 2. Recursive case: The number of cards is this card (1) plus the sum of the next n cards\n    return 1 + sum(count_scratchcards(i + j + 1) for j in range(n_wins[i]))\n\n\n\nStep 2: Memoisation\nOur recursive function essentially counts every node in the graph. To make it only execute computations for distinct nodes we just memoise the function! Memoisation is caching the results of a pure function.\nLuckily, this is just one line in python.\n\nimport functools\n\n\n@functools.cache # Memoisation\ndef count_scratchcards(i):\n    # 1. Base case: If we win a card that doesn't exist\n    if i &gt; len(n_wins):\n        return 0\n  \n    # 2. Recursive case: The number of cards is this card (1) plus the sum of the next n cards\n    return 1 + sum(count_scratchcards(i + j + 1) for j in range(n_wins[i]))\n\nHere’s what this looks like showing calculated and cached nodes.\n\n\n\n\n\n%%{\n  init: {\n    'theme': 'base',\n    'themeVariables': {\n      'primaryColor': '#55595c',\n      'primaryTextColor': '#55595c',\n      'primaryBorderColor': '#C2C2C2',\n      'lineColor': '#C2C2C2',\n      'secondaryColor': '#C2C2C2',\n      'tertiaryColor': '#fff',\n      'background': '#FFFFFF',\n      'mainBkg': '#FFFFFF',\n      'clusterBkg': '#ededed',\n      'fontFamily': 'Nunito Sans'\n    },\n    'flowchart': {\n      'nodeSpacing': 15,\n      'rankSpacing': 50\n    }\n  }\n}%%\nflowchart LR\n  A[Card 1] --&gt; A1[Card 2]\n  A[Card 1] --&gt; A2[Card 3]:::cached\n  A[Card 1] --&gt; A3[Card 4]:::cached\n  A[Card 1] --&gt; A4[Card 5]:::cached\n  A1 --&gt; A11[Card 3]\n  A1 --&gt; A12[Card 4]:::cached\n  A11 --&gt; A111[Card 4]\n  A11 --&gt; A112[Card 5]:::cached\n  A111[Card 4] --&gt; A1111[Card 5]\n\n  X:::space\n  B[Card 2]:::cached\n  C[Card 3]:::cached  \n  D[Card 4]:::cached\n  E[Card 5]:::cached\n  F[Card 6]\n  classDef default fill:#EDECFF\n  classDef cached fill:#FFADAD\n  classDef space fill:white,color:white,stroke:white\n\n\n\n\n\n\n\n\n\n\n\n\nScratchy Solution Summarised\nOur final answer sums up all of the original cards.\n\nimport functools\n\n\n@functools.cache\ndef count_scratchcards(i):\n    if i &gt; len(n_wins):\n        return 0\n    return 1 + sum(count_scratchcards(i + j + 1) for j in range(n_wins[i]))\n\n\nanswer2 = sum(count_scratchcards(i) for i in range(len(n_wins)))\nprint(answer2)\n#&gt; 6227972\n\n\n  Key Points\n  \n    \n\nUses dynamic programming via recursion with memoisation\ncount_scratchcards naively recursively counts the ith card\n\nBase case: If i exceeds the number of cards then there are 0 cards\nRecursive case: 1 (for the current card) plus the sum of subsequent cards\n\n@functools.cache memoises the function meaning it executes only a few hundred times instead of millions"
  },
  {
    "objectID": "posts/2023/04/2023-04.html#stocking-stuffers-dynamic-programming-for-dummies",
    "href": "posts/2023/04/2023-04.html#stocking-stuffers-dynamic-programming-for-dummies",
    "title": "2023 Day 4",
    "section": "Stocking Stuffers Dynamic Programming for Dummies",
    "text": "Stocking Stuffers Dynamic Programming for Dummies\nDynamic programming involves two steps:\n\nBreaking a problem down into subproblems.\nRecognising that many of these subproblems are equivalent. As we solve each subproblem, we record its answer. When we encounter a subproblem again, we simply retrieve its stored solution, avoiding wasteful recalculations.\n\n\n\n\n\n\n\nNote\n\n\n\nWhen you have 1 without 2, you are employing divide and conquer and not dynamic programming. E.g. quicksort and binary search.\n\n\nThis can be implemented in two ways:\n\nTop-down: Starts with the whole problem, breaks it down into smaller subproblems, and recursively solves them, storing solutions to reuse as needed.\nBottom-up: Starts with the smallest subproblems, solves them, and builds up to the larger problem, iteratively combining solutions until the whole problem is solved.\n\nLet’s use the most common example, the Fibonacci Numbers. They’re defined as \\[\n\\begin{equation}\nF_n =\n    \\begin{cases}\n        1 & \\text{if } n = 1 \\text{ or } n = 2\\\\\n        F_{n-1} + F_{n-2} & n \\gt 2\n    \\end{cases}\n\\end{equation}\n\\]\n\nTop-Down\nThe easiest way to implement top-down dynamic programming is recursion with memoisation\nWriting the problem recursively starts with the whole problem, breaks it down into smaller subproblems. Memoisation stores the solutions and reuses them as needed.\nThe mathematical definition directly translates to a recursive definition in python. Slap a @functools.cache on that bad boy and you’re done!\n\n@functools.cache\ndef fib(n):\n  if n in (1, 2):\n    return 1\n  return fib(n - 1) + fib(n - 2)\n\n\n\nBottom-Up\nWith bottom-up, we typically have an array that is conventionally called dp. We start with the smallest subproblem and build from there (fib(1), fib(2), ..., fib(n)).\n\ndef fib(n):\n  dp = [0] * (n + 1)\n  dp[1] = 1\n\n  for i in range(2, n + 1):\n    dp[i] = dp[i - 1] + dp[i - 2]\n\n  return dp[n]\n\n\n\n\n  \n  \n     Problem\n  \n\n  \n  \n     Input\n  \n\n  \n  \n     Full Solution\n  \n\n\n\n\n\n\n\n\n\n  2023 Day 4 Input\n  \n\n\n\nCard   1: 98 16 95 90 53 33 43  7 46 45 | 85 15 78 57 34 10 46 90 33 13  8 54  4 37 25 63 55 41  7 82 69 16 30 76  2\nCard   2: 55 34 32 64 52 76 54  8 36 94 | 94 95 76 66 38 26 80 54 32 91 19 64 21 55 36 96 52 82 15 56 70 89 46 71 74\nCard   3: 35 26 78 89 82 92 37 10  3 43 | 41 81 62 52 92 63 26 57 28 55 93 30 72 71 99 84 96 60 82 78 73 65 43 50 25\nCard   4: 71 27 75 73 79 83 44 55 31 49 | 74 79 17 38 28 41 88 25 61 55 12 40 43 44  6 73 71 83 49 75 67 80 27 10 31\nCard   5: 26 10 58 57 85 65 42 23 97 30 | 65 26 85 97 31 10 23 88 58 16 80 22 67 44  7 77 30 69 34 42 24 57 66 27 99\nCard   6: 56 24 39 96 36 46 48 94 30 58 | 16 24 99 48 73 30 91  7 87 57 23 49 69 39 94 63 17 58 56  9 34 36 31 46 96\nCard   7: 82 75 29 17 66 41 25 52 98  5 | 30 41 73 66 25 57 47 22 89 34 75 21  5 63 90 85 13 38 82 17 29 71 98 52  1\nCard   8: 45 56 10 72 89 61 64 32 82  7 | 64 32 45 67 84 28  2 56 10 82 55 72  6 61 97 91 89  7 22 70 88  3 41 98 13\nCard   9: 92 39 44 48 96 72 43 78 98 86 | 76 87  9 45 98 47 31 44 34 92 43 54 72 39 50 96 77 86 62 13 16  6 78 48  8\nCard  10: 66 44 15 56 88 27 54 51  5 92 | 44 92 18 56 22 85 40 76 90 83  5 13 35 59 27 65 62 15 95 94 81 39 88 54  6\nCard  11: 13 42  7 36 46 82 78 60  1 55 | 42  7 95 43 13 82 94 32 74 16 46 70 60 78 86 30 53 36 55 96  4 92 49 44 26\nCard  12: 65 39 28 30 99 73 95 92 55 58 | 23 86 39 28 88 48 41 73 89 95 34 92  5 21 72 10 97 30 20 32 40 85 27 68 65\nCard  13: 68 60 92 16 70 71 15 94 43 83 | 70 59 88 67 27 77 51 54 15 22 49 71 94 60  7 72 47  1 38 39 36 19 68 12 16\nCard  14: 73 83  6  7 67 48 24 13 17 70 | 72 77 78 96 50 83 12 92 80 60 10 87 38 23 31 30 58 47  1 43 59 34 75  8  5\nCard  15: 69 53 76  5 55 85 42 10 94 63 | 59 66 87 60 28  6 24 32 40 70 69 63 54 97 96 82 94 10 53 74 42 16 76 44 55\nCard  16: 84 77 93 78 46 70  5 12 98 83 | 89  4 27 30 98 91 93 52 67 39 88 56 92 79 25  1 83 60 11 68 53 69 84 73 85\nCard  17: 26 37  9 58 78 49 52 31 97 34 | 39 99 37 81 49 72 84 94 76 70 33 41 12 89 85 47 51 65 97 16  3 24 19 79  8\nCard  18: 49 74 17 93 46 15 85 59 24 36 | 46 25 20 94 47 90 61 84 63  4 41 79 18 74 54 80 43 29 97 86 77 52  5 99  8\nCard  19: 85 64 79 31 53 92 42 69 93  3 | 47 62 61 21  3 49  7 74 98 22 86 34 48 15 76 13 89 81 31 77 37 56 99 97 50\nCard  20: 73 64 45 77 19 33 82 14 84 29 | 17 90 95 78 54 35 49 55 62 60 30 56 59 81 68 88 69 87 77  7 83 65 92  6  1\nCard  21: 91 38 35 34 53 92 66 82 55 21 | 23 39 87 34 27 31 15  5 36 64 80 97 52 89 94 50 26 37 45 44 17 30 88  1 82\nCard  22: 64 85 88 91 87 84 43 35 39 41 | 73  3 89 63 75 99 24  5  9 70 26  2 21 30 86 96 40 81 78 60 61 32 74 51 17\nCard  23: 84 72 32 92 44 94 46  7 19  4 | 73 39 45 18 76 65 25 40 32 66 78 51 15 50 69  9 11  6 26 90 61 35 22 54 55\nCard  24: 57 78 95  5 97 47 42 10 73 35 | 77 67 28 93 52 55 54 51 92 66 49 56 27 17 37  7 89 74 14 62 87 88 82 53  2\nCard  25: 21 69 58 54 90  1 95 45 72 53 | 72 81 77  1 69  9 58 21 29 22 95 45 68 80 90 54 78 97 48 53 59 36 31 46 75\nCard  26: 12 46 92 10 21 97 35 27 68 74 | 47 74 27 72 90 25 49 30  7 26 97 60 61  3 31 51 68 92 41 10  4  9 35 88 63\nCard  27: 21 27 52 20 85 42  5 70 56 37 | 55 57  2  5 79 11 58 77 49 45 74 69 27 70 21 56 66 12 76 20 92 84 37 85 61\nCard  28: 95 39 51 30 19 90 75  3 25 21 | 20 97 83 95 25 84 30 22 78 33 51 46 74 79 19 89 63 61 39 90 21  3  2 52 31\nCard  29: 53  5 71 37 67 81 19 52 36 74 | 52 93 15  5 33 36 28  8 12 32 31 43  2 13 74 62 59 10 20 70 68 14 87 19 38\nCard  30:  9 67 73 21 20 64 11 84 97 31 | 13 57 40 58 21 84 80 30 67 52 85 74 56 55 50 97 72 10 51 89  6 70 64 96 11\nCard  31: 64 54 68 67 50  6 88 29 63 38 | 38 67  3 31 61 83 28 44  1 99 66 65 74 98 64 55 51  8 54 94 46 68 95 79 50\nCard  32: 86 43 79 54  5  7 78 38 10 23 | 39 92 54  6 38 23  5  8 57 91 41  7 70 10 45 82  9 35 62 87 56 69  4 78 36\nCard  33: 66 58 52  9 27 81  1 17 94 78 | 34  3 95 56 69 78 91 45 32 30 59 84 64 52 36 62 26 16 63 99 27 89 74 28 24\nCard  34: 73 58 80 18 17 67 70 41 29 75 | 81 27 76 63 20 31 72 46 33 53 45 38 39 29 57 92 78 28 70 61 19 55 36 32 24\nCard  35: 79 31  6 76 62 27 97 40 92 41 | 26 97  5 47 76 40 21 87  3  4 38 61 53 48 43 36 41 65 55 25 57 96 79 18 49\nCard  36: 34 43 78 88 72 74 97  3 10 38 | 55 62 96 44 79 33 68 52 75 22 98 26 71 82 36 56 86 15 64 41 46 24 83 11 67\nCard  37: 26 61 31 17  4 56 12 50 86 51 | 17 68 22 61 85 78  9 51 14  6 39 31 28 27 96 50 52  4 86 43 12 26 59 74  7\nCard  38:  7 99 77 74  6 43 85 33 53 19 | 94 45 19 36  6 55 66 82 16 47 65 42 78 12 76 77 48 79  8 75 93 62 56 50 33\nCard  39: 57 97 81 84 25 60 16 44  1 78 |  4 78  9 51 90 40 34 64 89 38 80 16 71 35 88 87 41  6 65 23 39 15 67 52 72\nCard  40: 81 44 16 11 53 72 46 91 86 20 | 17 47 80 40  1 69 93 55 54 12 26 82 64 45 61 58 70 83 28 98 94 89 92 59 23\nCard  41: 55 89 25 91 42 45 80 59 84 82 | 83 31 11 42 61 48 77 95 89 84 13 79 92 25 68 33 26 40 52 24 66 45 97 29 17\nCard  42:  2 96 32 73  8 34 66  9  6 41 | 55 90 96 29 45 14  9  6 75 30 60 47 51 37 81  3 72 58 73 87 70 18 23 69 80\nCard  43: 65  3 18 82 67 22 62 79 17 94 | 51 11 26 23 89 55 13 32 77  9 12 38 60 20 25 64 14 43 24 35 56 80 42 99 86\nCard  44: 30 47 49 35 19 82 26 85 27 95 | 43 97 86 69 42 94 78 11 27 31 17 39 79 46 90 18 57 48  4 22 32 87 38 29 84\nCard  45: 83 15 74 94 99  1 57 82 68 16 | 95 97 84  6 87 81 20 64 69  5 28 30 29 88 43 15 98  7 24 55 34 39 47 92  3\nCard  46: 73 22 25 83 84 55 53 34 51  2 | 27 90 24 61 29 43 50 17 18 68 15 80  8 81 87 16 10 85 54 31 56 91 46 52 95\nCard  47: 70 19 17 60 46 78 75 86 27 59 | 86 99 19 45  8 17 29 41 52 75 60 47 79 54 57 70 46 59 51 68 94 78 27 53  1\nCard  48: 45  6 22 51 11 30 31  1 83 77 |  2 73 85 49 61 86 77 90 59 97 47 89 10 22 45 41 31  6 83 11  1 65 58 82 60\nCard  49: 60 78 33  6 11 36 72 56 61 94 | 43 16 62 46 31 61 78 56 60 67 33  6 13 72 94 68 18 77 11  5 36 54 10  8 66\nCard  50: 88 21 74 31 20 46 75 10 89 77 | 23 88 43 10 74 64  5 77 55 76 28 78 21 31 27 89  1 72 20 96 75 82 46 47 35\nCard  51: 12  8  3 94 21 26 24 86 45 85 |  6 14 12 10  7 69 78 31 64  5 44  3 80  4 52 71 20 84 50 59 13  8 94 77 99\nCard  52: 14 84 36 27  8 46 99 30  7 44 | 30 16 89 87 60  9 14 78 99  8 65 58 38 88  7 46 67 29 69 37 40 44 97 36 51\nCard  53: 39 37 12 83  4 98 96 92 41 73 | 67 20 91 99  4 10 63 26  6 75 40 92 37 65 39 73 68 84 12 83 96 98 54 41  7\nCard  54:  1 27 72 18 88 99 64 19 86 37 | 88 19 37 64  5 22 80 99  1 27 65  8  9 53 14 16 79 95 71 72 32 21 86 39 98\nCard  55: 39 88 93 55 97  9 34 92 45  2 | 92 55 21  1 78 34 97 94 11 38  2 44 64 15 80 35 60  9 81 54 88 91 96 85 45\nCard  56: 79 74 85 84 65 87 27 44 16 90 | 98 79 48 77 52 82 58 18 57 72 16 84  3 85 90 74 64 87 44 14 27 71 75  4 21\nCard  57: 96 53 75 92  9 43 56 52 91 97 |  7 76 56  3 92 75 16 43 96 72 29 49 66 91 28 70 87 33 58  1 52 19  9 97 53\nCard  58: 44 25 31 71 95 73 10 54 53 17 | 37 99 57 16 80 73 24 47 17 83 68 31 13 52 93 71 76 95 12 81 14 21 49  7 34\nCard  59: 29 45 26 80 95 57 20 13 14 63 | 83 51 36 19  5 58 44  3 97  1 16 67 15 41 53 31 28 91 84 40 90 24 88 60 18\nCard  60: 50 63 56 53 14 35 18  1 91 19 | 25 96 66 45 36 58 90 91  1 32 35 14  3 47 33 22 86 40 95 24 23  4 27 68 48\nCard  61: 42 83 31 68 92  7 26  4 29 22 |  7 17 31 43 79  2 33  4 63 88 26 61 81 93 69 85 89 11 65 77 42 92 37 57 32\nCard  62: 64 85 65 55 43 53 10 69 33 97 | 78 61 31 76 18 30 39 12 90 42  8 58 27 67 89 46 26 69 82 11 16 62  1 44 10\nCard  63:  6 33 83 73 17 30 32 81 49  5 | 52 90 76 93  5 86 73 34 92 47 67 55 43 61 26 18  1 33 16 50 49 74 24 46 89\nCard  64: 87 91 82 58 84 50 48  3 27 55 | 60 96 72 26 81  1  6 52 78 99  4 23 40 30 36 47 48 69 25 34 83 87 37 70 20\nCard  65: 92 76 38 30 50 39 75 90 44  1 | 68 71 39 13 53 25 63 76 16 59 41 43 18 22 17 98  4 10 86 89 12 26 72 95 19\nCard  66: 76 41 77 37 23 94 96 27 66 22 | 59 24 20 92  4 37 91 33 16 53  3 90  5 69 50 27 99 62 98 61 35 28 86 95 82\nCard  67: 37 98 85 97 69 64 72 47 13 50 | 43 10  6 41 67 80 82 29 40 94 61 33 36 63 65 76 24  9 86 57 79 73  8 45  2\nCard  68: 55 35 94 69 38 26 63 33 98 76 |  7 41 71 84 21 25 12 20 98 46 82 72 38  8 56 89 39 27 75 43 96 44 29 78 35\nCard  69: 24 86 74 36 66 84 90 61  1 94 | 55 57 18 85 69 97 16 34 32 54 93 35 64  9  8  4 98  5 72 59 75 23 62 91 26\nCard  70: 56 52 41 51 88 93 17 44 32  7 | 46 57 16 69 10 50 26  5 36 92 24 55 63 98 11  3 75 31 33 99 74  1 89 60 61\nCard  71: 15 41 67 78 51 72 12 77 32 88 | 83 93 91 13 50 87 47 96 16 19 11 34  6 27 82  5 46 56 69 79 62 85 35 40 61\nCard  72:  2 58 18 85 23 66 40  9 50 79 | 41  2 50  8 10 75  7 61 62 87 11 99 33 30 56 25 98 54 59 82 94 74 35 60 15\nCard  73: 75 90 45 31 56 86 11 42 89 26 | 89 90 28 11 57 49 24 35 14 19 72 94 79 44 30  3 43 41 53 46 26 86 97 51 20\nCard  74: 27 24 43 10 84 39 96 22 25 78 | 39 33 42 11 63 50 91 43 35  4 80 84 32 26 70 48 18  6 29 23 78 24 89 45  8\nCard  75: 79 38 25 51 77 84 68 43 83 10 | 75 74 13  3 24  6 55 81 11 39 49 66 99 50 48 15 14 37 61 57 17 59 87 36  9\nCard  76: 24  9 81 35 34  1 59 80 56 58 |  9 56 36 60  1 58 80 59 72 34 12 24 35 81 17 68 77 62 67 97 69 78 41 90 93\nCard  77: 84 55 45 44 36 80 97  5 64 70 | 57 22 49 54 43 71 53 90 12 35  6 64 79 84 99  7 94 17 38 70 45 72 68 80 74\nCard  78: 24 49 27 96 77 18 82 33 50 19 | 60  6 67 19  9 82 98 11 15 50 49 62 14 18 22 33 27 77 96  3  2  4 24 57 37\nCard  79: 83 54  1  2 26 55 33 37 76 20 | 30 55  1 51 50  7 26 34 76 62 89 92 17 38 33 20 13 95  2 65 45 54 37  6 25\nCard  80: 72 60 47 97 98 37 24 71 92 38 | 76 60 68 93 24 82 22 45 19 97 53 61 98 88 49 77 70 92  8 40 15 38 52 75 74\nCard  81: 78 90 38 77 11 47  1 80 64 30 | 90  2 67 95 70 75 83 19 11 18 86 38 30 93 62  1 77  7 65 41 84 64 78 47  4\nCard  82: 65 17 18 85 47 25 89 84 28  1 | 92 40 96 66  5 25 61 48 73 71 13 35 70 18 19 84 43 12 87 57 37  1 30 65 51\nCard  83: 99 71 23 76 61 19 58 57 78 15 | 96 19 98 71 34 38 95 93 48 79 53 42 15 61 56 29 23 99 39 60 78 40 49 12 57\nCard  84: 65 13  8 63 12 61 45 34 38 75 | 13 89 79 18 83 24 56 34  8 23 15 19 71 12 26 45 86 72 76 25 17 42 46 35 88\nCard  85: 29 85 81 70 92 51 67 83 48 13 | 28 53  4 11 55 61 27  9 36 82 47 98 65 43 33 74 88 64  2  3 37 22 62  6 84\nCard  86: 92 75 84 17 33 18 46 81 77  2 | 36 53 13 25  6 28 54 42 70 34 61 31 86 68 67  4 48 73 41 62 60 57 38 65  1\nCard  87: 29 68 34 54 22 33  6 28  1 47 |  4 79 62 77 82 78 75 70 93 58 38 56 97 13 80  2 45 76 31 90 15 37 81 63 95\nCard  88: 49 30 56 59  7 20 38 28 90 68 | 61 39 32 22 51 81 41 60 14 77  7 19 89 47 43 38 23 65 36 35 80  4 78 62 26\nCard  89: 17 70 26 62 84 57 67 31 15 87 | 59 74 32 72  7 97 23  5 99 77 50 22 17 76 73 30 10 20 44 70 55 38 75 29 24\nCard  90: 33 56 47 17  6 51 71 42  1 83 | 82  6 52 50 45 49 66 16 60 97 85 62 90 64 58  7 41 43 83 25  3 48 69 80 32\nCard  91: 69 37 35 55 42 57 78 80 60 43 | 16 91 92 10 32 68 84 64 60 79  2  9 21 58 77 93 53 11 52 83 50  4 86 89 22\nCard  92: 94 76 95 35 25 21 36 75 99 55 | 58 54 41 85 27 42 69 30 89 53 68 52 33 56  3 39 26 73 97 47 10 38 17 64 62\nCard  93: 30 38 15 75 10 78 45 57 51 96 | 51 57 46 78  6 55 96 35 38 15 45 63 28 41 26 10 18 64 24 93 75 62 32 92 30\nCard  94:  2  3 80 42 55 29 95 49 67 96 |  3 66 49 92 13 51 42 67 28 37 95 99 71  5 17 29 30  2 98 32 12 96  8 55 80\nCard  95: 54  8  7 36 81 32 62 66 92  6 | 77 92  8 54 53 34 88 62 84 48  6 35 68 32 66 23 95 81  7 18 17 36  3 60 75\nCard  96: 10 94 86 82 85 62 89 45 15  8 |  5 94 30 69 82 12 10 42 92 39 52 46 85 89 84 55 78 62  8 24 45 77 15 58 59\nCard  97: 21 92 18  5 25 95 55 67 52 78 | 11 68 32 41 67 66 80 82 72 15 49 25 97 12 18 38 37 76 92 34 74 53 55 36 78\nCard  98: 87 23 17 15 72 86 91 70 19 21 | 64 17 13 45 87 10 86 59 73 19 27 94 91 70 23 50 39 46 51 48 21 72 54 15 90\nCard  99: 10 14 71 83 92 54 52 64 27 15 | 58 89 63 24 57 55  1 95 53 43 84 54 65 61 26 87 96 71  3  9 82 77 91 62 92\nCard 100: 14 88 31 96 27 22 75 21 33 94 | 66 87 76 81 51 57 36 64 96 90  5 39 37 97  8 65 77 35 85 49 84 94 14 86 52\nCard 101: 32 70 58 16 57  5 34 79 12 74 | 37 29 87 68 84 16 54 27 24 65 48 62 60 85 86 55 19 61 35  9 17 69 32 99 75\nCard 102: 49 94 51 52  5 98 86 59 67 29 | 34 48 59 87 92 28 81 44 58 47 97 11 75 99 69 85 66 60 80 76 64 56 72 23 90\nCard 103: 22 96 38 63 73 62 57 18 93 19 | 97 87  5 68 47 88 78 70 77 62 17 94 81 19 28 36 79 72 64 53 29  3 20 89 60\nCard 104: 14 18 46 49 60 90  9 22 17 44 | 26 94 56 99 21 55 47 86 27 51 28 96 64 70 87 45 62 81 63 30 35 20 50 48 76\nCard 105: 40  5 36 22 90 29 58 54 53 64 | 64 47 95 43 16 60 22  1  9 71 94 27 18 59 32 20 52 92 12 90 55 83 19 61 89\nCard 106: 59 48 97 50 67 99 89 39 90 95 |  3 40 56 68  6 16 41 38 62 54 97 10 14 44 30 86 37 84 48 65 52 36 53 63  5\nCard 107: 55 34 89 15 93  2 31 43 87 17 | 88 70 83 32 98 53 86 68 50 37 27 56 51 10 45 36 20 94 59 80 66 44 73 99  8\nCard 108: 53 26 99 90 39 25 66 80 82 37 | 34 46 28 60 89 96 15 84  7 88 95 31 22 94 61 78 93 62 81 87 44  5 20 72  2\nCard 109: 50 31 91  6 92 72 90 18 71 37 | 18 86 37 50 68 71 35 95 16 85 93 55 96 80 52  6 77  4 92 20 91 56 90 31 72\nCard 110: 66 18 11 94 16 58 54 63 47 82 | 81 42 24 47 16 54 59 38 67 66 35 49 96 10 64 63 11 94 58 78 65 82 44 74 18\nCard 111: 98 21 14 86 68 94 60 31 24 38 | 84 98 22 11 71  9 83 14 89 94 85 42 63 30 16 86  2 23  3 31 61 18 68 54  4\nCard 112: 71 62 11 73 54 74 12 82 69 31 | 78  1  5 72 92 74 18 11 71 10 93 83 81 21 31 62 61 82 54  8 68 73 69  9 12\nCard 113: 42 62 85 51 61 40 76  8 78 12 | 85 78  2 42 71 28 25 75 69 40 88 24 98 84 92 51 10 21 27 12 62  8 56 41 76\nCard 114: 55 11 43 33 97 83 30 37 52  6 | 94 71 81 20  4 43 97 30 33 56 69 99 13  8 32 37 96 58 55 26 29 31 83 80 67\nCard 115:  4 40  9 71 18 59 19 84 91 72 | 62 43 73 87 42 61  7 99 45 70 97 18  6 77  8 93 81 55 41 38 12 64  1 82 51\nCard 116: 60 21 16 17 29 83 46 20 64 18 | 83 21 18 41 43 73 53 29 35 17  4 46  1 57 81 20 70 97  5 16 64 30 84 38 60\nCard 117: 51 54 92 49 29 82 43 58 19 50 |  7 50 71  4 82 22 23 56 31 27 58 26 19 29 49 11 69 52 92 54 24 43 51 93 73\nCard 118: 91  4 57 51 13 18  8 34 24  3 | 18  4 65 97 17 47 99 41 57 91 94  8 34 40 48 68 37  3  2 13 53 60 44 24 90\nCard 119: 81 80 42 19 62 23 86  5 20 45 | 96 27 94 86 39 67 20 93 81 66 14 23 45 98 84 37 85 19 62 80  5 61 82 12 59\nCard 120: 17 47 14 32 51 92 87 37 68 93 | 97 54 31 39 69 99 41  2 26 75 86 13 25 55 81 44 77  4 72 74 80 95 40 76 63\nCard 121: 75 68 67 87  7 16 71 12  8 19 |  8 42 99 66 70 64  5 73 67 15 40 72 34 28 18 61 30 83 49 17 87 93 25 24 43\nCard 122: 72  8 67 23 21 77 66 28 19 82 | 47 59 90 55 75 36 52 17 70 28 91 15 11 66 80 82 34 25 44 83 53 67 63 23 87\nCard 123: 48 80 92  9 12 61 29 32 41 55 | 53 28 21 64 24 56 89  9 80 29 85 67 46 15 52 90 11 62 74 69 47 32 75 60 31\nCard 124: 83 79 14 51 85 13 91 98 66  2 | 53 48 34 70 46 44 18 54 50 67 73  8 61 81 40 29 17 65 86 30 76 59 47 16 74\nCard 125:  1 11 69 75 62 45 35 53 34 23 | 97 12 16 45 31 21 87 95 22  7 25 62 64  6 11 10 29 91  9 24 53 74 75 40 41\nCard 126: 85 31 48 37 11 26 44 69 61 82 | 46 34 11 87 68 86 39 73 90 23 98 32 71 28 22 29 20 49 77 63 70 76  6 52  3\nCard 127: 11 15 54 44 46 82 78 74 26 23 | 29 11 18 99 20 17 67 55 83 65 22 27 10  3 62 89 69  1 45 91 84 61 90 92 44\nCard 128: 80 55 19 83 49 18 72 37 68 21 | 64 53 67 47 65 41 34 15 89 10 32 51 91 61 58 69 23 56 87 57 79 84 78  5  4\nCard 129: 30 46 40 21 99  2 51 95 74 97 | 62 67 68 44 86 93 47  5 39 12 49 88  9 36 89  3 38 65 79 42 20 45 14 70 91\nCard 130: 54 65 73  3 21 93 68 43 10 20 | 51 66  6  4 76 27 48 87 86 81 47 92 82 28 91 18 62  8 96 59 88 37 25 46 49\nCard 131: 71 43 15 32 16 50 28 80  1 81 | 76 64 21 55 12  6 96 20 77 22 26 32 54  8 62 68 17 86 56 53 10 81 33 41 24\nCard 132: 55 64 61 49 79 90  8 34 85 97 | 50  6 40 30 91 48 41 57 22  8 62 70 84 38 98 76 83 94 82 68  2 42 32 47 14\nCard 133: 48 60 44 27 13 41 99 35 78 74 | 88 25  8 19 69 34 79 83 46 72 52  6 16 97 62 15 70  4 56 30  3  7 36 23 73\nCard 134: 40 72 54  4 18 20  3 39 46 91 |  3 18 91 69 66 29 60 33 39 96 84  9 20 24 41 16 53 46 49 72 95 81  4 40 54\nCard 135: 82 66 29 16 86 89 15 23 95 11 | 14 43 57 68 80 11 89 92 59 67 86 39  8 18 16 23 83 64 82 66 95 29 15 37  6\nCard 136: 30 36 52 77 67 75 76  1 11 79 | 36 85 67 16 76 52 69 47 14 22 20 26 11 30 18 13 75 87 79 93 39 89  1 99 77\nCard 137: 54 79 25 62 93 65  7 68 90 11 | 94 73 86 78 64 71 25 82 20 30 97 28  9 65 90 35 70 87 32 31 49 51 74 26 72\nCard 138:  6 76  2 87 89 20 95 23 42 21 | 95 32 59 60 46 84 79 81 80 17 86 18 36 98 52  3 83 68 88 38 67 72 51 22 26\nCard 139: 61 81 70 50  3 47 88 54 60 90 | 26 63 75 70 81 13 90  8 60 46 56 61 14 68 88 82 47 36 50 18 73 54 98  3 76\nCard 140: 58 71 64 80 27 99 29 94 30 40 | 58 53 31 76 65 23 29 54 45 22 94 30 99 70 27 80  5 81  3 71 37  7 14 64 40\nCard 141: 12 73 17 11 89  3 80 72 92 63 | 23 78  2 80 35 96 41 72 30 39 48 10 51 87 12 34 92 73  6 45 89 76 27 11 60\nCard 142: 82 22  6 68 97 86 15 56 84  7 | 52 40 91 39 92 32 84 26 78 24 37 38 74 90 86 50 64 77  3 95 94  2 87 75 34\nCard 143: 28 59 68 11 93 48 63 96 39 54 | 98 15 56 11 45 78 54 93 44 66 33 59 90 74 63 97 39 30 96  5 48 26 76 42 28\nCard 144: 92 18 45 37 69 99 26 43 81 91 | 26 91 64 55 18 57 11 95  9 37 45 38 92 31  3 34 69 87 24 97 98 99 81 14 10\nCard 145: 11 69 35 21 10 49 84 75 50 68 | 16 67 48 15 43 54 95 11 91 27 39  9 34 88 86 20  4 89 47 75 62 61 64 85  8\nCard 146: 27 44 15 92 93 56 76 72 34 81 | 86 43 66 95 33 76 27 60 32 25 37 29  1 53 72 61 85 36 93 62 97 58 96 56 47\nCard 147: 54 67 15 21 28 99 33 63 96 82 | 76 54 91 95  8 73 30 28 65 82 67 98 43 81 39 33 44 53 49 16 21 88 12 45 15\nCard 148: 80 74 55 33 70 92 63 21 79 23 | 86 84 40 53 20 49 97  5 66 95 93 96 46 18 24 28 51  9 52 67 89 14 30  8 11\nCard 149: 65 14 55 81  1 73 41 44 47 87 | 71 87 90 34 25 36 82 59 88 85  4 27 63 98 30 13 17 44 93 14 32 55 68 41 29\nCard 150: 51 34 46 92 85 57 59 62 42 40 | 22 93 39 44 83 37  4 48 33  7 41 95 70 26 30 56 78 65  6 67 81 14 58 87 27\nCard 151: 89 79 66 24 39 35  9 32 76 30 | 69 80 83 86 22  4 15 92 87 11 64 40 94 77 82 29 57 36 54 95 43 78 65 74 84\nCard 152: 63 26 47 96 13 14  8  7 32 51 | 40 65 90 80 33  9 99 67 42  1 29 83  2 93 23 45 53 94 79 39 18 35 72 91  3\nCard 153: 76 45 64 13 85 42  5 47  2 40 | 34 46 19 21 35 77 71 56 94 27 37  8 60 90 96 63 57 55 32 95 68 10 73  4 51\nCard 154: 96 31 79 16 50 15 92 67 91 47 | 27 44 86 41 18 63 28 21 38 12 68 48 39 66 58 99 52 53 80 64 24  7 93 95 55\nCard 155: 84 46 62 78 15 29 87 73 27 67 | 50 25 75 90 66 34 72 31 33 24  8 41 29 69 20 54 32 85 65 68 21 94 64  9 42\nCard 156: 57 55 36 90 19 73 42  5 17 21 | 60 26 47 37 51 86  9 65 69 92 88 44 53 42 54 15 63 17 91 72 83 89  8  4 81\nCard 157: 32 39  2 75 90  5 85 50 22 80 | 19 29  5 85 20 90 87 61 75 78 47 95 34 63 57  2 33 82 24 56 80 49 70 72 21\nCard 158: 36 76 91 66 19 88 59 24 11 87 | 48 72 97 45 75 29 70  9 31 96  3 16 36 24 90 67 76 82 42 18 80 81 40  5 46\nCard 159: 97 33 68 61 50 87 77 92 36 38 |  6 58 78 65 36 42 80 98 12 47  7 54 67 60  5  9  1 17 90 32 62 39 11 64 26\nCard 160: 83 97 81 82 90 68 54 57 24 96 | 26 90 51 86 47 93 43 32 14 46 54 50 79 37 28  3 21 24 96 33 83 31 82 29 72\nCard 161: 40 64 36 35 17 82 15 52 20 79 | 36 32 57 52 60 46 17 16 20 79 75 35 58 65 44 63 47 49 82 48 76 64 40 15  4\nCard 162: 82 68 31 74 28 39 94 34 61 80 | 74 25 38  3 66 32  1 19 28 39 31 94 67 78 99  7 68 80 18 42 61 72 82 49 34\nCard 163: 73 89 42 20 85 80 45 71 75 32 | 14 39 54 81 69 47 79 46 20  2 43 88 92 31 45 32 80 55 30 85 27 40 63 73 75\nCard 164: 75 44 66 52 15 32 53 99 19 48 | 27 26 44 55 48 96 32 29  2 53 52 15 51 83 79 22 41 66 50 28 91 99 61 75 19\nCard 165: 63 15 31 95  9 83 77 42 80 68 | 31 13 48 93 78 69 82 44 57 28 11 84 86 20 40 76 99 30 47  1 88  6 49 51 21\nCard 166: 93 15  3 43 88 77 24 36 70 74 | 58 36 21 77 15 37 28 22 46 41 88  7 23 47  9 63  3 93 91 70 74 43 26 24 76\nCard 167: 59 10 26 33 69  4 47 21 78 54 | 78 21 85 44 52  5 80 64 42 30 11 59 22 10 33 69 47 23 86 50 20  4 54 26 96\nCard 168: 93 33 56 73  7 32 66 75 35 18 | 54 83  8 29 81 19 51 77 36 26 86 56 76 90 85 46 18 96 79  3 13 57 40 53 59\nCard 169:  4 25 15 63 18 35 64 88 43 29 | 15  1  7 21 84 67 36 33 37 17 65 25 30 18 51 83 63 99 98 66 92 73 39 52 22\nCard 170: 70 44 78 92 43 99 58 36 45 52 | 21 53 74 78 83 95 20 27 69  8 18 15  7 51  2 13 46 57  9 50 17 33 48  6 10\nCard 171: 14 18 42 99 88 89 76  5 60 67 | 11 43 99 89 85 84 53 41 23 60 13 59 18  9 95 88  8  2 25 77 76 54 28 79 14\nCard 172: 14 36 61  7 96 68 48  3 25 26 | 90 21  7 78  3 44 33 34 62 61 31 10  8 37 12 94 11 20 60 91 41 28  9 80 48\nCard 173: 23 13 66 64 57 61 62 12 85 55 | 78 58 36 84 66 19 95 60 31 98 50 75 83 64 96 16 14 47 72 74 86 61  6 65 63\nCard 174: 87 17 65 38 93 64 23 35 44 30 | 18 74 73 34 58 46 54 97 85 42 67 53 92 21 90 70 12 32 82 61 57 37  3 94 29\nCard 175: 16 40 45 76 34 43 82 29 15 65 | 74 15 25  5 16 93 18 84 33 17 37 34 44 72 59 47 43 95 54 39 75 48 69  7 61\nCard 176: 97 38 94 13 74 37 95 17 73 40 | 93 44 64 39 15 46 30 16 35 50 85 71 49 99 36 34 98 47 43 83 76  2 78 52 29\nCard 177: 47 35 15 69  3 28 31 36 99 19 | 29 53 70 11 37 22 50 92 76 80 71 30 58 63 20 32 83 68 34 17 81 14 13 62 59\nCard 178: 20 89 11 12 41 26 49 82 27 56 | 73 40 86 43 75 59 46 81 78 67 44 68 93 98 22 51 92 66 14  5 13 31  7 83  3\nCard 179: 77 72 54 47 44 12 74 80 19 35 | 87 85 17 34 73 31 25 23 39 79 75 82 15 41 68 58 57  1 61 36 50 65  2 96 94\nCard 180: 20 15 32 52 24 80 25 23 41 92 | 52 61 67 28 29 80 16 25 97  2 86 53  9 33 57 56  1 23 41 20 32 12 24 92 15\nCard 181: 89 45 15 68  1 54 27 12 78 11 | 54 28 17 56 98 27  3 89 15 45 87 24 12 11 20 53  1  9 78 68 57 90 36 43 22\nCard 182: 89 91 25 36 50 81 32 75 52 15 | 85 90 76 96 93 36 67 99 75 32 91 29 50 18 66 89 11 40 39 52 35 81 15 25 16\nCard 183: 21 74 42 66 75 99 89 50 24  6 | 88 54 64 29 80 35 69 36 91 25 40 53  8 39 92 58 26 44 60 49 27 46 93 71 77\nCard 184: 40 12 28 35 29 77 91 83 27 38 | 99 58 90 49 85 26 33 64 15 30 40 97 61 41 52  5 22  2 56 17 74 62 84 51 89\nCard 185: 86 29 49 67 58 15  2 25 92 94 | 15 36 18 71 39 49 48 58 86 88 68 67 27 92 47 91 37 90  2 25 41 23 31 29 94\nCard 186: 28 63  5 29  4 25 53 61 81 34 | 52 98 45 33 79 27 51 37 29 38  2 81 25 95 85 77 13 78 63 82 97 71 62  8 50\nCard 187: 24 38 16 63 49 28 86 39 21  2 | 64 24 95 98 80 54 96 19 46 18 82 66 41 28 49 72 90 17 44 71 81 13 25 50 15\nCard 188: 40 88 91 96 21 65 46 38 10 89 | 80 40 89 68 54 96 71 79 70 11 97 93 91 69 65 75 32 38 46 61 67 12 78 88 36\nCard 189: 64 99 58 43 42 51  5 57 86  6 | 77 35 64 88 72 10 58 21 23  6 80 41 55 24 48 11 98 59 52 30 53 57 71 26 49\nCard 190: 44 59 64 10 49 33  4 35 45  5 |  8  5 49 67 26 12 78 48 60 44 51 20 47 99 93 30  9 10 69 72  6 33 37 35 77\nCard 191: 65 48 31  5 19 90 85 40 36 38 | 66 46 92 53  6 56 23 34 12 75 28 44 47 42 76 39 86 49 33 35 70 32 37 18  8\nCard 192: 12 40 48 60 14 23 21 78  6 42 | 90 61 57 85 66 83 43 82  7 67 55 93 17 60 15 20 70 81 89 80 62 18 53 44  3\nCard 193: 19 63 70 77 73 13 33 83 72 49 | 48 71 18 49 99 47 91 83 16 26 51 31  3 12  5 73 88  1 95 10 54 90  8 22 70\nCard 194: 48 51 17 59 61 25 13 70 33 12 |  4 68 37 80  3 61 42 85 57 51 87 65 12 35 21 15  5 19 17  2 58 70 59 73  6\nCard 195: 97  8 45 27  2 14 94 92 37 51 | 30 80 59 35 23 66 24 62 20 54 99 73 82 51 93 60 28 46 95 89 40 61 38 39 14\nCard 196: 67 90 56 86 73 96 40 91 75 25 | 32 71 34 25 85 72 65 51  7 59 83 94 52 49 58 21 53 42 93 63 46 45 24 64 47\nCard 197: 34 60 30 42  2 58 50  6  8 65 | 79 92 57 76 20 78 86 47 58 99 65 80 84 16  5 30 36 77 46 73 29 26 96 45 98\nCard 198: 27 14 25  8 32 93 59 94 89 98 | 46 82 57 37 45 41 33 18 73 55 38 21 13 40 96 87 23 83 49 10 74  2 61 99 56\nCard 199:  3 36 72 71 13 85 45 35 79 93 | 75  7 51 59 81 15 18 57 77  8  1 70 42 34 63 49 69 67 89 99 94  2 39 46 86\nCard 200: 72 10 70 76 33 82 25 19 46  6 | 23 83 41  5 84 78 32 74 47 16 89  7 54 48 14 40 50 31 24 79 97 96 49 53 55\nCard 201: 69 33 86  4 98 77  3 51 63 84 | 63 32 59  3 51 90 98 86 42 88 33 84 12  4 41 60 78 17 25 66 18 54 69 77 26\nCard 202: 32 71 80 75 17 47 90 33 59 60 | 19 90 51 82  2 30 29  5 86 56 11 75 33 39 59 12  3 71 60  6 80 47 32 46 22\nCard 203:  2  6 88 74 73 49 98  3 63 29 |  4 60 48 69  5 19 49 96 73 78 89 99 29 74 25 71 47 44 35 32 43 31 27 23 90\nCard 204: 82 96 98 15 30 50 63 95  6 14 | 25 11 15 81 27 95  1 68 40  4  6 30 59 64 66 97 31 98 74 54 77 71 60 76 72\nCard 205: 24 97 90 42 15 62 21 23 36 31 | 29 30 66 10 23 62 31 69 26 75 20 34 90 27 32 41 24 14 36 59 42 93 21 91 17\nCard 206: 92  8 83 85 47 74 42 35 87 16 | 92 89 13 42 35 23 60 36 45 21  8 80 87 85 83 16 14 49 47 76 91 72 15 54 74\nCard 207: 26  3 38 10 20 46 27 81 66 91 | 94 48 81 46 77 35 91 37  3 99 63 43 60 44 16 38 20 82 66 15 88 12 56 45 13\nCard 208: 65 15 67 49 89 94 72 98 17 55 | 90 63 93 55 18 72 41 58 73 19 89 96 59 82 15 20 52 57 81  3 74 25 98 67 94\nCard 209: 41 69 22 59 45 53 52 21 78 34 | 87 63 96 61 18 37  9 50 90 39  7 23 59 99 81 12 38 30 42 31 94 51 52 86 78\nCard 210:  8 66 74 64 11 68  5 57 18 36 | 89 83 19 75 41 33 20 67 99 43 87  7 81 55 69 97 31 12 50 27 35 58 80 39 44\nCard 211:  2 63 10 57 71 65 40 54  9 42 | 37 81 54 35 65 67 83 10 24 61 41 52 42 53 71 56 63 58 62 11  9 80 84 99 68\nCard 212: 23 39 30 14 28 79 46 55 52 50 | 15 73 78 25 61 46 27 93 51 88  5 99 87 20 32 66 26 58 77 42 94 47  7 76 91\nCard 213: 81  3 71 56 91 87 93 37 47 49 | 56 71 41 85 81 42 20 38 79 39 90  7 55 40 49 60 37 78 61  1 65 35 28 34 66\nCard 214: 22 23 90 10 52 37 71 72 60 32 | 87  9 94 19 34 89 57 53  1 48 44 33  4 32 49 51 98  2 41 66 27 54 23 17 64\nCard 215: 75 39 31  5 71 87 92 72  8 50 | 32 56 34 50 86 64  4 85 49 81 26 74 42 47 70 17 67 95  2  7 99 77 83 91 73\nCard 216: 61 77 58 37 12 20 25 68 18 22 | 76 70 65 17  9 98 61 33  7 30 66 95 44 27 72 46 32 14 40 81 49 87 56  4 11\nCard 217: 30 73 66 90 65 71 84  1 10 27 |  4 52 56 49 17 39 53  3 69 88  8 55 68 43 41 59 99 44 81 47 91  5 50 45 97\nCard 218: 27 40 32 35 55 13 98 94 16 12 | 63 96 50 19 36 65 71 48 49 51 78 46 75 88 24 16 70 84 53  1 30  3 34  9 29\nCard 219: 74 89 55  5 24 77 64 83 84 94 | 32 19 93 92 82 69 12 38  3 60 39 95 11 71 88 99 98 51 20 40  9 17 18 57 16\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  2023 Day 4 Full Solution\n  \n\n\n\nimport functools\nimport re\n\n\nwith open(r'input.txt', \"r\") as f:\n    lines = f.read().splitlines()\n\n\ncards = [[set(re.findall(r'\\d+', side)) for side in line.split(':')[1].split('|')] for line in lines]\nn_wins = [len(have.intersection(want)) for have, want in cards]\nanswer1 = sum(2**(n - 1) for n in n_wins if n &gt; 0)\nprint(answer1)\n\n\n# Part 2\n@functools.cache\ndef count_scratchcards(i):\n  if i &gt; len(n_wins):\n    return 0\n  return 1 + sum(count_scratchcards(i + j + 1) for j in range(n_wins[i]))\n\n\nanswer2 = sum(count_scratchcards(i) for i in range(len(n_wins)))\nprint(answer2)\n\n\n\nExecution took 0.01 seconds"
  },
  {
    "objectID": "posts/2023/05/2023-05.html",
    "href": "posts/2023/05/2023-05.html",
    "title": "2023 Day 5",
    "section": "",
    "text": "Ho ho ho, fellow adventurers!\nIn Advent of Code day 5 we’re tasked with helping the gardener plant seeds and optimise food production.\nThis puzzle introduces us to interval mapping. We’re given a series of maps that define how values transition through different categories, like seeds to soil, soil to fertilizer, and so on. These maps use intervals to describe the conversion process.\nFirst, we’ll read the input.\nwith open('input.txt', \"r\") as f:\n    text = f.read()"
  },
  {
    "objectID": "posts/2023/05/2023-05.html#part-1-marvelous-maps",
    "href": "posts/2023/05/2023-05.html#part-1-marvelous-maps",
    "title": "2023 Day 5",
    "section": "Part 1 Marvelous Maps",
    "text": "Part 1 Marvelous Maps\n\n\n  \n    Task 1\nA series of mappings describe how values transition from Seed to Soil to Fertaliser to … to Location. Find the minimum location possible from a list of seed values.\n\nExample\n\n\n\nFigure Source\nlibrary(tidyverse)\n\n#| fig-width: 5\n#| fig-height: 4\ntext &lt;- \"seeds: 79 14 55 13\n\nseed-to-soil map:\n50 98 2\n52 50 48\n\nsoil-to-fertilizer map:\n0 15 37\n37 52 2\n39 0 15\n\nfertilizer-to-water map:\n49 53 8\n0 11 42\n42 0 7\n57 7 4\n\nwater-to-light map:\n88 18 7\n18 25 70\n\nlight-to-temperature map:\n45 77 23\n81 45 19\n68 64 13\n\ntemperature-to-humidity map:\n0 69 1\n1 0 69\n\nhumidity-to-location map:\n60 56 37\n56 93 4\"\n\nlines &lt;- str_split_1(text, \"\\n\\n\")\n\nseeds &lt;-\n  lines[[1]] |&gt;\n  str_extract_all(\"\\\\d+\", simplify = TRUE) |&gt;\n  as.numeric()\n\nsteps &lt;-\n  lines[-1] |&gt;\n  map(read_lines) |&gt;\n  map(\\(.) {\n    .[-1] |&gt;\n      str_extract_all(\"\\\\d+\", simplify = TRUE) |&gt;\n      as_tibble() |&gt;\n      set_names(c(\"dest_start\", \"source_start\", \"range_len\")) |&gt;\n      mutate(across(everything(), as.numeric))\n  })\n\nget_path &lt;- function(seed) {\n  value &lt;- seed\n  step &lt;- 1\n  path &lt;- list()\n  \n  while (step &lt;= length(steps)) {\n    dest &lt;-\n      steps[[step]] |&gt;\n      mutate(\n        is_valid = value &gt;= source_start & value &lt; source_start + range_len,\n        dest = dest_start + value - source_start\n      ) |&gt;\n      filter(value &gt;= source_start & value &lt; source_start + range_len) |&gt;\n      pull(dest)\n    \n    new_value &lt;- c(dest, value)[1]\n    path &lt;- bind_rows(\n      path,\n      tibble(\n        x = value,\n        xend = new_value,\n        y = 9 - step,\n        yend = y - 1\n      )\n    )\n    value = new_value\n    step &lt;- step + 1\n  }\n  path\n}\n\nplot_seeds &lt;- function(seeds) {\n  paths &lt;-\n  seeds |&gt;\n  map(get_path) |&gt;\n  list_rbind()\n\n  plot_df &lt;-\n    steps |&gt;\n    list_rbind(names_to = \"step\") |&gt;\n    mutate(\n      y = 9 - step,\n      yend = y - 1,\n      x = map2(source_start, range_len, \\(start, range) start + seq_len(range) - 1),\n      xend = map2(dest_start, range_len, \\(start, range) start + seq_len(range) - 1)\n    ) |&gt;\n    unnest()\n  \n  points &lt;-\n    bind_rows(\n      paths |&gt; select(x, y),\n      paths |&gt; select(x = xend, y = yend)\n    ) |&gt;\n    mutate(\n      col = case_when(\n        y == 8 ~ \"#2F7E4A\",\n        y == 1 & x == min(ifelse(y == 1, x, NA), na.rm = TRUE) ~ \"#91672C\",\n        TRUE ~ \"#1577A0\"\n      ),\n      size = ifelse(col == \"#1577A0\", 1.1, 3)\n    )\n  \n  ggplot(plot_df, aes(x, y, xend = xend, yend = yend)) +\n    geom_segment(alpha = 0.5, col = \"#969696\") +\n    geom_segment(data = paths, col = \"#1577A0\") +\n    geom_point(\n      data = points,\n      mapping = aes(x, y, col = I(col), size = I(size), xend = NULL, yend = NULL)\n    ) +\n    scale_y_continuous(\n      breaks = seq_len(8),\n      labels = rev(c(\"Seed\", \"Soil\", \"Fertilizer\", \"Water\", \"Light\", \"Temperature\", \"Humidity\", \"Location\"))\n    ) +\n    theme_void() +\n    theme(\n      axis.text.y = element_text(\n        family = \"LM Roman 10\",\n        margin = margin(r = 0.8 * 11 / 2),\n        hjust = 1\n      )\n    )\n}\n\n\nplot_seeds(seeds)\n\n\n\n\n\n  \n\n\n\n\n\nPart 1 is straightforward. Iterate through each initial seed. For each seed, go through all the conversion maps (soil, fertilizer, etc.). If the seed value falls within a defined range in a map, we convert it to the corresponding value in the destination category (e.g., soil) based on the formula dest_start + (seed - source_start). If the seed value doesn’t fall within any range in a map, it remains unchanged.\nAfter processing all the maps for a seed, we add its final converted value (which corresponds to the location category in the last map) to a list. Finally, we find the minimum value in the locations list.\n\nimport re\n\n\nseeds, *maps_list = text.split('\\n\\n')\nseeds = [int(x) for x in re.findall(r'\\d+', seeds)]\nmaps_list = [[[int(x) for x in re.findall(r'\\d+', line)] for line in maps.splitlines()[1:]] for maps in maps_list]\n\nlocations = []\nfor seed in seeds:\n    for maps in maps_list:\n        for dest_start, source_start, range_len in maps:\n            if source_start &lt;= seed &lt; source_start + range_len:\n                seed = dest_start + (seed - source_start)\n                break\n    locations.append(seed)\n\nanswer1 = min(locations)\nprint(answer1)\n#&gt; 993500720\n\n\n  Key Points\n  \n    \n\nMap each of the seeds from Soil to Fertaliser to … to Location\nAt each step find the range which overlaps with the current value and use it to map to the next step\nIf no range matches then the value moves unchanged to the next step\nGet the smallest Location"
  },
  {
    "objectID": "posts/2023/05/2023-05.html#part-2-intersecting-intervals",
    "href": "posts/2023/05/2023-05.html#part-2-intersecting-intervals",
    "title": "2023 Day 5",
    "section": "Part 2 Intersecting Intervals",
    "text": "Part 2 Intersecting Intervals\n\n\n\n  \n    Task 2\nGiven ranges of seed values find the minimum location possible.\n\nExample\n\n\n\nFigure Source\nseeds |&gt;\n  split(ceiling(seq_along(seeds) / 2)) |&gt;\n  map(\\(l) seq(l[1], l[1] + l[2])) |&gt;\n  unlist() |&gt;\n  plot_seeds()\n\n\n\n\n\n  \n\n\n\n\n\n\nAt first, this seems simple. Just update the list of seeds to contain all the seeds in the ranges. Unfortunately, there are billions of seeds so that would take several minutes.\nInstead of processing each individual seed within the initial ranges, we work directly with the ranges themselves. As we map these ranges through the conversion steps, we need to identify how they overlap with the ranges defined in each map. In some cases, this might involve splitting the initial range into smaller pieces\nOverlap detection and splitting will be simpler if we don’t have any gaps. So let’s fill in all the holes for all the maps.\n\ndef insert_missing_ranges(maps):\n    maps.sort(key=lambda e: e[1])\n    first_val = maps[0][1]\n    if first_val != 0:\n        maps.insert(0, [0, 0, first_val])\n    \n    last_val = maps[-1][1] + maps[-1][2]\n    maps.append([last_val, last_val, 10_000_000_000])\n\n    for i in range(len(maps) - 1):\n        end = maps[i][1] + maps[i][2]\n        start = maps[i+1][1]\n        if end != start:\n            maps.append((end, end, start - end))\n\n    maps.sort(key=lambda e: e[1])\n\nfor maps in maps_list:\n    insert_missing_ranges(maps)\n\nNow, map each of the ranges through all of the steps. If a range overlaps with a mapping range, map the overlapping portion and continue checkking the unmapped portion if there is any left.\n\ndef get_smallest_range(i, in_start, in_range_len):\n    if i == len(maps_list):\n        return in_start\n\n    output_ranges = [] # (out_start, out_range_len) pairs\n    for dest_start, source_start, range_len in maps_list[i]:\n        # No overlap\n        if source_start + range_len &lt;= in_start or source_start &gt;= in_start + in_range_len:\n            continue\n        \n        # Assume overlap\n        if source_start == in_start: # Source starts at input start\n            overlap_start = in_start\n            overlap_range_len = min(range_len, in_range_len)\n        elif source_start &lt; in_start: # Source starts to left\n            overlap_start = in_start\n            overlap_end = min(source_start + range_len, in_start + in_range_len)\n            overlap_range_len = overlap_end - in_start\n        else: # Source starts to right of input start\n            overlap_start = source_start\n            overlap_end = min(source_start + range_len, in_start + in_range_len)\n            overlap_range_len = overlap_end - source_start\n\n        overlap_start = overlap_start - source_start +  dest_start\n        output_ranges.append((overlap_start, overlap_range_len))\n\n    outputs = [get_smallest_range(i + 1, out_start, out_range_len) for out_start, out_range_len in output_ranges]\n    return min(outputs) if outputs else float('inf')\n\nstarting_ranges = [seeds[i:i+2] for i in range(0, len(seeds), 2)]\nanswer2 = min(get_smallest_range(0, in_start, in_range_len) for in_start, in_range_len in starting_ranges)\nprint(answer2)\n#&gt; 4917124\n\n\n  Key Points\n  \n    \n\nDon’t iterate over all possible seeds as that would take minutes\nInstead, maintain contiguous ranges at each step\nget_smallest_range will find the smallest location accessible in the ith step for the given range at that step\nIf the current range overlaps with a mapping range, map the overlapping portion and check the portion that doesn’t overlap\ninsert_missing_ranges ensures that the range 0 to 10 billion is fully covered by filling in missing ranges\nGuaranteeing no holes makes the overlap detection and splitting simpler\n\n    \n  \n\n\n\n\n  \n  \n     Problem\n  \n\n  \n  \n     Input\n  \n\n  \n  \n     Full Solution\n  \n\n\n\n\n\n\n\n\n\n  2023 Day 5 Input\n  \n\n\n\nseeds: 304740406 53203352 1080760686 52608146 1670978447 367043978 1445830299 58442414 4012995194 104364808 4123691336 167638723 2284615844 178205532 3164519436 564398605 90744016 147784453 577905361 122056749\n\nseed-to-soil map:\n0 699677807 922644641\n4174180469 3833727510 120786827\n1525682201 2566557266 229511566\n3280624601 3954514337 340452959\n2228029508 2796068832 310221139\n3621077560 3280624601 553102909\n2120836342 592484641 107193166\n1982514669 227320902 138321673\n1755193767 0 227320902\n922644641 1622322448 603037560\n2538250647 365642575 226842066\n2765092713 2225360008 341197258\n\nsoil-to-fertilizer map:\n1916776044 145070025 3464138\n1920240182 0 145070025\n706160141 2208005933 115191764\n2898492924 830275742 87027483\n3489083348 3344594558 103871907\n2985520407 148534163 415139950\n821351905 917303225 327392865\n1148744770 1517236949 182706102\n295069722 3448466465 411090419\n1816984891 3244803405 99791153\n4282585972 4292886644 2080652\n3592955255 563674113 266601629\n4266462972 4158154511 16123000\n1331450872 1244696090 272540859\n2715943131 3062253612 182549793\n4284666624 4174277511 10300672\n4158154511 4184578183 108308461\n1603991731 1995012773 212993160\n2065310207 2411620688 650632924\n0 1699943051 295069722\n3400660357 2323197697 88422991\n\nfertilizer-to-water map:\n3585244197 3493316345 482900943\n2871272496 878061687 456215665\n3477664135 4187387234 107580062\n845559238 15587711 56716031\n121711204 2918313406 409174755\n1639718746 0 15587711\n530885959 2603640127 314673279\n902275269 2435903232 167736895\n2635221133 72303742 236051363\n1070012164 308355105 569706582\n1699846244 1334277352 935374889\n4279315086 3477664135 15652210\n1655306457 2269652241 44539787\n109056711 2423248739 12654493\n0 2314192028 109056711\n4068145140 3976217288 211169946\n\nwater-to-light map:\n3841742547 3016842841 17384315\n2875021919 2637593760 185450069\n3413635232 3588265685 87508205\n1311241677 236307150 54007684\n3349161906 4276682782 18284514\n896790030 1355845673 34430118\n3060471988 3835573209 145836645\n2741184131 3675773890 133837788\n1387754847 947687177 15489861\n3785944618 2057196631 55797929\n2006585491 2931426646 85416195\n3873217816 3809611678 25961531\n1667765627 643929130 34884144\n2092001686 2434956599 202637161\n1001898651 158618769 77688381\n3899179347 2253048950 181907649\n1786416461 377140410 101956748\n0 833901414 113785763\n1403244708 479097158 56815029\n3859126862 3034227156 14090954\n747996464 678813274 31450438\n869173795 963177038 27616235\n3268502638 2006585491 50611140\n113785763 0 148879571\n262665334 1511505797 386606610\n1187603975 710263712 123637702\n3319113778 3987361499 30048128\n3367446420 2885237834 46188812\n931220148 990793273 15913032\n1460059737 1006706305 120880314\n1079587032 535912187 108016943\n3645890228 2112994560 140054390\n3206308633 2823043829 62194005\n1888373209 148879571 9739198\n3501143437 3443518894 144746791\n779446902 1127586619 89726893\n947133180 1217313512 54765471\n2481910976 4017409627 259273155\n1365249361 1390275791 22505486\n4087038641 3048318110 207928655\n1702649771 1272078983 83766690\n649271944 1412781277 98724520\n2294638847 3256246765 187272129\n4081086996 3981409854 5951645\n1580940051 290314834 86825576\n\nlight-to-temperature map:\n2659452899 3773423191 23529065\n1010417677 1830019321 229964714\n1506263997 1764304095 65715226\n3017023682 3993999178 103632805\n3758361154 3931294907 62704271\n2513441862 2529586713 106552791\n3821065425 3163657189 7959671\n3410504451 3191697730 271334719\n2500616406 3150831733 12825456\n2065874786 2636139504 257698620\n4142272690 2382216135 108163002\n1377732678 1378901025 61208694\n91217027 248578952 8927711\n2463617376 3879075083 36999030\n3982807123 2315058258 67157877\n2323573406 2065874786 97274446\n958870382 916323074 51547295\n3868386197 3579887474 114420926\n931392999 1351423642 27477383\n2942753127 3694308400 74270555\n1812734437 168620508 79958444\n3301364949 2163149232 3197696\n2420847852 2166346928 42769524\n3829025096 3111470632 39361101\n2619994653 2490379137 39207576\n1571979223 1523548881 240755214\n2927532333 3916074113 15220794\n3125500723 4097631983 175864226\n1438941372 10080856 67322625\n2049903179 0 10080856\n3304562645 2209116452 105941806\n1976132043 1277652506 73771136\n2659202229 3171616860 250670\n4256036535 3463032449 38930761\n1240382391 257506663 137350287\n0 77403481 91217027\n3120656487 3768578955 4844236\n100144738 967870369 309782137\n409926875 394856950 521466124\n2682981964 4273496209 21471087\n2704453051 3501963210 77924264\n2802207515 2893838124 125324818\n3681839170 3796952256 76521984\n4250435692 3873474240 5600843\n1892692881 1440109719 83439162\n4049965000 3019162942 92307690\n2782377315 3171867530 19830200\n\ntemperature-to-humidity map:\n1281293605 2434144353 57731817\n3534843655 3623804479 36539813\n1516028925 367078655 499627624\n3340374639 3427302148 25514722\n1176213912 2491876170 105079693\n3872645852 3827818849 188531931\n508302359 1375008638 300832898\n0 866706279 508302359\n4146417618 3475254801 148549678\n4083438506 3660344292 62979112\n3365889361 3745584127 82234722\n4061177783 3723323404 22260723\n2015656549 1675841536 348405327\n1056134836 246999579 120079076\n3448124083 3452816870 22437931\n3321587434 3408514943 18787205\n3470562014 4016350780 64281641\n3571383468 3321587434 86927509\n1339025422 2024246863 177003503\n809135257 0 246999579\n2364061876 2596955863 115651453\n3658310977 4080632421 214334875\n2479713329 2201250366 232893987\n\nhumidity-to-location map:\n2408792839 708984436 12070437\n3916327360 4103567762 90492800\n2136669394 2902458135 226099404\n1414655297 721054873 722014097\n2462136308 3514619416 2467233\n1254861475 3327498132 98562162\n2362768798 569836962 46024041\n4185175199 3916327360 8885363\n421054090 234463197 201173738\n2497827912 1550759989 35404865\n849065671 0 224309687\n37059832 615861003 93123433\n4006820160 3925212723 178355039\n2863253575 1705311678 653833074\n622227828 1443068970 107691019\n2464603541 2869233764 33224371\n1353423637 3128557539 61231660\n1073375358 3426060294 47286090\n2725544642 3189789199 137708933\n26906322 224309687 10153510\n2420863276 3473346384 41273032\n729918847 1586164854 119146824\n2533232777 2676921899 192311865\n0 2359144752 26906322\n1120661448 435636935 134200027\n130183265 2386051074 290870825\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  2023 Day 5 Full Solution\n  \n\n\n\nimport re\n\n\nwith open('input.txt', \"r\") as f:\n    text = f.read()\n\n\nseeds, *maps_list = text.split('\\n\\n')\nseeds = [int(x) for x in re.findall(r'\\d+', seeds)]\nmaps_list = [[[int(x) for x in re.findall(r'\\d+', line)] for line in maps.splitlines()[1:]] for maps in maps_list]\n\nlocations = []\nfor seed in seeds:\n    for maps in maps_list:\n        for dest_start, source_start, range_len in maps:\n            if source_start &lt;= seed &lt; source_start + range_len:\n                seed = dest_start + (seed - source_start)\n                break\n    locations.append(seed)\n\nanswer1 = min(locations)\nprint(answer1)\n\n\n# Part 2\ndef insert_missing_ranges(maps):\n    maps.sort(key=lambda e: e[1])\n    first_val = maps[0][1]\n    if first_val != 0:\n        maps.insert(0, [0, 0, first_val])\n    \n    last_val = maps[-1][1] + maps[-1][2]\n    maps.append([last_val, last_val, 10_000_000_000])\n\n    for i in range(len(maps) - 1):\n        end = maps[i][1] + maps[i][2]\n        start = maps[i+1][1]\n        if end != start:\n            maps.append((end, end, start - end))\n\n    maps.sort(key=lambda e: e[1])\n\n\ndef get_smallest_range(i, in_start, in_range_len):\n    if i == len(maps_list):\n        return in_start\n\n    output_ranges = [] # (out_start, out_range_len) pairs\n    for dest_start, source_start, range_len in maps_list[i]:\n        # No overlap\n        if source_start + range_len &lt;= in_start or source_start &gt;= in_start + in_range_len:\n            continue\n        \n        # Assume overlap\n        if source_start == in_start: # Source starts at input start\n            overlap_start = in_start\n            overlap_range_len = min(range_len, in_range_len)\n        elif source_start &lt; in_start: # Source starts to left\n            overlap_start = in_start\n            overlap_end = min(source_start + range_len, in_start + in_range_len)\n            overlap_range_len = overlap_end - in_start\n        else: # Source starts to right of input start\n            overlap_start = source_start\n            overlap_end = min(source_start + range_len, in_start + in_range_len)\n            overlap_range_len = overlap_end - source_start\n\n        overlap_start = overlap_start - source_start +  dest_start\n        output_ranges.append((overlap_start, overlap_range_len))\n\n    outputs = [get_smallest_range(i + 1, out_start, out_range_len) for out_start, out_range_len in output_ranges]\n    return min(outputs) if outputs else float('inf')\n\n\nfor maps in maps_list:\n    insert_missing_ranges(maps)\n\nstarting_ranges = [seeds[i:i+2] for i in range(0, len(seeds), 2)]\nanswer2 = min(get_smallest_range(0, in_start, in_range_len) for in_start, in_range_len in starting_ranges)\nprint(answer2)\n\n\n\nExecution took 0.01 seconds"
  },
  {
    "objectID": "posts/2023/06/2023-06.html",
    "href": "posts/2023/06/2023-06.html",
    "title": "2023 Day 6",
    "section": "",
    "text": "Ho ho ho, fellow adventurers!\nAdvent of Code day 6 presents a problem involving toy boat races, where participants must find optimal strategies to beat existing distance records.\nThis puzzle can be solved with some basic maths involving quadratics.\nFirst, we’ll read the input.\nwith open('input.txt', \"r\") as f:\n    lines = f.readlines()"
  },
  {
    "objectID": "posts/2023/06/2023-06.html#part-1-hold-to-gold",
    "href": "posts/2023/06/2023-06.html#part-1-hold-to-gold",
    "title": "2023 Day 6",
    "section": "Part 1 Hold to Gold",
    "text": "Part 1 Hold to Gold\n\n\n  \n    Task 1\nYou’re given a list of races for toy boats. Each race contains a race duration (ms) and a current distance record (mm).\nThe distance a toy boat travels in a race is determined by how long you hold the button at the start: each millisecond of holding increases the boat’s speed by 1 mm/ms, but also reduces the remaining time for movement. After releasing the button, the boat travels at its accumulated speed for the rest of the race duration.\nFind the number of ways to beat each race’s record and get the product of those numbers.\n\nExample\n\nThe diagram below illustrates the calculations for this example of three races.\nTime:      7  15   30\nDistance:  9  40  200\n\n\nFigure Source\nlibrary(tidyverse)\n\n\n\ntext &lt;- \"Time:      7  15   30\nDistance:  9  40  200\"\n\nlines &lt;-\n  str_split_1(text, \"\\n\") |&gt;\n  map(\\(line) str_extract_all(line, \"\\\\d+\", simplify = TRUE)) |&gt;\n  map(as.numeric)\n\ncount_ways &lt;- function(t, d) {\n  upper &lt;- (-t - sqrt(t ^ 2 - 4 * (-1) * (-d))) / 2 * (-1)\n  lower &lt;- (-t + sqrt(t ^ 2 - 4 * (-1) * (-d))) / 2 * (-1)\n  ceiling(upper) - floor(lower) - 1\n}\n\ncreate_plot &lt;- function(race_id, race_duration, record, x_limit = 30) {\n  df &lt;- tibble(wait_time = seq(from = 0, to = race_duration, by = 1)) |&gt;\n    mutate(\n      distance = wait_time * (race_duration - wait_time),\n      fill = case_when(\n        distance &gt; record ~ \"#1577A0\",\n        TRUE ~ \"#969696\"\n      )\n    )\n  \n  ggplot(df, aes(wait_time, distance, fill = I(fill))) +\n    geom_col() +\n    geom_hline(\n      aes(yintercept = record),\n      data = NULL,\n      col = \"#BE4844\",\n      linetype = \"longdash\",\n      size = 0.8\n    ) +\n    scale_x_continuous(\n      breaks = seq(from = 0, to = race_duration, by = 1),\n      labels = \\(break_value) ifelse(break_value == race_duration, glue::glue(\"&lt;b style = 'color:#2F7E4A;'&gt;{break_value}&lt;/b&gt;\"), as.character(break_value)),\n      limits = c(-0.5, x_limit),\n      expand = c(0, 0)\n    ) +\n    scale_y_continuous(\n      breaks = c(scales::breaks_pretty(n = 4)(df$distance), record),\n      labels = \\(break_value) ifelse(break_value == record, glue::glue(\"&lt;b style = 'color:#BE4844;'&gt;{break_value}&lt;/b&gt;\"), as.character(break_value)),\n      expand = c(0, 0)\n    ) +\n    labs(\n      title = glue::glue(\"Race {race_id}\"),\n      subtitle = glue::glue(\"&lt;b style = 'color:#2F7E4A;'&gt;Race Duration: {race_duration}ms&lt;/b&gt;, &lt;b style = 'color:#BE4844;'&gt;Record: {record}mm&lt;/b&gt;, &lt;b style = 'color:#1577A0;'&gt;Ways to Beat Record: {count_ways(race_duration, record)}&lt;/b&gt;\"),\n      x = \"\",\n      y = \"\"\n    ) +\n    theme_minimal(base_family = \"LM Roman 10\") +\n    theme(\n      panel.grid = element_blank(),\n      axis.line.x.bottom = element_line(color  = \"#CCCCCC\"),\n      axis.ticks.x.bottom = element_line(color  = \"#CCCCCC\"),\n      axis.line.y.left = element_line(color  = \"#CCCCCC\"),\n      axis.ticks.y.left = element_line(color  = \"#CCCCCC\"),\n      axis.text.x = ggtext::element_markdown(),\n      axis.text.y = ggtext::element_markdown(),\n      plot.subtitle = ggtext::element_markdown()\n    )\n}\n\nplots &lt;-\n  pmap(list(seq_along(lines[[1]]), lines[[1]], lines[[2]]), create_plot) |&gt;\n  modify_at(2, \\(p) p + labs(y = \"Distance (mm)\")) |&gt;\n  modify_at(3, \\(p) p + labs(x = \"Button Hold Time (ms)\"))\n\n# Using cowplot or egg with custom font and markdown made the subtitle spacing incorrect\n# Works fine with gridExtra::grid.arrange but the axes aren't aligned\n# cowplot::plot_grid(plotlist = plots, ncol = 1)\n# gridExtra::grid.arrange(plots[[1]], plots[[2]], plots[[3]], ncol = 1)\n# egg::ggarrange(plots[[1]], plots[[2]], plots[[3]], ncol = 1)\n\n# This was the best way to get the font rendering correctly and the axes aligned\nplots |&gt;\n  map(ggplotGrob) %&gt;%\n  do.call(gridExtra::gtable_rbind, .) |&gt;\n  grid::grid.draw()\n\n\n\n\n\n\n\\[\n\\newcommand{\\blue}[1]{\\color{##1577A0}\\textbf{#1}\\color{##55595C}}\n\\newcommand{\\orange}[1]{\\color{##91672C}\\textbf{#1}\\color{##55595C}}\n\\newcommand{\\red}[1]{\\color{##BE4844}\\textbf{#1}\\color{##55595C}}\n\\newcommand{\\green}[1]{\\color{##2F7E4A}\\textbf{#1}\\color{##55595C}}\n\\]\n\n\\[\\blue{4} * \\blue{8} * \\blue{9} = \\orange{288}\\]\n  \n\n\n\n\n\n\nParabolic Pondering\nTo calculate the number of ways to beat the record, we can find the difference between the upper and lower \\(x\\) values of the blue bars.\nThese bounds can be found as the intersection of the red line and a frowny parabola which is a function of the button hold time and race duration.\n\n\nAlgebraic Adventures\nGiven:\n\n\\(\\green{T}\\): Total race time in milliseconds.\n\\(\\red{D}\\): Record distance that needs to be beaten, in millimeters.\n\\(w\\): Time in milliseconds for which the button is held down at the start of the race.\n\nThe distance your boat travels when the button is held for \\(w\\) milliseconds with total race time \\(T\\) is: \\[w \\cdot (T - w)\\]\nThis matches the current record \\(D\\), when: \\[D = w \\cdot (T - w)\\]\nThis can be rewritten as a quadratic equation in terms of \\(w\\): \\[0 = -w^2 + T \\cdot w - D\\]\nTo solve for \\(w\\), we use the quadratic formula: \\[w = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}\\]\nIn our equation, \\(a = -1\\), \\(b = T\\), and \\(c = -D\\). Thus, substituting these values into the quadratic formula yields: \\[w = \\frac{-T \\pm \\sqrt{T^2 - 4 \\cdot (-1) \\cdot (-D)}}{2 \\cdot (-1)}\\]\nSimplifying, we get two values for (w), which represent the upper and lower bounds of the button holding time that allows the boat to exceed the record distance: \\[\n\\begin{aligned}\nw_{upper} &= \\frac{-T - \\sqrt{T^2 - 4D}}{2 \\cdot (-1)} \\\\\nw_{lower} &= \\frac{-T + \\sqrt{T^2 - 4D}}{2 \\cdot (-1)} \\\\\n\\end{aligned}\n\\]\nTo find the number of ways to beat the record, we calculate the number of integers in the open interval \\((w_{lower}, w_{upper})\\): \\[\\text{\\blue{Number of ways}} = \\lceil w_{upper} \\rceil - \\lfloor w_{lower} \\rfloor - 1\\]\nThen simply plug in the numbers for each race and get the product of the resulting values.\n\nimport math\nimport re\n\n\ndef count_ways(T, D):\n    upper = (-T - math.sqrt(T ** 2 - 4 * (-1) * (-D))) / 2 * (-1)\n    lower = (-T + math.sqrt(T ** 2 - 4 * (-1) * (-D))) / 2 * (-1)\n    return math.ceil(upper) - math.floor(lower) - 1\n\n\ntimes, distances = [[int(x) for x in re.findall(r'\\d+', line)] for line in lines]\nanswer1 = math.prod(count_ways(time, distance) for time, distance in zip(times, distances))\nprint(answer1)\n#&gt; 500346\n\n\n  Key Points\n  \n    \n\nFind the upper and lower button hold times which beat the record\nThis can be expressed as the intersection between \\(f(x) = D\\) and \\(f(x) = w \\cdot (T - w)\\)\nCompute the product of the differences between the upper and lower bounds"
  },
  {
    "objectID": "posts/2023/06/2023-06.html#part-2-magnitude-multiplied",
    "href": "posts/2023/06/2023-06.html#part-2-magnitude-multiplied",
    "title": "2023 Day 6",
    "section": "Part 2 Magnitude Multiplied",
    "text": "Part 2 Magnitude Multiplied\n\n\n\n  \n    Task 2\nRather than multiple races, the race durations and distance records are each concatenated to form one giant race.\nFind the number of ways to beat this race’s record.\n\nExample\n\nTime:      71530\nDistance:  940200\n\n\nFigure Source\n# https://stackoverflow.com/questions/35511951/r-ggplot2-collapse-or-remove-segment-of-y-axis-from-scatter-plot\nsquish_trans &lt;- function(from, to, factor) {\n  trans &lt;- function(x) {\n    if (any(is.na(x))) return(x)\n    isq &lt;- x &gt; from & x &lt; to\n    ito &lt;- x &gt;= to\n    \n    x[isq] &lt;- from + (x[isq] - from)/factor\n    x[ito] &lt;- from + (to - from)/factor + (x[ito] - to)\n    \n    x\n  }\n\n  inv &lt;- function(x) {\n    if (any(is.na(x))) return(x)\n\n    isq &lt;- x &gt; from & x &lt; from + (to - from)/factor\n    ito &lt;- x &gt;= from + (to - from)/factor\n\n    x[isq] &lt;- from + (x[isq] - from) * factor\n    x[ito] &lt;- to + (x[ito] - (from + (to - from)/factor))\n    \n    x\n  }\n  \n  scales::trans_new(\"squished\", trans, inv)\n}\n\ntime_distance &lt;-\n  lines |&gt;\n  map_chr(str_c, collapse = \"\") |&gt;\n  map_int(as.integer)\n\nrace_duration &lt;- time_distance[[1]]\nrecord &lt;- time_distance[[2]]\n\nlower_upper &lt;- function(t, d) {\n  upper &lt;- (-t - sqrt(t ^ 2 - 4 * (-1) * (-d))) / 2 * (-1)\n  lower &lt;- (-t + sqrt(t ^ 2 - 4 * (-1) * (-d))) / 2 * (-1)\n  c(floor(lower), ceiling(upper) - 1)\n}\n\nlower_upper_values &lt;- lower_upper(race_duration, record)\nlower_win &lt;- lower_upper_values[[1]]\nupper_win &lt;- lower_upper_values[[2]]\n\nresolution &lt;- 1000\n\ndf &lt;- tibble(\n  wait_time = unique(c(\n    seq(from = 0, to = lower_win, length.out = resolution),\n    seq(from = lower_win, to = upper_win, length.out = resolution),\n    seq(from = upper_win, to = race_duration, length.out = resolution)\n  )),\n  distance = wait_time * (race_duration - wait_time),\n  is_win = wait_time &gt; lower_win & wait_time &lt; upper_win\n)\n\nggplot(NULL, aes(wait_time, distance)) +\n  geom_area(data = filter(df, wait_time &lt;= lower_win), fill = \"#969696\") +\n  geom_area(data = filter(df, wait_time &gt;= upper_win), fill = \"#969696\") +\n  geom_area(data = filter(df, wait_time &gt; lower_win & wait_time &lt; upper_win), fill = \"#1577A0\") +\n  geom_hline(\n    aes(yintercept = record),\n    data = NULL,\n    col = \"#BE4844\",\n    linetype = \"longdash\",\n    size = 0.8\n  ) +\n  scale_x_continuous(\n    minor_breaks = seq(from = 0, to = race_duration, length.out = 100),\n    labels = \\(break_value) ifelse(break_value == race_duration, glue::glue(\"&lt;b style = 'color:#2F7E4A;'&gt;{scales::label_comma()(break_value)}&lt;/b&gt;\"), scales::label_comma()(break_value)),\n    breaks = c(0, 14, seq(from = 10000, to = 60000, by = 10000), 71516, race_duration),\n    expand = c(0, 0),\n    transform = squish_trans(lower_win , upper_win + 1, 1000)\n  ) +\n  scale_y_continuous(\n    breaks = c(0, record, 100000000, 500000000, 1000000000),\n    minor_breaks = seq(from = 0, to = 1279135224, length.out = 50),\n      labels = \\(break_value) ifelse(break_value == record, glue::glue(\"&lt;b style = 'color:#BE4844;'&gt;{scales::label_comma()(break_value)}&lt;/b&gt;\"), scales::label_comma()(break_value)),\n    transform = squish_trans(940200, 1279135224, 1000),\n    expand = c(0, 0)\n  ) +\n    labs(\n      title = \"Combined Race\",\n      subtitle = glue::glue(\"&lt;b style = 'color:#2F7E4A;'&gt;Race Duration: {scales::label_comma()(race_duration)}ms&lt;/b&gt;, &lt;b style = 'color:#BE4844;'&gt;Record: {scales::label_comma()(record)}mm&lt;/b&gt;, &lt;b style = 'color:#1577A0;'&gt;Ways to Beat Record: {scales::label_comma()(count_ways(race_duration, record))}&lt;/b&gt;\"),\n      x = \"Button Hold Time (ms)\",\n      y = \"Distance (mm)\"\n    ) +\n    theme_minimal(base_family = \"LM Roman 10\") +\n    theme(\n      axis.line.x.bottom = element_line(color  = \"#CCCCCC\"),\n      axis.ticks.x.bottom = element_line(color  = \"#CCCCCC\"),\n      axis.line.y.left = element_line(color  = \"#CCCCCC\"),\n      axis.ticks.y.left = element_line(color  = \"#CCCCCC\"),\n      axis.text.x = ggtext::element_markdown(),\n      axis.text.y = ggtext::element_markdown(),\n      plot.subtitle = ggtext::element_markdown(),\n      plot.margin = margin(t = 0, r = 40, b = 0, l = 0, unit = \"pt\")\n    )\n\n\n\n\n\nTails zoomed 1000x for readability\n\n\n\n\n  \n\n\n\n\n\n\nJust plug the new numbers into the same formula.\n\ntime, distance = [int(''.join(str(x) for x in dim)) for dim in [times, distances]]\nanswer2 = count_ways(time, distance)\nprint(answer2)\n#&gt; 42515755\n\n\n  Key Points\n  \n    \n\nConcatenate the race durations and distance records\nCompute the number of ways to beat this race’s record using the same formula as part 1\n\n    \n  \n\n\n\n\n  \n  \n     Problem\n  \n\n  \n  \n     Input\n  \n\n  \n  \n     Full Solution\n  \n\n\n\n\n\n\n\n\n\n  2023 Day 6 Input\n  \n\n\n\nTime:        51     92     68     90\nDistance:   222   2031   1126   1225\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  2023 Day 6 Full Solution\n  \n\n\n\nimport math\nimport re\n\n\nwith open('input.txt', \"r\") as f:\n    lines = f.readlines()\n\n\ndef count_ways(T, D):\n    #     D = w * (T - w)\n    # =&gt;  0 = -w**2 + T*w - D\n    # =&gt;  zeroes at (-T +- sqrt(T**2 - 4*(-1)*(-D))) / 2*(-1)  (quadratic formula)\n    upper = (-T - math.sqrt(T ** 2 - 4 * (-1) * (-D))) / 2 * (-1)\n    lower = (-T + math.sqrt(T ** 2 - 4 * (-1) * (-D))) / 2 * (-1)\n    return math.ceil(upper) - math.floor(lower) - 1\n\n\ntimes, distances = [[int(x) for x in re.findall(r'\\d+', line)] for line in lines]\nanswer1 = math.prod(count_ways(time, distance) for time, distance in zip(times, distances))\nprint(answer1)\n\n\n# Part 2\ntime, distance = [int(''.join(str(x) for x in dim)) for dim in [times, distances]]\nanswer2 = count_ways(time, distance)\nprint(answer2)\n\n\n\nExecution took 0.01 seconds"
  },
  {
    "objectID": "posts/2023/07/2023-07.html",
    "href": "posts/2023/07/2023-07.html",
    "title": "2023 Day 7",
    "section": "",
    "text": "\\[\n\\newcommand{\\blue}[1]{\\color{##1577A0}\\textbf{#1}\\color{##55595C}}\n\\newcommand{\\orange}[1]{\\color{##91672C}\\textbf{#1}\\color{##55595C}}\n\\newcommand{\\red}[1]{\\color{##BE4844}\\textbf{#1}\\color{##55595C}}\n\\newcommand{\\green}[1]{\\color{##2F7E4A}\\textbf{#1}\\color{##55595C}}\n\\newcommand{\\grey}[1]{\\color{##969696}{#1}\\color{##55595C}}\n\\newcommand{\\greyred}[1]{\\color{##f27d79}{#1}\\color{##55595C}}\n\\newcommand{\\greygreen}[1]{\\color{##7ec295}{#1}\\color{##55595C}}\n\\newcommand{\\greyblue}[1]{\\color{##76acc2}{#1}\\color{##55595C}}\n\\newcommand{\\plus}{\\smash{\\lower{0.5pc}\\grey{+}}}\n\\]\nHo ho ho, fellow adventurers!\nAdvent of Code day 7 invites us to play a game of Camel Cards. In this simplified version of poker, we must evaluate and rank hands.\nFirst, we’ll read the input.\nwith open('input.txt', \"r\") as f:\n    lines = f.readlines()"
  },
  {
    "objectID": "posts/2023/07/2023-07.html#part-1-hand-hierarchy",
    "href": "posts/2023/07/2023-07.html#part-1-hand-hierarchy",
    "title": "2023 Day 7",
    "section": "Part 1 Hand Hierarchy",
    "text": "Part 1 Hand Hierarchy\n\n\n  \n    Task 1\nYou are given a list of 5 card hands and their corresponding bids. Rank each hand and calculate the winnings as the product of the rank and bid. Compute the total winnings.\nHands are ranked by their type. If two hands are of the same type, their ordering is then determined by comparing the strength of the individual cards, starting from the first card to the fifth, as needed.\nHand types are ranked as follows:\n\nHigh card\nOne pair\nTwo pair\nThree of a kind\nFull house\nFour of a kind\nFive of a kind\n\n\nExample\n\n\n\\[\n\\begin{aligned}\n&{\\text{Hand}} &&{\\text{Bid}} &&{\\text{\\grey{Rank}}} &&{\\text{\\grey{Type}}}\\phantom{\\Huge{g}}&{\\text{\\grey{Winnings}}} &\\\\\n&\\text{32T3K} &&\\green{765} &&\\greyblue{1} &&\\text{\\grey{One pair}}          &\\greygreen{765} \\,\\grey{\\times}\\, \\greyblue{1}                                                        &\\plus\\\\\n&\\text{T55J5} &&\\green{684} &&\\greyblue{4} &&\\text{\\grey{Full house}}        &\\greygreen{684} \\,\\grey{\\times}\\, \\greyblue{4}                                                        &\\plus\\\\\n&\\text{KK677} &&\\green{28}  &&\\greyblue{3} &&\\text{\\grey{Two pair}}\\grey{^*} & \\greygreen{28} \\,\\grey{\\times}\\, \\greyblue{3}                                                        &\\plus\\\\\n&\\text{KTJJT} &&\\green{220} &&\\greyblue{2} &&\\text{\\grey{Two pair}}          &\\greygreen{220} \\,\\grey{\\times}\\, \\greyblue{2}                                                        &\\plus\\\\\n&\\text{QQQJA} &&\\green{483} &&\\greyblue{5} &&\\text{\\grey{Three of a kind}}   &\\greygreen{483} \\,\\grey{\\times}\\, \\greyblue{5} \\llap{\\lower{0.4pc}\\underline{\\phantom{483 \\times 5}}} &\\\\\n&             &&            &&             &&                                &\\orange{6440}                                                                                         &\\\\\n\\end{aligned}\n\\]\n\\(\\grey{\\scriptsize{^{*}\\text{Second card ranks lower than other two pair's second card}}}\\)\n  \n\n\n\n\n\nWe’ll need a mechanism to rank hands. First, we define a function, primary_order, which ranks the hand’s type. This is accomplished by analysing the frequency of each card in the hand, allowing us to classify the hand based on predefined patterns.\n\nimport collections\n\n\ndef primary_order(hand):\n    counts = [count for card, count in collections.Counter(hand).most_common()]\n\n    possible_counts = [\n        [1, 1, 1, 1, 1],  # High card\n        [2, 1, 1, 1],  # One pair\n        [2, 2, 1],  # Two pair\n        [3, 1, 1],  # Three of a kind\n        [3, 2],  # Full house\n        [4, 1],  # Four of a kind\n        [5],  # Five of a kind\n    ]\n\n    return possible_counts.index(counts)\n\nNext, we define a function, secondary_order, which ranks hands based on the individual card values.\n\ndef secondary_order(hand):\n    return tuple(\"23456789TJQKA\".index(card) for card in hand)\n\nFinally, define hand_bid_order as the combination of the primary and secondary orderings. Python makes it easy to combine and apply our primary and secondary orderings. We can provide sort a key function which takes an element and returns a tuple of the primary and secondary orderings.\nCalculate the total winnings as the sum of bids multiplied by the rank.\n\ndef hand_bid_order(hand_bid):\n    hand, bid = hand_bid\n    return primary_order(hand), secondary_order(hand)\n\n\nhands_bids = [line.split(\" \") for line in lines]\nhands_bids.sort(key=hand_bid_order)\nanswer1 = sum(i * int(bid) for i, (_, bid) in enumerate(hands_bids, 1))\nprint(answer1)\n#&gt; 251927063\n\n\n  Key Points\n  \n    \n\nRanking Camel Cards hands involves two levels of ordering:\n\nPrimary ordering is based on the type of hand, determined by the pattern of card frequencies\nSecondary ordering evaluates the specific values of the cards within a hand\n\n\nA combined key function, hand_bid_order, uses both the primary and secondary orderings to sort the hands from weakest to strongest"
  },
  {
    "objectID": "posts/2023/07/2023-07.html#part-2-jokers-wild",
    "href": "posts/2023/07/2023-07.html#part-2-jokers-wild",
    "title": "2023 Day 7",
    "section": "Part 2 Jokers Wild",
    "text": "Part 2 Jokers Wild\n\n\n\n  \n    Task 2\nJs are now wild Jokers and act as whatever card results in the strongest type.\nDetermine the new hand ranks and compute the total winnings.\n\nExample\n\n\\[\n\\begin{aligned}\n&{\\text{Hand}}      &&{\\text{Bid}} &&{\\text{\\grey{Rank}}} &&{\\text{\\grey{Type}}}\\phantom{\\Huge{g}}&{\\text{\\grey{Winnings}}} &\\\\\n&\\text{32T3K}       &&\\green{765} &&\\greyblue{1} &&\\text{\\grey{One pair}}          &\\greygreen{765} \\,\\grey{\\times}\\, \\greyblue{1}                                                        &\\plus\\\\\n&\\text{T55\\red{J}5} &&\\green{684} &&\\greyblue{3} &&\\text{\\grey{Four of a kind}}        &\\greygreen{684} \\,\\grey{\\times}\\, \\greyblue{3}                                                        &\\plus\\\\\n&\\text{KK677}       &&\\green{28}  &&\\greyblue{2} &&\\text{\\grey{Two pair}} & \\greygreen{28} \\,\\grey{\\times}\\, \\greyblue{2}                                                        &\\plus\\\\\n&\\text{KT\\red{JJ}T} &&\\green{220} &&\\greyblue{5} &&\\text{\\grey{Four of a kind}}          &\\greygreen{220} \\,\\grey{\\times}\\, \\greyblue{5}                                                        &\\plus\\\\\n&\\text{QQQ\\red{J}A} &&\\green{483} &&\\greyblue{4} &&\\text{\\grey{Four of a kind}}   &\\greygreen{483} \\,\\grey{\\times}\\, \\greyblue{4} \\llap{\\lower{0.4pc}\\underline{\\phantom{483 \\times 4}}} &\\\\\n&                   &&            &&             &&                                &\\orange{5905}                                                                                         &\\\\\n\\end{aligned}\n\\]\n  \n\n\n\n\n\n\nCreate a new function, hand_bid_order_wild, which evaluates the maximum potential strength of a hand by considering all possible substitutions of J with other cards.\n\ndef hand_bid_order_wild(hand_bid):\n    hand, bid = hand_bid\n    return (\n        max(primary_order(hand.replace(\"J\", c)) for c in \"23456789TQKA\"),\n        secondary_order(hand),\n    )\n\n\nhands_bids.sort(key=hand_bid_order_wild)\nanswer2 = sum(i * int(bid) for i, (_, bid) in enumerate(hands_bids, 1))\nprint(answer2)\n#&gt; 255783389\n\n\n  Key Points\n  \n    \n\nCompute the max primary_order when replacing Js with every other card\nJokers only affect the primary_order - the secondary_order is calculated the same way\n\n    \n  \n\n\n\n\n  \n  \n     Problem\n  \n\n  \n  \n     Input\n  \n\n  \n  \n     Full Solution\n  \n\n\n\n\n\n\n\n\n\n  2023 Day 7 Input\n  \n\n\n\nT33AA 613\nJ5JJ5 411\nJ4444 240\nT5K98 463\n7Q6K2 4\n772T2 730\n23228 608\nT254A 212\nTJ584 169\n5T555 349\n5A5A5 539\n66K55 341\n7TJK2 70\nQ9999 763\n555J7 359\nA2Q22 607\n699J6 922\nQQQ66 110\nK9KKK 225\nQ646Q 96\nAJ66A 51\n6J234 615\nQAAAQ 723\n99992 453\n77666 497\n8TKQ7 325\n88988 842\n8724K 89\nQJQ53 626\nA5AKA 145\n25TT2 267\n22T69 414\n63A7Q 941\n69655 461\nQT7T3 648\n82929 121\n424Q2 846\n53935 224\n633TJ 619\n42494 85\n39J35 661\n9J449 596\nTTATT 74\nKK88K 219\n99696 811\n33347 916\n6AJJA 716\n24334 281\nT3TTJ 472\nT6TJK 952\n32883 378\nA9J5T 934\n99888 103\n688QQ 836\n45J97 152\nKQJK5 80\n26QKK 499\n3333J 138\n22JQ8 789\nT66TT 475\n9JQA2 511\n356A8 462\nQ8AQQ 148\n6AT95 696\n3752Q 58\n5K88T 270\nTAAA5 793\nJ7479 647\n444QQ 853\n83922 584\n34T72 114\n8T23A 546\n999J6 269\n895K9 203\nJ58T8 831\n8AK44 875\nA3333 531\n29K67 604\nJ9K97 680\nA7AAA 286\n8927T 717\n7KKK8 492\n98839 64\n63K83 444\nQJ2QQ 882\nJ828J 769\n3A77A 217\nT9228 266\n73A44 250\n2KK7Q 39\n44KA5 708\nK8K64 535\n3AA9A 981\nKT6TK 825\n4T6TJ 503\n632TK 948\nQT869 813\n24249 348\nA3Q8A 519\nT6385 291\n935Q4 543\n88585 796\n49777 244\nQ3J33 971\nT5J44 868\n99797 319\n88J2K 627\n224JT 571\nJ45A4 216\n76847 130\n4922A 263\n66Q49 991\n22J32 823\n48675 277\nAT9QT 153\n86848 232\nQQK6J 669\nK22JK 662\n28TKJ 737\nQJ88Q 745\n39338 177\nTQ5Q4 624\n4J549 752\nAQJT3 228\n736Q6 392\n22A3A 656\n7KK27 724\n4K444 826\n85888 347\n7746J 639\n67777 822\nK9989 671\n5T267 659\nKKTKK 815\n92279 541\n47422 82\n9T3TJ 26\nTTK7Q 13\nQ9J9Q 625\nT495Q 798\n794T6 963\n99TT9 508\n27433 32\n29282 260\n28Q82 521\n95449 756\n28666 191\nA84QT 616\n292Q2 282\nK4JQ5 442\nT3883 866\n66TKT 918\n44KK7 892\nT5T9A 122\n77J79 635\n447J7 273\n8448T 598\n29JTT 5\n33KJT 7\n52454 634\n99A9A 527\n228TQ 747\n3J3AT 715\nQQ6QQ 421\n65KK3 750\n9KK4J 970\n4K769 201\n2255K 183\n95598 564\n7797Q 94\n84442 706\nT28AA 832\nTT949 498\n8669J 218\n5262A 454\n3829J 593\n2J74J 47\n76K95 940\n99899 695\nK252K 298\nAT6K3 173\nT4A22 409\n85558 555\n5TJJT 930\nQ79KA 477\nJ83JQ 185\n57J87 630\nJJJ44 643\nJAAAA 787\n6J344 684\nA7J7K 415\nTKATT 242\nK7JA6 873\n22999 170\nT73K6 664\n696T2 699\n9KK9K 707\nJ55J9 645\n5Q555 691\n9JJ95 81\nA75J2 621\nKK6K4 274\n92T92 436\n66555 614\n47J69 924\n58A85 673\n6666K 709\n24A8J 220\n3T779 481\nAK478 479\n9QTT9 120\n95Q78 227\n67469 71\nKK9KJ 268\n62599 72\n73733 147\nKJQQQ 761\n33335 294\n355T5 777\n93T62 550\n5777Q 526\nJAJK7 25\nAAA8A 510\n9JTT4 457\nA9AKA 711\nK333K 426\nQQ22Q 222\n8J7K3 986\nKK8TA 894\n6TJQ6 722\nA44KA 418\n794TA 272\nJT5J6 814\nT5328 686\nAA2AA 28\nK39A3 160\nT9A67 382\nJJJJJ 917\n2424J 666\n745AA 312\n4K56K 383\n3K25A 712\n88QQ5 76\n927QT 570\n7K249 288\n5565J 252\n4QQ4T 651\nQQ666 435\n2Q262 967\nK59AQ 175\nK2K26 402\n89J64 188\n8K866 379\nA69J5 331\n77474 504\nAK4A8 352\nT5TKQ 563\n4Q23K 578\n226J2 966\nQ93A5 590\n28T25 505\n6A49T 512\nTTT8T 513\n24342 500\n82882 48\n37JA9 432\n596J8 259\n93993 207\n6A636 629\nTQKKT 938\n66786 433\n96976 243\nA6J33 88\nTATA4 12\n9A999 365\n5623J 292\n6K6KK 158\n6T665 441\n3Q57Q 3\n64644 898\n68888 223\nJ8889 14\nT4J6J 360\nJ7773 357\nQA4AQ 601\n83A62 812\nQJ7J7 434\nQTK86 705\n5T885 896\nA9575 261\nA95AT 164\nAJJ68 583\nKQJ2Q 742\n7JQ79 518\nT27JJ 317\nQTTTT 586\n5677Q 146\n42442 797\n4AT7T 490\n88JTT 59\n77T77 253\n88JAA 37\n3T633 221\nK28KK 395\n2J22K 1000\n66T54 416\nK2KKK 264\n248Q5 989\n88A87 390\n555JJ 890\n22662 556\n54J54 559\n22264 179\nTA253 694\nTTT9T 27\n3A9K2 861\nQ87QJ 600\nA7K4J 190\n99J99 239\n5JA64 725\n28TAQ 530\n69Q6Q 314\n46443 620\n9Q993 256\nJ7K47 482\n26J66 108\nJ5855 978\n4QJQK 720\n44449 790\nT5JTT 912\n773TT 862\n9J6K8 340\nK77QQ 744\nT94J4 878\nJ2K9T 305\nTTT22 692\n4J877 284\nQJQQQ 487\n3Q39Q 641\n22KKK 494\n8JQK5 591\nJ99J2 937\nK3845 19\n55755 278\n82AT8 721\nJ6666 323\nK2K6K 77\nT3QJ8 358\nKQTKK 837\n222QQ 968\n263Q3 655\n99222 582\n555KQ 877\nTJTJ4 663\n3KQ4T 985\n268Q4 214\nAAJJA 872\nK444K 9\n89J8Q 753\n22488 144\nQ82J8 734\n54545 20\n99JQJ 886\n88TTA 129\n22525 287\n52A99 182\n8654T 575\nT9572 731\nAQAJQ 611\n8AT45 420\n99934 393\nJ5KJK 580\n43A4J 529\n48465 450\n36AA6 998\nKT2JQ 927\n65Q78 488\n89T5A 33\n72AA7 623\n7777J 406\nJQ999 16\n42TK6 729\nQ2QQQ 949\n8J3JK 560\n32323 438\n6687Q 53\n7A7A7 166\n8Q5Q5 828\n899QK 867\nJK4A5 87\n3A33Q 788\n4Q734 821\n33JJJ 746\n7TAAA 118\nAA44J 538\n5JJ8T 931\nJTQ6T 155\nJ5555 493\n2AA5T 301\n72732 78\nKTJ7T 255\nKAAAJ 906\n63QQ7 443\nT2653 2\n3Q334 728\nT4J67 205\n7QT86 926\n4J4K4 495\nA7227 68\n69984 786\n2J95A 757\n94AAQ 380\nT2J5A 198\nJ5995 22\n54444 91\nK3QA5 840\n4TT44 396\n88883 194\n77722 136\n9A9T6 502\nK54KK 176\n73878 549\n87JA5 758\nKK555 38\n34A44 689\n436K9 123\n9A286 391\n66A56 215\n9QQK9 63\n99392 887\n99994 817\nA9229 125\n446A3 921\nQAAA9 113\n222TT 295\n66227 262\nQTTAA 804\n362A4 417\nAQAAA 976\n5535J 809\n8858T 69\n745QA 486\n62626 928\n92Q2T 558\n55889 445\nQJ857 465\nQQ99Q 925\n69657 576\n33KKK 478\n33QKQ 448\n744AA 300\n36363 322\n2TTJT 785\nQQ8QQ 776\nAQ2K7 740\nJ666J 425\n7463Q 79\nTQQQQ 933\n6898J 710\n7Q629 36\n55Q5J 141\n3A7AJ 302\n2K229 458\nJJ999 929\n2J222 368\n55577 167\n5A8J2 960\n74434 806\n3JQ3Q 904\n44884 848\nAATAK 864\n8833Q 67\n788J8 738\n49443 741\nTJTTJ 603\n9999K 11\n43JAA 399\nQ8Q98 953\n996T9 779\nJ92AA 171\n4A339 439\n7QJ67 102\n5T52T 446\n9T555 735\n37582 162\n9949T 714\n62444 124\nKTTKT 506\nQ7TK4 473\n4A4J4 983\nK8QT5 587\n9Q299 572\nJ252J 683\n23T4Q 181\nQ96AT 820\n8J47J 841\nTA9TA 318\nA58TT 654\n5555K 895\n24372 154\nTTTJT 977\n88285 805\n2T8J4 367\nA7AA7 818\nTT44J 964\nQ799Q 573\nKJQ8Q 829\n2JT23 592\n9A9AJ 585\nJ799T 883\nAATTA 568\n39395 289\nA8557 553\nTKTTT 115\n5AA35 132\nT67Q6 507\nKJ773 844\nJ39AK 371\n444TJ 397\n7548K 958\n6676J 192\n22822 275\n4J343 638\n93JAQ 525\nTA34K 229\nT44KK 408\n2J229 381\n49JJJ 657\n622K2 364\n66654 111\nKKK4T 394\n35885 551\nJ49J9 363\n99567 542\nK49JA 957\n55335 713\nK5577 431\n69987 66\nJ9KAK 557\n297A8 994\n799AJ 299\nK3647 276\n33KQ4 988\n8J338 332\n5368J 469\n66AK4 168\n8T688 135\nKK698 336\n7TJ77 987\nTAT43 748\n6K466 703\nTQ567 845\n94998 55\n32363 233\nK2J28 835\n383J3 99\n7629A 65\n4447A 178\nTJTKK 134\n5TTQ5 324\n7KQK7 681\n87877 196\n82282 419\n23TTJ 165\nA888A 850\n7945T 474\n6K339 231\nA5A2K 577\n97A39 491\n766JA 139\nAK73A 951\n3AA99 794\n8JQ47 484\n4QQ47 956\n8ATJA 857\n9KK8Q 57\n6K6K2 675\nQ3QKQ 515\n93J8T 483\n66J46 489\n7QQQ7 765\nT2T45 6\nJA2AJ 992\n434K9 356\nK85TK 610\nQK543 485\n23232 204\n222Q2 697\n668T8 8\nTTJAT 236\n5KKKK 852\n666QJ 876\n84544 579\n9T43Q 93\n53424 561\n7KA42 471\n5J3A5 246\nQKK6Q 567\n3T33J 362\n5967J 827\n3333Q 801\n97832 290\n89299 802\nATJQ5 727\n22924 954\n8J888 676\n32396 90\n3533K 384\n977T7 910\nTQ4TT 678\n84K44 310\nT8T67 116\nA72K5 839\nTTJTK 100\nA8A6A 133\nA3384 751\nJ77J7 733\nA4TJ4 60\n53974 640\n749TK 501\nTT333 516\n6TQQK 387\nT4QT4 112\n747J7 863\nJ3868 97\n93K33 995\n8K888 468\n72777 754\n8QQ8Q 803\n48T59 107\nT9TQQ 451\n33JJ3 900\nTT6TT 783\n3JA73 375\n59235 644\n3322Q 781\nT7TTT 843\nKKK68 372\nQAQ5T 52\n7K2KK 528\nJ2A82 106\nA5J7A 385\n758Q7 524\n62767 333\n8JAQ2 901\n674AQ 186\nA9T34 10\n3K333 562\n39433 935\nQQQQ5 633\n38Q55 234\n555JK 337\nKKKQ9 407\nQTTQQ 388\n66AQ7 701\n25AA5 338\nQA397 29\n44424 979\nA4JQJ 685\nQ8888 30\n333J6 328\nKKKK3 913\n33897 343\nAATA8 606\n845QJ 589\n93733 98\n4J338 536\nJ8488 313\n33T33 49\n7TKTK 280\nQAQQQ 374\nTT7T7 235\n944T9 335\n4KAKA 386\nA8A48 959\n67647 1\n66466 456\n2JT77 35\nQ4QQQ 547\n3J8AA 800\nT5444 354\n7732J 514\nKKTAA 311\n8JJJA 792\n75KKK 427\nJT2K3 137\nK354A 540\nT5TTT 424\n7Q594 303\nJ6J6J 642\n65384 914\n5A8AA 189\n82249 984\n8Q76K 140\n875KJ 565\nQJA23 40\nQQ82Q 946\n94T28 258\n7222T 636\n6A9K2 127\nJ7725 452\n56656 351\n99969 447\nK3Q63 92\nQJJ58 370\n24368 854\nJJ9K9 612\n8J3J8 833\n88QQ8 321\nJT479 736\n522J6 889\nQ57JT 202\nA5KJT 83\nTTTAA 285\n2A2AA 326\nTQT4A 149\n93333 353\nKKKJK 693\n828J8 62\n95544 860\n2JJJ9 480\n33666 574\nKQ293 915\n888T8 31\n762AJ 637\n43483 599\n46544 377\n8A588 43\nTT35T 668\n59795 226\n2KKKJ 509\nQT492 865\nJ3634 945\n88877 279\n49J26 423\nQ838T 307\nA73A3 780\nJ3J36 955\n45655 771\n752A4 888\n6A4AA 84\n62Q5J 665\nA222A 858\nQQQQ7 773\nJJJJ8 943\n5AAAA 520\n28696 389\nJ9939 15\n57385 618\n2T4J9 874\n99K9K 199\n39749 455\n94273 719\n88358 849\n74TTQ 17\nJK6AQ 117\nK7525 75\n3Q2A6 760\n2J969 460\n55QJT 464\nT2222 544\n9898T 595\nJ6866 982\nQJQ54 467\n66996 962\n2552Q 532\n66QQJ 939\nQK477 41\n838J8 755\n5969Q 622\n32555 739\n5TQ79 602\n63979 871\nJ3AA3 808\nTTJJJ 791\n88284 923\n666T6 554\n4J4AQ 193\nQT32K 672\nKTA96 403\nTT4TT 251\n5AA86 942\n7373J 950\n45QT8 581\n99Q7J 413\n2662K 838\n77J55 880\nQ8393 157\nKAAAA 936\nT7QKK 329\nJKQAK 412\n22242 45\n7T5T8 105\n5A69K 881\nTJAAA 316\n4A36A 911\n5JJ66 265\n48884 766\nTA385 605\n7A72J 762\n43A3A 652\n24K4Q 195\n67K5T 632\n55TT5 919\nT686T 617\n83667 306\nT6TA6 932\nQJ746 430\n29TQK 772\n63J38 18\nQT2J5 449\n79737 893\n79J8J 104\nQ762J 180\n7J433 996\n9K6K6 34\nK972Q 552\n57877 702\n4AQJA 851\n23337 768\nTTJ67 376\n66686 320\nKA7KA 847\n444AA 210\n58226 346\nAJK22 649\n6AJJ6 631\nTJJT9 698\nT583K 42\n2Q2JQ 334\n99KK8 24\nQQQJJ 770\nJ9599 879\nK6287 646\nAA858 891\n3TT3T 400\n5K982 537\n5764T 315\nA8828 73\nTQ8AT 980\n83J27 197\n778KA 594\n335T6 257\n3Q925 670\n5KJKK 237\n8TKJ4 660\nA8AA3 679\n8Q889 131\n726T2 174\nQQ8T8 682\n36436 126\n5J329 21\nJ8A9J 920\nJQA95 855\n9Q263 653\nK2555 297\n65J33 990\n2A49T 163\nAQTK2 903\nTK7TT 366\n6A2J4 870\n55534 704\n66469 588\n5K5KK 172\n6AT3A 293\nA5AA9 440\n685Q3 885\nT5A97 767\nK6258 466\n4Q28A 726\n7T555 404\n7KKKK 345\nJJJ88 330\n222KK 496\nATJQJ 690\nQT563 308\nQ48KQ 206\nTTJT8 209\nTTT3T 522\n82878 405\nJA37T 628\n3T878 159\n77Q96 597\nK9488 245\nJ8448 972\n69743 254\nJ72Q5 369\n69666 749\n2KTAA 373\nJK556 816\n43833 230\n42242 743\nA28T5 775\nK585J 361\nQ4433 119\n333J4 344\n3A7T9 961\nJT236 249\n84899 807\nTT99K 830\nAAJ2A 50\n36333 429\n9K9KA 869\nJ2777 774\n4455T 150\n3KQ87 718\nAAKKJ 247\n94K94 271\nJ2759 46\n32495 899\n4T68Q 156\n6JA66 428\nQQ464 213\n9T92J 248\nK7QA8 459\nKJJKK 523\n22JJ2 534\nJ96Q6 884\n4K4KJ 327\n66777 109\nK6336 908\n2Q2TT 200\n98494 907\n74547 401\n959J6 545\n444T4 947\n32222 56\n3K66K 834\nAKAAK 859\n3Q3QQ 688\nQ4Q4Q 759\nJJ667 974\nTAQTJ 969\n97474 86\n87K49 142\nJ6T77 241\nT99J6 677\n67666 810\nJ9K38 784\n24JJ4 410\nA73T6 569\n77377 856\n74784 973\n496JK 339\n2T7KQ 184\nQ52Q8 905\n47AA3 161\n836TK 476\nKT2TT 517\n77QK7 309\n4344J 208\n45J55 824\n57757 355\nJ22J3 609\n9AJA7 658\n293T9 993\n66499 674\n7Q777 650\nTA4J3 296\nQQKQQ 304\n48944 799\n25TKJ 342\nT4TT4 795\n88TT8 128\n8A787 187\nK9KK6 44\n64A48 965\nK84KJ 143\n78A5T 548\n66636 23\nQ737Q 470\n83A2J 211\n3Q8K8 902\nT655T 54\n54745 398\nQA869 422\n893AQ 909\nK66J6 819\n99J86 997\n99A9J 95\n44237 566\n3J2T3 975\nJ5223 732\n97J7J 778\n67QQ6 350\n7444Q 944\n69Q4A 764\n5TT8T 533\n52242 999\nK5KJ5 687\nJJ87K 667\nTTT2T 283\nQKKKK 437\nJ9555 151\n53335 238\n55554 700\n7A6TQ 101\n57AJQ 897\n83485 782\nK7773 61\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  2023 Day 7 Full Solution\n  \n\n\n\nimport collections\n\n\nwith open('input.txt', \"r\") as f:\n    lines = f.read().splitlines()\n\n\ndef primary_order(hand):\n    counts = [count for card, count in collections.Counter(hand).most_common()]\n\n    possible_counts = [\n        [1, 1, 1, 1, 1],  # High card\n        [2, 1, 1, 1],  # One pair\n        [2, 2, 1],  # Two pair\n        [3, 1, 1],  # Three of a kind\n        [3, 2],  # Full house\n        [4, 1],  # Four of a kind\n        [5],  # Five of a kind\n    ]\n\n    return possible_counts.index(counts)\n\n\ndef secondary_order(hand):\n    return tuple(\"23456789TJQKA\".index(card) for card in hand)\n\n\ndef hand_bid_order(hand_bid):\n    hand, bid = hand_bid\n    return primary_order(hand), secondary_order(hand)\n\n\nhands_bids = [line.split(\" \") for line in lines]\nhands_bids.sort(key=hand_bid_order)\nanswer1 = sum(i * int(bid) for i, (_, bid) in enumerate(hands_bids, 1))\nprint(answer1)\n\n\n# Part 2\ndef hand_bid_order_wild(hand_bid):\n    hand, bid = hand_bid\n    return (\n        max(primary_order(hand.replace(\"J\", c)) for c in \"23456789TQKA\"),\n        secondary_order(hand),\n    )\n\n\nhands_bids.sort(key=hand_bid_order_wild)\nanswer2 = sum(i * int(bid) for i, (_, bid) in enumerate(hands_bids, 1))\nprint(answer2)\n\n\n\nExecution took 0.04 seconds"
  }
]